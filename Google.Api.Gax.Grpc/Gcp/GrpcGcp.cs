// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: grpc_gcp.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grpc.Gcp {

  /// <summary>Holder for reflection information generated from grpc_gcp.proto</summary>
  public static partial class GrpcGcpReflection {

    #region Descriptor
    /// <summary>File descriptor for grpc_gcp.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GrpcGcpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5ncnBjX2djcC5wcm90bxIIZ3JwYy5nY3AiZwoJQXBpQ29uZmlnEjEKDGNo",
            "YW5uZWxfcG9vbBgCIAEoCzIbLmdycGMuZ2NwLkNoYW5uZWxQb29sQ29uZmln",
            "EicKBm1ldGhvZBjpByADKAsyFi5ncnBjLmdjcC5NZXRob2RDb25maWciaQoR",
            "Q2hhbm5lbFBvb2xDb25maWcSEAoIbWF4X3NpemUYASABKA0SFAoMaWRsZV90",
            "aW1lb3V0GAIgASgEEiwKJG1heF9jb25jdXJyZW50X3N0cmVhbXNfbG93X3dh",
            "dGVybWFyaxgDIAEoDSJJCgxNZXRob2RDb25maWcSDAoEbmFtZRgBIAMoCRIr",
            "CghhZmZpbml0eRjpByABKAsyGC5ncnBjLmdjcC5BZmZpbml0eUNvbmZpZyKF",
            "AQoOQWZmaW5pdHlDb25maWcSMQoHY29tbWFuZBgCIAEoDjIgLmdycGMuZ2Nw",
            "LkFmZmluaXR5Q29uZmlnLkNvbW1hbmQSFAoMYWZmaW5pdHlfa2V5GAMgASgJ",
            "IioKB0NvbW1hbmQSCQoFQk9VTkQQABIICgRCSU5EEAESCgoGVU5CSU5EEAJi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Gcp.ApiConfig), global::Grpc.Gcp.ApiConfig.Parser, new[]{ "ChannelPool", "Method" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Gcp.ChannelPoolConfig), global::Grpc.Gcp.ChannelPoolConfig.Parser, new[]{ "MaxSize", "IdleTimeout", "MaxConcurrentStreamsLowWatermark" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Gcp.MethodConfig), global::Grpc.Gcp.MethodConfig.Parser, new[]{ "Name", "Affinity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Gcp.AffinityConfig), global::Grpc.Gcp.AffinityConfig.Parser, new[]{ "Command", "AffinityKey" }, null, new[]{ typeof(global::Grpc.Gcp.AffinityConfig.Types.Command) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ApiConfig : pb::IMessage<ApiConfig> {
    private static readonly pb::MessageParser<ApiConfig> _parser = new pb::MessageParser<ApiConfig>(() => new ApiConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApiConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.Gcp.GrpcGcpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiConfig(ApiConfig other) : this() {
      ChannelPool = other.channelPool_ != null ? other.ChannelPool.Clone() : null;
      method_ = other.method_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiConfig Clone() {
      return new ApiConfig(this);
    }

    /// <summary>Field number for the "channel_pool" field.</summary>
    public const int ChannelPoolFieldNumber = 2;
    private global::Grpc.Gcp.ChannelPoolConfig channelPool_;
    /// <summary>
    /// The channel pool configurations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.Gcp.ChannelPoolConfig ChannelPool {
      get { return channelPool_; }
      set {
        channelPool_ = value;
      }
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 1001;
    private static readonly pb::FieldCodec<global::Grpc.Gcp.MethodConfig> _repeated_method_codec
        = pb::FieldCodec.ForMessage(8010, global::Grpc.Gcp.MethodConfig.Parser);
    private readonly pbc::RepeatedField<global::Grpc.Gcp.MethodConfig> method_ = new pbc::RepeatedField<global::Grpc.Gcp.MethodConfig>();
    /// <summary>
    /// The method configurations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpc.Gcp.MethodConfig> Method {
      get { return method_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApiConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApiConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChannelPool, other.ChannelPool)) return false;
      if(!method_.Equals(other.method_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (channelPool_ != null) hash ^= ChannelPool.GetHashCode();
      hash ^= method_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (channelPool_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ChannelPool);
      }
      method_.WriteTo(output, _repeated_method_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (channelPool_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelPool);
      }
      size += method_.CalculateSize(_repeated_method_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApiConfig other) {
      if (other == null) {
        return;
      }
      if (other.channelPool_ != null) {
        if (channelPool_ == null) {
          channelPool_ = new global::Grpc.Gcp.ChannelPoolConfig();
        }
        ChannelPool.MergeFrom(other.ChannelPool);
      }
      method_.Add(other.method_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (channelPool_ == null) {
              channelPool_ = new global::Grpc.Gcp.ChannelPoolConfig();
            }
            input.ReadMessage(channelPool_);
            break;
          }
          case 8010: {
            method_.AddEntriesFrom(input, _repeated_method_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelPoolConfig : pb::IMessage<ChannelPoolConfig> {
    private static readonly pb::MessageParser<ChannelPoolConfig> _parser = new pb::MessageParser<ChannelPoolConfig>(() => new ChannelPoolConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelPoolConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.Gcp.GrpcGcpReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelPoolConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelPoolConfig(ChannelPoolConfig other) : this() {
      maxSize_ = other.maxSize_;
      idleTimeout_ = other.idleTimeout_;
      maxConcurrentStreamsLowWatermark_ = other.maxConcurrentStreamsLowWatermark_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelPoolConfig Clone() {
      return new ChannelPoolConfig(this);
    }

    /// <summary>Field number for the "max_size" field.</summary>
    public const int MaxSizeFieldNumber = 1;
    private uint maxSize_;
    /// <summary>
    /// The max number of channels in the pool.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxSize {
      get { return maxSize_; }
      set {
        maxSize_ = value;
      }
    }

    /// <summary>Field number for the "idle_timeout" field.</summary>
    public const int IdleTimeoutFieldNumber = 2;
    private ulong idleTimeout_;
    /// <summary>
    /// The idle timeout (seconds) of channels without bound affinity sessions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IdleTimeout {
      get { return idleTimeout_; }
      set {
        idleTimeout_ = value;
      }
    }

    /// <summary>Field number for the "max_concurrent_streams_low_watermark" field.</summary>
    public const int MaxConcurrentStreamsLowWatermarkFieldNumber = 3;
    private uint maxConcurrentStreamsLowWatermark_;
    /// <summary>
    /// The low watermark of max number of concurrent streams in a channel.
    /// New channel will be created once it get hit, until we reach the max size
    /// of the channel pool.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxConcurrentStreamsLowWatermark {
      get { return maxConcurrentStreamsLowWatermark_; }
      set {
        maxConcurrentStreamsLowWatermark_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelPoolConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelPoolConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxSize != other.MaxSize) return false;
      if (IdleTimeout != other.IdleTimeout) return false;
      if (MaxConcurrentStreamsLowWatermark != other.MaxConcurrentStreamsLowWatermark) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxSize != 0) hash ^= MaxSize.GetHashCode();
      if (IdleTimeout != 0UL) hash ^= IdleTimeout.GetHashCode();
      if (MaxConcurrentStreamsLowWatermark != 0) hash ^= MaxConcurrentStreamsLowWatermark.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxSize != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxSize);
      }
      if (IdleTimeout != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(IdleTimeout);
      }
      if (MaxConcurrentStreamsLowWatermark != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxConcurrentStreamsLowWatermark);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxSize);
      }
      if (IdleTimeout != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IdleTimeout);
      }
      if (MaxConcurrentStreamsLowWatermark != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxConcurrentStreamsLowWatermark);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelPoolConfig other) {
      if (other == null) {
        return;
      }
      if (other.MaxSize != 0) {
        MaxSize = other.MaxSize;
      }
      if (other.IdleTimeout != 0UL) {
        IdleTimeout = other.IdleTimeout;
      }
      if (other.MaxConcurrentStreamsLowWatermark != 0) {
        MaxConcurrentStreamsLowWatermark = other.MaxConcurrentStreamsLowWatermark;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxSize = input.ReadUInt32();
            break;
          }
          case 16: {
            IdleTimeout = input.ReadUInt64();
            break;
          }
          case 24: {
            MaxConcurrentStreamsLowWatermark = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MethodConfig : pb::IMessage<MethodConfig> {
    private static readonly pb::MessageParser<MethodConfig> _parser = new pb::MessageParser<MethodConfig>(() => new MethodConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MethodConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.Gcp.GrpcGcpReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodConfig(MethodConfig other) : this() {
      name_ = other.name_.Clone();
      Affinity = other.affinity_ != null ? other.Affinity.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodConfig Clone() {
      return new MethodConfig(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_name_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> name_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// A fully qualified name of a gRPC method, or a wildcard pattern ending
    /// with .*, such as foo.bar.A, foo.bar.*. Method configs are evaluated
    /// sequentially, and the first one takes precedence.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Name {
      get { return name_; }
    }

    /// <summary>Field number for the "affinity" field.</summary>
    public const int AffinityFieldNumber = 1001;
    private global::Grpc.Gcp.AffinityConfig affinity_;
    /// <summary>
    /// The channel affinity configurations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.Gcp.AffinityConfig Affinity {
      get { return affinity_; }
      set {
        affinity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MethodConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MethodConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!name_.Equals(other.name_)) return false;
      if (!object.Equals(Affinity, other.Affinity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= name_.GetHashCode();
      if (affinity_ != null) hash ^= Affinity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      name_.WriteTo(output, _repeated_name_codec);
      if (affinity_ != null) {
        output.WriteRawTag(202, 62);
        output.WriteMessage(Affinity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += name_.CalculateSize(_repeated_name_codec);
      if (affinity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Affinity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MethodConfig other) {
      if (other == null) {
        return;
      }
      name_.Add(other.name_);
      if (other.affinity_ != null) {
        if (affinity_ == null) {
          affinity_ = new global::Grpc.Gcp.AffinityConfig();
        }
        Affinity.MergeFrom(other.Affinity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            name_.AddEntriesFrom(input, _repeated_name_codec);
            break;
          }
          case 8010: {
            if (affinity_ == null) {
              affinity_ = new global::Grpc.Gcp.AffinityConfig();
            }
            input.ReadMessage(affinity_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AffinityConfig : pb::IMessage<AffinityConfig> {
    private static readonly pb::MessageParser<AffinityConfig> _parser = new pb::MessageParser<AffinityConfig>(() => new AffinityConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AffinityConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.Gcp.GrpcGcpReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AffinityConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AffinityConfig(AffinityConfig other) : this() {
      command_ = other.command_;
      affinityKey_ = other.affinityKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AffinityConfig Clone() {
      return new AffinityConfig(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 2;
    private global::Grpc.Gcp.AffinityConfig.Types.Command command_ = 0;
    /// <summary>
    /// The affinity command applies on the selected gRPC methods.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.Gcp.AffinityConfig.Types.Command Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    /// <summary>Field number for the "affinity_key" field.</summary>
    public const int AffinityKeyFieldNumber = 3;
    private string affinityKey_ = "";
    /// <summary>
    /// The field path of the affinity key in the request/response message.
    /// For example: "f.a", "f.b.d", etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AffinityKey {
      get { return affinityKey_; }
      set {
        affinityKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AffinityConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AffinityConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      if (AffinityKey != other.AffinityKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Command != 0) hash ^= Command.GetHashCode();
      if (AffinityKey.Length != 0) hash ^= AffinityKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Command != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Command);
      }
      if (AffinityKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AffinityKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
      }
      if (AffinityKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AffinityKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AffinityConfig other) {
      if (other == null) {
        return;
      }
      if (other.Command != 0) {
        Command = other.Command;
      }
      if (other.AffinityKey.Length != 0) {
        AffinityKey = other.AffinityKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            command_ = (global::Grpc.Gcp.AffinityConfig.Types.Command) input.ReadEnum();
            break;
          }
          case 26: {
            AffinityKey = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AffinityConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Command {
        /// <summary>
        /// The annotated method will be required to be bound to an existing session
        /// to execute the RPC. The corresponding &lt;affinity_key_field_path> will be
        /// used to find the affinity key from the request message.
        /// </summary>
        [pbr::OriginalName("BOUND")] Bound = 0,
        /// <summary>
        /// The annotated method will establish the channel affinity with the channel
        /// which is used to execute the RPC. The corresponding
        /// &lt;affinity_key_field_path> will be used to find the affinity key from the
        /// response message.
        /// </summary>
        [pbr::OriginalName("BIND")] Bind = 1,
        /// <summary>
        /// The annotated method will remove the channel affinity with the channel
        /// which is used to execute the RPC. The corresponding
        /// &lt;affinity_key_field_path> will be used to find the affinity key from the
        /// request message.
        /// </summary>
        [pbr::OriginalName("UNBIND")] Unbind = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
