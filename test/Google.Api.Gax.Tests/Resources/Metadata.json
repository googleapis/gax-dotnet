{
  "instance": {
    "attributes": {
      "cluster-name": "platformintegrationtest",
      "configure-sh": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction download-kube-master-certs {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_master_certs=\"/tmp/kube-master-certs.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_master_certs}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-master-certs\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_master_certs}\" > \"${KUBE_HOME}/kube-master-certs\")\n  rm -f \"${tmp_kube_master_certs}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-gci-mounter-tools {\n  CONTAINERIZED_MOUNTER_HOME=\"${KUBE_HOME}/containerized_mounter\"\n  mkdir -p \"${CONTAINERIZED_MOUNTER_HOME}\"\n  chmod a+x \"${CONTAINERIZED_MOUNTER_HOME}\"\n  mkdir -p \"${CONTAINERIZED_MOUNTER_HOME}/rootfs\"\n  local -r mounter_tar_sha=\"8003b798cf33c7f91320cd6ee5cec4fa22244571\"\n  download-or-bust \"${mounter_tar_sha}\" \"https://storage.googleapis.com/kubernetes-release/gci-mounter/mounter.tar\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-mounter\" \"${CONTAINERIZED_MOUNTER_HOME}/mounter\"\n  chmod a+x \"${CONTAINERIZED_MOUNTER_HOME}/mounter\"\n  mv \"${KUBE_HOME}/mounter.tar\" /tmp/mounter.tar\n  tar xvf /tmp/mounter.tar -C \"${CONTAINERIZED_MOUNTER_HOME}/rootfs\"\n  rm /tmp/mounter.tar\n  mkdir -p \"${CONTAINERIZED_MOUNTER_HOME}/rootfs/var/lib/kubelet\"\n}\n\n# Install node problem detector binary.\nfunction install-node-problem-detector {\n  if [[ -n \"${NODE_PROBLEM_DETECTOR_VERSION:-}\" ]]; then\n      local -r npd_version=\"${NODE_PROBLEM_DETECTOR_VERSION}\"\n      local -r npd_sha1=\"${NODE_PROBLEM_DETECTOR_TAR_HASH}\"\n  else\n      local -r npd_version=\"v0.4.1\"\n      local -r npd_sha1=\"a57a3fe64cab8a18ec654f5cef0aec59dae62568\"\n  fi\n  local -r npd_release_path=\"https://storage.googleapis.com/kubernetes-release\"\n  local -r npd_tar=\"node-problem-detector-${npd_version}.tar.gz\"\n  download-or-bust \"${npd_sha1}\" \"${npd_release_path}/node-problem-detector/${npd_tar}\"\n  local -r npd_dir=\"${KUBE_HOME}/node-problem-detector\"\n  mkdir -p \"${npd_dir}\"\n  tar xzf \"${KUBE_HOME}/${npd_tar}\" -C \"${npd_dir}\" --overwrite\n  mv \"${npd_dir}/bin\"/* \"${KUBE_HOME}/bin\"\n  chmod a+x \"${KUBE_HOME}/bin/node-problem-detector\"\n  rmdir \"${npd_dir}/bin\"\n  rm -f \"${KUBE_HOME}/${npd_tar}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n    if [[ \"${ENABLE_NODE_PROBLEM_DETECTOR:-}\" == \"standalone\" ]]; then\n      install-node-problem-detector\n    fi\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-0799f5732f2a11b329d9e3d51b9c8f2e3759f2ff.tar.gz\"\n    local -r cni_sha1=\"1d9788b0f5420e1a219aad2cb8681823fc515e7c\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install gci mounter related artifacts to allow mounting storage volumes in GCI\n  install-gci-mounter-tools\n  \n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\nif [[ \"${KUBERNETES_MASTER:-}\" == \"true\" ]]; then\n  download-kube-master-certs\nfi\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n\n",
      "created-by": "projects/233772281425/zones/europe-west2-c/instanceGroupManagers/gke-platformintegrationt-default-pool-bf36c574-grp",
      "gci-ensure-gke-docker": "true",
      "gci-update-strategy": "update_disabled",
      "instance-template": "projects/233772281425/global/instanceTemplates/gke-platformintegrationt-default-pool-bf36c574",
      "kube-env": "ALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDekNDQWZPZ0F3SUJBZ0lRVkxSaDdrVmJ2b1VwRFQzcGc1VGlZakFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlRMk9USmpOakk1TlMxa05UZ3lMVFEwWldRdE9UbGhNUzFqWXpGbU5qQTNZVGN3WXpNdwpIaGNOTVRjeE1ERXhNVFExTWpVMVdoY05Nakl4TURFd01UVTFNalUxV2pBdk1TMHdLd1lEVlFRREV5UTJPVEpqCk5qSTVOUzFrTlRneUxUUTBaV1F0T1RsaE1TMWpZekZtTmpBM1lUY3dZek13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUMyWGErdHhBcHZZd0x6b21uem5pUGc5L0IxQUdKRThhM2gzYmlSeVNQRAovYUY5ZEdHdTdnc0UvdTd1OWV4ajN6MERBRXJBOFE0MVl6bEVUQ1dsNVlLYWswYmpEMlhoL21ZUGhuRFBFWStHCjMrWnkvNXR1VDlyK1NtQVo3REc2UU1VZ1hDRGsvTldMblh5YlVOZlZucStXZzJRZm8wbGp6Z3lZblY2cG1HNkEKcnE2Q0dwY3NvekJ1bVdZL2xnSE9weXQvUjc5anMwOWgySFVlQVJlV1FGM0xxYVJjNFJaVlZUZGVvTjdZc2tOdQplMXFvQ3ZzTFRVZFpab09BMXROR2dOWlhmRlhSMXY3TTFlT3BSU3BTT2lacnA0M25iY1ptZG04ZkhIL2JxRC9DClI1VzRLTFAyLzhiMkM3T3RkNUtmb2NpeHFCemNJeUxQM0Z0Vm8zczhITFlaQWdNQkFBR2pJekFoTUE0R0ExVWQKRHdFQi93UUVBd0lDQkRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBbgptdDJRaktiaFVMWVk0QmxQS1ZEVmNIdHZRU29ZVFVnbS94M0J5cndxWDNSUTBsM3lOK3NkVldEYkEzOW5vYWZFCm41ZGxqdW1TVHZXaVpjeEhVL2k4WCs0R2hwWWh3S2hwVmh6dDZHK29KYjQ3ZVhJeG5vdDlFVXpTOUFTVWpGUVkKSk1qVzY5RnRYU0JmQk9CcUJhRDVQcWJNNG1mOHkzSlBYdnAyYUU5Mjk2ZjlMSEdoVklHQlM3RGd2VTN1Skh1aQp6WkZHOTFVZFpNZDQ2cHFZRE9VNlcyMEVHdjVaNHlNckhScEs0dmN2aFBYMUU3bFVUNXNMUUJCQ1F5WXlEM21KCjZIK1QzSDUvaUs2c3o1ajBPNmxYdHlkWjhyelRDRmtXWjJXZTEzalhZZGFpWW1HWk9Md3pBS2E2VFVzYzdpQlIKWjNTRU9KTERIWExSNGxBa0xCSHgKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nCLUSTER_IP_RANGE: 10.60.0.0/14\nCLUSTER_NAME: platformintegrationtest\nDNS_DOMAIN: cluster.local\nDNS_SERVER_IP: 10.63.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENABLE_NODE_PROBLEM_DETECTOR: standalone\nENV_TIMESTAMP: 2017-10-11T15:52:55+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nFEATURE_GATES: ExperimentalCriticalPodAnnotation=true\nINSTANCE_PREFIX: gke-platformintegrationtest-149e72f3\nKUBE_ADDON_REGISTRY: eu.gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 259fb54b12842c7afd736309e6a881ae8314b2bd\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release-eu/release/v1.7.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release/release/v1.7.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.7.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: TP79FIX1Ewrg3d5Z_fGA2RAM44aglNg47VM1-MU2G-k=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMzRENDQWNTZ0F3SUJBZ0lSQUk4NXhHWmUxc0hZdTJGN3lKYXBYUVF3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa05qa3lZell5T1RVdFpEVTRNaTAwTkdWa0xUazVZVEV0WTJNeFpqWXdOMkUzTUdNegpNQjRYRFRFM01UQXhNVEUxTlRJMU5Wb1hEVEl5TVRBeE1ERTFOVEkxTlZvd0VqRVFNQTRHQTFVRUF4TUhhM1ZpClpXeGxkRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFPV3dvOVBWU1UzZ2tIcnEKT3pia1VLT0Q2WVRXQmM5VEhXZUhZMzVaYUZNZXV1MzFReUpFQ0tQOXQ1c1lwc1lwZ081bXFFVTd0eHlhZUJINQpOR3d0OVdBR3FYVkU3YjVXL3QzNEtnaUdiT2djbjl6RDAvb0FqbXNRbjRqeldFTUpIQk9JeWU2bkNucUdtc2lTCjdLMUljS29qMDBUMzJlREpOWCtJbitMZkZQNkh6YkZVZzMwN0E5TnlUY0xkVjN3bUtYVnJmV2t5WHlaVFRxQmMKd1dTS09YNm9IZ1ltVUNTaUE5djhRR3VteldxQzV5SFEzdzNZVVd4ZTFVdXpFSjZEZjNQZWo2bGFnUnJoSGp4bAo0N0QxTVVLRUw4ZUllbmRzcm1tRnRZZFdQR0FEcitZWDZKSktlMjdnYUcrZWU3Y2FWWUVmYy9wNi9uMDNUWGM1ClVZL2w3UEVDQXdFQUFhTVFNQTR3REFZRFZSMFRBUUgvQkFJd0FEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUEKWkVOLzc2SXpmUWRWVmY3cDRBMmhCTWtFZ29oa2pjaVhzRnRBTWNWSDFMaDc1TXYyMksrNEZjRFVyemZzdTZnTgpwbjNmZERXL0JuS2VNdU44Z3F2Q1k5TEdIZ284VUZoUUg1T0NzZHkyVWQzbU9kZEc0MUFOWlkxdERjYWpTcjh0CjZyeG9aczU1bDJGZDdqS2dOWHJORXA0K1hFT2VqeVRkT3ozN0JSUzZVS2RYamZaVzhkTHo5L0FQTENRb1ZPTHIKc1VZZ01sQ1piMlZ4K0tZSXh6UUp4Qy9LaVQ0dEdwczNNZDlNbEJobE9tdmp2eE1EeHZ0SGxnZVNJL0Y2b2Q4QgpkVFQ4WFdKd0kybm1SMklaOU5DdVFxU3dTeEgzZWtBODROWENrSXZhT0IxZHJRYXVra1hHNktWeXFQN0tLZVJsCkNHcXlOb2U4K3lHNHZnbi9XUDF1aGc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNWJDajA5VkpUZUNRZXVvN051UlFvNFBwaE5ZRnoxTWRaNGRqZmxsb1V4NjY3ZlZECklrUUlvLzIzbXhpbXhpbUE3bWFvUlR1M0hKcDRFZmswYkMzMVlBYXBkVVR0dmxiKzNmZ3FDSVpzNkJ5ZjNNUFQKK2dDT2F4Q2ZpUE5ZUXdrY0U0ako3cWNLZW9hYXlKTHNyVWh3cWlQVFJQZlo0TWsxZjRpZjR0OFUvb2ZOc1ZTRApmVHNEMDNKTnd0MVhmQ1lwZFd0OWFUSmZKbE5Pb0Z6QlpJbzVmcWdlQmlaUUpLSUQyL3hBYTZiTmFvTG5JZERmCkRkaFJiRjdWUzdNUW5vTi9jOTZQcVZxQkd1RWVQR1hqc1BVeFFvUXZ4NGg2ZDJ5dWFZVzFoMVk4WUFPdjVoZm8Ka2twN2J1Qm9iNTU3dHhwVmdSOXorbnIrZlRkTmR6bFJqK1hzOFFJREFRQUJBb0lCQUFNU2puNTNsMExGYlpRQwpBaHpGTW14SU1zZ21ITVJ6Tml6UkJpY0YzSHdRS0lGUHRlcmF3aUFxSUFTaEd4OVhlc2xnUjRGSzZvalFGWDhZCkRhTE0wcFYxbHJBTTVmNlZKMVQzZHQzUHFURkpxMmNiNzMvNVMwTy9ZSUx5ZVF4eDJNQk16M2F6eS80V1F0MGYKLzFrcURqMFladXZBbDZ6Y0dZSnY1TU9pSnZrVFRYMjRqd2ZORFk5L3Q1bVpjWitMalg2RzZBQ1RxMnNEZ0c4NApRT3ZkMzcxMDB1K082bmRBOW5scXE3bklIdkV5YSs0REd2V0tiNU01TUhIZ0ZBd2M1dk1Jc29acWVqa1NhcEJECnJxUHpwUUxHZDRianZMTENReVd2cDA1V3JKdXJMRVVXQ2ZucWd3V0J0b0Vid0p5QTJPa0E2TGJuNjBhQ0ZmMkgKZTRleVdvRUNnWUVBK1BJUXd4cFZ4NFZ4TWJGZzlEb3ZvSUMzbkVUeWM1RjZiVVdGbHRCb2dINTFvbWRPc3FTSQp1Vnc3WmVOU0kyZm95eWpENW9oUTg1RVJPSStXaWJKZTFTSXRDb2Fza2JhSUk3YVRESmd5T29xaEhGUjZLR24wCnRBUnNmd0g0d2plQkZ5aEZwU2F3KzN2YWZ4dm9xazZpeXd0MmNkbm1LT20xWWFoQ1JQZG43bWtDZ1lFQTdETGoKWEp0VHpjTUZkZ09OdncwT2tPb1N1aW1hRHA1UC9TMTVmRTdLQ2NyaXZ0MzEray9LaHJ6djA1WXlsRFg4M3VtUQpTZWNMT2ZEaVAxNVJza2VQQ2JxNk52Q01wMHhwREczT2ZOK2pWdlh5WGdEKzNlRml5U2dnSUZTQnpNdTJsK01iCjdpbzlpSUo2NkxLak5mczNlQUpGQnRxQjVjM25BZXRZMjJNdlNVa0NnWUVBbWlCTVRtNjhrdlhFR2c4R3hzNUwKZEdTY3lPeEs2MUF6YXZteTlxZDdPNnFQckFlbnlxUmhYZG1Ea05aSG9WSVE1ODhLVW0wdEtVODBTVDlrNVVXQQp2eFlVcXNLc2p0NWl0VEd4SXdnTGVRRWhORWY5Qlk1c0NSUUFGRFlsVENGUEZBWkQ4RGJmTmlQOUo5c2dsbWh2CkU2UzZKVXpSMlp5d1JwRUV6bXdhZFprQ2dZQTdtYWVuWVlabkFGUHJjSUFlK2xOM202ajRFckZPQ1FLVUZ4cDEKbElnRXFvNUdyVWw1VFJNRXByNDVmTWZzZ0NiN3RLSDFFL2pRT1FsT0JpWEZQNnRIUURmbXp4SWUwUGdjNjhSVAozRGFpSmROdmh2N0l6Q3VhS0tiYW9aaFRMZ0E0R1ZXZDVraTZubm9YSjZScFphZWNmNjRkU1p2SGVncFZnS1plClRZdk1DUUtCZ0JyL00yUVJScXlLbkhmcTVpVEVaa0VvRWx2eVRhYVRiZGJCUXBOZGt5aFlhUVBoczhadGxZdTYKdXpIK0RUR0JMNWJ5a01WdG5sVDZhUkQvREFwb2J2dDRHWkNWVU54T3ZJM2U1ZHVva2YrSGU0WFhJVzZUTmxRdgpNVGsrN2hkYlB4cks0cW00Vk9PcXR0K2FGai8yL1JKdk9ITVZZSm1TaE9ibEtWbWdyZklJCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBELET_TEST_ARGS: --docker-disable-shared-pid --kube-reserved=cpu=60m,memory=960Mi\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 35.197.242.116\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: beta.kubernetes.io/fluentd-ds-ready=true,cloud.google.com/gke-nodepool=default-pool\nNODE_PROBLEM_DETECTOR_TOKEN: uA1ZJm_6scqSVem5em9Wagn2RLSwzm83Yp4Wmt9GMvU=\nSALT_TAR_HASH: 8664d46bd75a153efc53dc8701d377a36d4d410f\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release-eu/release/v1.7.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release/release/v1.7.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.7.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: f5206e70eafc86870201524c269012e10256d1eb\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release-eu/release/v1.7.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release/release/v1.7.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.7.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.63.240.0/20\nZONE: europe-west2-c\n",
      "user-data": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\n      [Install]\n      WantedBy=multi-user.target\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl enable kubernetes.target\n - systemctl start kubernetes.target\n"
    },
    "cpuPlatform": "Intel Broadwell",
    "description": "",
    "disks": [
      {
        "deviceName": "persistent-disk-0",
        "index": 0,
        "mode": "READ_WRITE",
        "type": "PERSISTENT"
      }
    ],
    "hostname": "gke-platformintegrationt-default-pool-bf36c574-hjt1.c.chrisbacon-testing.internal",
    "id": 2917200381659545756,
    "image": "projects/gke-node-images/global/images/cos-stable-60-9592-90-0",
    "licenses": [
      { "id": "1001010" },
      { "id": "1001003" }
    ],
    "machineType": "projects/233772281425/machineTypes/n1-standard-1",
    "maintenanceEvent": "NONE",
    "name": "gke-platformintegrationt-default-pool-bf36c574-hjt1",
    "networkInterfaces": [
      {
        "accessConfigs": [
          {
            "externalIp": "35.197.197.22",
            "type": "ONE_TO_ONE_NAT"
          }
        ],
        "forwardedIps": [ "35.197.217.144" ],
        "ip": "10.154.0.2",
        "ipAliases": [],
        "mac": "42:01:0a:9a:00:02",
        "network": "projects/233772281425/networks/default",
        "targetInstanceIps": []
      }
    ],
    "preempted": "FALSE",
    "scheduling": {
      "automaticRestart": "TRUE",
      "onHostMaintenance": "MIGRATE",
      "preemptible": "FALSE"
    },
    "serviceAccounts": {
      "233772281425-compute@developer.gserviceaccount.com": {
        "aliases": [ "default" ],
        "email": "233772281425-compute@developer.gserviceaccount.com",
        "scopes": [ "https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append" ]
      },
      "default": {
        "aliases": [ "default" ],
        "email": "233772281425-compute@developer.gserviceaccount.com",
        "scopes": [ "https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append" ]
      }
    },
    "tags": [ "gke-platformintegrationtest-149e72f3-node" ],
    "virtualClock": { "driftToken": "0" },
    "zone": "projects/233772281425/zones/europe-west2-c"
  },
  "project": {
    "attributes": {
      "gke-cluster-1-797c6bee-cidr": "default:10.28.0.0/14",
      "gke-platformintegrationtest-149e72f3-cidr": "default:10.60.0.0/14",
      "sshKeys": "\ngke-797c6bee973e85009d4f:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDXkWuMR0iAPQmAOwfzPx86PW5yfkDCASmTA5IvEvBGVo870Mnr4qUZTghfeylTCFfC2/Mbb4hFC9GkiiQYb2LFX0GGXdKllSu/C8tlK+sh790306P/KO8KmcgLL3ub5deBkekMSWmXjUys/F8q4u+sjA+10UvBK8hDJDlWkyn72slcTwniJeuXHEYM5Gu4WGN1SNv1Ghn1L0ZGDa4qolGy7XXx+NLEVGLpsqHQk1jgJqZdN/sbYDfknAWK6nXCZ+YIo42ZBPZibK+LILi+heYoEfZTuGc4SfAjcmv+CoONyzYL0d25oE93Kf9JbTbRizSl0QD81r80N1iJ+WPkk3Ir gke-797c6bee973e85009d4f@gke-797c6bee973e85009d4f\ngke-149e72f373aebd2e1939:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCz0cRj7FkP836iZ7N5ecfa5iTudnXAwYp0EVjUi6AXNfBk2t60mdPkBM+alHMiRqcw40+2Lq/6DNvcXJSYt2R8kwjS/aLuDjqkK3TWMW8A7458xkgfkpN3q1JTsx7ycMTy2SkIl6amUsfl13gy2sfntOm0tR/pGEhGyuVmzPAWRLTpaws3gmpxp5tizTG0s47elR1hl1E4peGLGKFVqtkLn+X4EqxiWxsMSmvfbOmA57PK53ELExWEj9jTlXef0bRLr1AaQMvHEtVfjpZfriN0Y4y/VwLle3BkNlMnKoo2gyPDwGjOAV/v1pV4KjR+woeaO0E5usQTQmyaMq35ZpuX gke-149e72f373aebd2e1939@gke-149e72f373aebd2e1939"
    },
    "numericProjectId": 233772281425,
    "projectId": "chrisbacon-testing"
  }
}