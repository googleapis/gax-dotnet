// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_messages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Api.Gax {

  /// <summary>Holder for reflection information generated from test_messages.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class TestMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for test_messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TestMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN0ZXN0X21lc3NhZ2VzLnByb3RvEg5nb29nbGUuYXBpLmdheCIwCg9CdW5k",
            "bGluZ1JlcXVlc3QSDAoEbmFtZRgBIAEoCRIPCgdlbnRyaWVzGAIgAygJIjEK",
            "EEJ1bmRsaW5nUmVzcG9uc2USDAoEbmFtZRgBIAEoCRIPCgdlbnRyaWVzGAIg",
            "AygJIh0KDVNpbXBsZVJlcXVlc3QSDAoEbmFtZRgBIAEoCSIeCg5TaW1wbGVS",
            "ZXNwb25zZRIMCgRuYW1lGAIgASgJIkwKFFBhZ2VTdHJlYW1pbmdSZXF1ZXN0",
            "EhIKCnBhZ2VfdG9rZW4YASABKAkSEQoJcGFnZV9zaXplGAIgASgFEg0KBWNo",
            "ZWNrGAMgASgJIj8KFVBhZ2VTdHJlYW1pbmdSZXNwb25zZRINCgVpdGVtcxgB",
            "IAMoBRIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Google.Api.Gax.BundlingRequest), global::Google.Api.Gax.BundlingRequest.Parser, new[]{ "Name", "Entries" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Api.Gax.BundlingResponse), global::Google.Api.Gax.BundlingResponse.Parser, new[]{ "Name", "Entries" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Api.Gax.SimpleRequest), global::Google.Api.Gax.SimpleRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Api.Gax.SimpleResponse), global::Google.Api.Gax.SimpleResponse.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Api.Gax.PageStreamingRequest), global::Google.Api.Gax.PageStreamingRequest.Parser, new[]{ "PageToken", "PageSize", "Check" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Api.Gax.PageStreamingResponse), global::Google.Api.Gax.PageStreamingResponse.Parser, new[]{ "Items", "NextPageToken" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BundlingRequest : pb::IMessage<BundlingRequest> {
    private static readonly pb::MessageParser<BundlingRequest> _parser = new pb::MessageParser<BundlingRequest>(() => new BundlingRequest());
    public static pb::MessageParser<BundlingRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Gax.TestMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BundlingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BundlingRequest(BundlingRequest other) : this() {
      name_ = other.name_;
      entries_ = other.entries_.Clone();
    }

    public BundlingRequest Clone() {
      return new BundlingRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_entries_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> entries_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Entries {
      get { return entries_; }
    }

    public override bool Equals(object other) {
      return Equals(other as BundlingRequest);
    }

    public bool Equals(BundlingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!entries_.Equals(other.entries_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= entries_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      return size;
    }

    public void MergeFrom(BundlingRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      entries_.Add(other.entries_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BundlingResponse : pb::IMessage<BundlingResponse> {
    private static readonly pb::MessageParser<BundlingResponse> _parser = new pb::MessageParser<BundlingResponse>(() => new BundlingResponse());
    public static pb::MessageParser<BundlingResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Gax.TestMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BundlingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BundlingResponse(BundlingResponse other) : this() {
      name_ = other.name_;
      entries_ = other.entries_.Clone();
    }

    public BundlingResponse Clone() {
      return new BundlingResponse(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_entries_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> entries_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Entries {
      get { return entries_; }
    }

    public override bool Equals(object other) {
      return Equals(other as BundlingResponse);
    }

    public bool Equals(BundlingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!entries_.Equals(other.entries_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= entries_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      return size;
    }

    public void MergeFrom(BundlingResponse other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      entries_.Add(other.entries_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SimpleRequest : pb::IMessage<SimpleRequest> {
    private static readonly pb::MessageParser<SimpleRequest> _parser = new pb::MessageParser<SimpleRequest>(() => new SimpleRequest());
    public static pb::MessageParser<SimpleRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Gax.TestMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SimpleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SimpleRequest(SimpleRequest other) : this() {
      name_ = other.name_;
    }

    public SimpleRequest Clone() {
      return new SimpleRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SimpleRequest);
    }

    public bool Equals(SimpleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    public void MergeFrom(SimpleRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SimpleResponse : pb::IMessage<SimpleResponse> {
    private static readonly pb::MessageParser<SimpleResponse> _parser = new pb::MessageParser<SimpleResponse>(() => new SimpleResponse());
    public static pb::MessageParser<SimpleResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Gax.TestMessagesReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SimpleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SimpleResponse(SimpleResponse other) : this() {
      name_ = other.name_;
    }

    public SimpleResponse Clone() {
      return new SimpleResponse(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SimpleResponse);
    }

    public bool Equals(SimpleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    public void MergeFrom(SimpleResponse other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PageStreamingRequest : pb::IMessage<PageStreamingRequest> {
    private static readonly pb::MessageParser<PageStreamingRequest> _parser = new pb::MessageParser<PageStreamingRequest>(() => new PageStreamingRequest());
    public static pb::MessageParser<PageStreamingRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Gax.TestMessagesReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PageStreamingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PageStreamingRequest(PageStreamingRequest other) : this() {
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
      check_ = other.check_;
    }

    public PageStreamingRequest Clone() {
      return new PageStreamingRequest(this);
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 1;
    private string pageToken_ = "";
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "check" field.</summary>
    public const int CheckFieldNumber = 3;
    private string check_ = "";
    public string Check {
      get { return check_; }
      set {
        check_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PageStreamingRequest);
    }

    public bool Equals(PageStreamingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      if (Check != other.Check) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (Check.Length != 0) hash ^= Check.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PageToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (Check.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Check);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (Check.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Check);
      }
      return size;
    }

    public void MergeFrom(PageStreamingRequest other) {
      if (other == null) {
        return;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.Check.Length != 0) {
        Check = other.Check;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PageToken = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 26: {
            Check = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PageStreamingResponse : pb::IMessage<PageStreamingResponse> {
    private static readonly pb::MessageParser<PageStreamingResponse> _parser = new pb::MessageParser<PageStreamingResponse>(() => new PageStreamingResponse());
    public static pb::MessageParser<PageStreamingResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Gax.TestMessagesReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PageStreamingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PageStreamingResponse(PageStreamingResponse other) : this() {
      items_ = other.items_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    public PageStreamingResponse Clone() {
      return new PageStreamingResponse(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_items_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> items_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PageStreamingResponse);
    }

    public bool Equals(PageStreamingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    public void MergeFrom(PageStreamingResponse other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
