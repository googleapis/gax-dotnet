// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/compute/v1/compute.proto
// </auto-generated>
// Original file comments:
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Generated by the disco-to-proto3-converter. DO NOT EDIT!
// Source Discovery file: compute.v1.json
// Source file revision: 20201122
// API name: compute
// API version: v1
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Compute.V1 {
  /// <summary>
  ///
  /// Services
  ///
  /// The AcceleratorTypes API.
  /// </summary>
  public static partial class AcceleratorTypes
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.AcceleratorTypes";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListAcceleratorTypesRequest> __Marshaller_google_cloud_compute_v1_AggregatedListAcceleratorTypesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListAcceleratorTypesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AcceleratorTypeAggregatedList> __Marshaller_google_cloud_compute_v1_AcceleratorTypeAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AcceleratorTypeAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetAcceleratorTypeRequest> __Marshaller_google_cloud_compute_v1_GetAcceleratorTypeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetAcceleratorTypeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AcceleratorType> __Marshaller_google_cloud_compute_v1_AcceleratorType = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AcceleratorType.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListAcceleratorTypesRequest> __Marshaller_google_cloud_compute_v1_ListAcceleratorTypesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListAcceleratorTypesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AcceleratorTypeList> __Marshaller_google_cloud_compute_v1_AcceleratorTypeList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AcceleratorTypeList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListAcceleratorTypesRequest, global::Google.Cloud.Compute.V1.AcceleratorTypeAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListAcceleratorTypesRequest, global::Google.Cloud.Compute.V1.AcceleratorTypeAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListAcceleratorTypesRequest,
        __Marshaller_google_cloud_compute_v1_AcceleratorTypeAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetAcceleratorTypeRequest, global::Google.Cloud.Compute.V1.AcceleratorType> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetAcceleratorTypeRequest, global::Google.Cloud.Compute.V1.AcceleratorType>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetAcceleratorTypeRequest,
        __Marshaller_google_cloud_compute_v1_AcceleratorType);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListAcceleratorTypesRequest, global::Google.Cloud.Compute.V1.AcceleratorTypeList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListAcceleratorTypesRequest, global::Google.Cloud.Compute.V1.AcceleratorTypeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListAcceleratorTypesRequest,
        __Marshaller_google_cloud_compute_v1_AcceleratorTypeList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AcceleratorTypes</summary>
    [grpc::BindServiceMethod(typeof(AcceleratorTypes), "BindService")]
    public abstract partial class AcceleratorTypesBase
    {
      /// <summary>
      /// Retrieves an aggregated list of accelerator types.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.AcceleratorTypeAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListAcceleratorTypesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified accelerator type.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.AcceleratorType> Get(global::Google.Cloud.Compute.V1.GetAcceleratorTypeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of accelerator types that are available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.AcceleratorTypeList> List(global::Google.Cloud.Compute.V1.ListAcceleratorTypesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AcceleratorTypes</summary>
    public partial class AcceleratorTypesClient : grpc::ClientBase<AcceleratorTypesClient>
    {
      /// <summary>Creates a new client for AcceleratorTypes</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AcceleratorTypesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AcceleratorTypes that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AcceleratorTypesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AcceleratorTypesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AcceleratorTypesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of accelerator types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.AcceleratorTypeAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListAcceleratorTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of accelerator types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.AcceleratorTypeAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListAcceleratorTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of accelerator types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.AcceleratorTypeAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListAcceleratorTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of accelerator types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.AcceleratorTypeAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListAcceleratorTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Returns the specified accelerator type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.AcceleratorType Get(global::Google.Cloud.Compute.V1.GetAcceleratorTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified accelerator type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.AcceleratorType Get(global::Google.Cloud.Compute.V1.GetAcceleratorTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified accelerator type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.AcceleratorType> GetAsync(global::Google.Cloud.Compute.V1.GetAcceleratorTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified accelerator type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.AcceleratorType> GetAsync(global::Google.Cloud.Compute.V1.GetAcceleratorTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of accelerator types that are available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.AcceleratorTypeList List(global::Google.Cloud.Compute.V1.ListAcceleratorTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of accelerator types that are available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.AcceleratorTypeList List(global::Google.Cloud.Compute.V1.ListAcceleratorTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of accelerator types that are available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.AcceleratorTypeList> ListAsync(global::Google.Cloud.Compute.V1.ListAcceleratorTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of accelerator types that are available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.AcceleratorTypeList> ListAsync(global::Google.Cloud.Compute.V1.ListAcceleratorTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AcceleratorTypesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AcceleratorTypesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AcceleratorTypesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AcceleratorTypesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListAcceleratorTypesRequest, global::Google.Cloud.Compute.V1.AcceleratorTypeAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetAcceleratorTypeRequest, global::Google.Cloud.Compute.V1.AcceleratorType>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListAcceleratorTypesRequest, global::Google.Cloud.Compute.V1.AcceleratorTypeList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The Addresses API.
  /// </summary>
  public static partial class Addresses
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.Addresses";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListAddressesRequest> __Marshaller_google_cloud_compute_v1_AggregatedListAddressesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListAddressesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AddressAggregatedList> __Marshaller_google_cloud_compute_v1_AddressAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AddressAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteAddressRequest> __Marshaller_google_cloud_compute_v1_DeleteAddressRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteAddressRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetAddressRequest> __Marshaller_google_cloud_compute_v1_GetAddressRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetAddressRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Address> __Marshaller_google_cloud_compute_v1_Address = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Address.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertAddressRequest> __Marshaller_google_cloud_compute_v1_InsertAddressRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertAddressRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListAddressesRequest> __Marshaller_google_cloud_compute_v1_ListAddressesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListAddressesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AddressList> __Marshaller_google_cloud_compute_v1_AddressList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AddressList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListAddressesRequest, global::Google.Cloud.Compute.V1.AddressAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListAddressesRequest, global::Google.Cloud.Compute.V1.AddressAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListAddressesRequest,
        __Marshaller_google_cloud_compute_v1_AddressAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteAddressRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteAddressRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteAddressRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetAddressRequest, global::Google.Cloud.Compute.V1.Address> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetAddressRequest, global::Google.Cloud.Compute.V1.Address>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetAddressRequest,
        __Marshaller_google_cloud_compute_v1_Address);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertAddressRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertAddressRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertAddressRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListAddressesRequest, global::Google.Cloud.Compute.V1.AddressList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListAddressesRequest, global::Google.Cloud.Compute.V1.AddressList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListAddressesRequest,
        __Marshaller_google_cloud_compute_v1_AddressList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Addresses</summary>
    [grpc::BindServiceMethod(typeof(Addresses), "BindService")]
    public abstract partial class AddressesBase
    {
      /// <summary>
      /// Retrieves an aggregated list of addresses.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.AddressAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListAddressesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified address resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified address resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Address> Get(global::Google.Cloud.Compute.V1.GetAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates an address resource in the specified project by using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of addresses contained within the specified region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.AddressList> List(global::Google.Cloud.Compute.V1.ListAddressesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Addresses</summary>
    public partial class AddressesClient : grpc::ClientBase<AddressesClient>
    {
      /// <summary>Creates a new client for Addresses</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AddressesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Addresses that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AddressesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AddressesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AddressesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of addresses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.AddressAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListAddressesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of addresses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.AddressAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListAddressesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of addresses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.AddressAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListAddressesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of addresses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.AddressAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListAddressesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified address resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified address resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified address resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified address resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified address resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Address Get(global::Google.Cloud.Compute.V1.GetAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified address resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Address Get(global::Google.Cloud.Compute.V1.GetAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified address resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Address> GetAsync(global::Google.Cloud.Compute.V1.GetAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified address resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Address> GetAsync(global::Google.Cloud.Compute.V1.GetAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates an address resource in the specified project by using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an address resource in the specified project by using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates an address resource in the specified project by using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an address resource in the specified project by using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of addresses contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.AddressList List(global::Google.Cloud.Compute.V1.ListAddressesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of addresses contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.AddressList List(global::Google.Cloud.Compute.V1.ListAddressesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of addresses contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.AddressList> ListAsync(global::Google.Cloud.Compute.V1.ListAddressesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of addresses contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.AddressList> ListAsync(global::Google.Cloud.Compute.V1.ListAddressesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AddressesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AddressesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AddressesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AddressesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListAddressesRequest, global::Google.Cloud.Compute.V1.AddressAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteAddressRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetAddressRequest, global::Google.Cloud.Compute.V1.Address>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertAddressRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListAddressesRequest, global::Google.Cloud.Compute.V1.AddressList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The Autoscalers API.
  /// </summary>
  public static partial class Autoscalers
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.Autoscalers";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListAutoscalersRequest> __Marshaller_google_cloud_compute_v1_AggregatedListAutoscalersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListAutoscalersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AutoscalerAggregatedList> __Marshaller_google_cloud_compute_v1_AutoscalerAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AutoscalerAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteAutoscalerRequest> __Marshaller_google_cloud_compute_v1_DeleteAutoscalerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteAutoscalerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetAutoscalerRequest> __Marshaller_google_cloud_compute_v1_GetAutoscalerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetAutoscalerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Autoscaler> __Marshaller_google_cloud_compute_v1_Autoscaler = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Autoscaler.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertAutoscalerRequest> __Marshaller_google_cloud_compute_v1_InsertAutoscalerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertAutoscalerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListAutoscalersRequest> __Marshaller_google_cloud_compute_v1_ListAutoscalersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListAutoscalersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AutoscalerList> __Marshaller_google_cloud_compute_v1_AutoscalerList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AutoscalerList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchAutoscalerRequest> __Marshaller_google_cloud_compute_v1_PatchAutoscalerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchAutoscalerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdateAutoscalerRequest> __Marshaller_google_cloud_compute_v1_UpdateAutoscalerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdateAutoscalerRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListAutoscalersRequest, global::Google.Cloud.Compute.V1.AutoscalerAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListAutoscalersRequest, global::Google.Cloud.Compute.V1.AutoscalerAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListAutoscalersRequest,
        __Marshaller_google_cloud_compute_v1_AutoscalerAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteAutoscalerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetAutoscalerRequest, global::Google.Cloud.Compute.V1.Autoscaler> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetAutoscalerRequest, global::Google.Cloud.Compute.V1.Autoscaler>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetAutoscalerRequest,
        __Marshaller_google_cloud_compute_v1_Autoscaler);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertAutoscalerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListAutoscalersRequest, global::Google.Cloud.Compute.V1.AutoscalerList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListAutoscalersRequest, global::Google.Cloud.Compute.V1.AutoscalerList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListAutoscalersRequest,
        __Marshaller_google_cloud_compute_v1_AutoscalerList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchAutoscalerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdateAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Update = new grpc::Method<global::Google.Cloud.Compute.V1.UpdateAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_google_cloud_compute_v1_UpdateAutoscalerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of Autoscalers</summary>
    [grpc::BindServiceMethod(typeof(Autoscalers), "BindService")]
    public abstract partial class AutoscalersBase
    {
      /// <summary>
      /// Retrieves an aggregated list of autoscalers.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.AutoscalerAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListAutoscalersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified autoscaler.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteAutoscalerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified autoscaler resource. Gets a list of available autoscalers by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Autoscaler> Get(global::Google.Cloud.Compute.V1.GetAutoscalerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertAutoscalerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of autoscalers contained within the specified zone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.AutoscalerList> List(global::Google.Cloud.Compute.V1.ListAutoscalersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchAutoscalerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Update(global::Google.Cloud.Compute.V1.UpdateAutoscalerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Autoscalers</summary>
    public partial class AutoscalersClient : grpc::ClientBase<AutoscalersClient>
    {
      /// <summary>Creates a new client for Autoscalers</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AutoscalersClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Autoscalers that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AutoscalersClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AutoscalersClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AutoscalersClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of autoscalers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.AutoscalerAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListAutoscalersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of autoscalers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.AutoscalerAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListAutoscalersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of autoscalers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.AutoscalerAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListAutoscalersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of autoscalers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.AutoscalerAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListAutoscalersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified autoscaler.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified autoscaler.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified autoscaler.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified autoscaler.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified autoscaler resource. Gets a list of available autoscalers by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Autoscaler Get(global::Google.Cloud.Compute.V1.GetAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified autoscaler resource. Gets a list of available autoscalers by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Autoscaler Get(global::Google.Cloud.Compute.V1.GetAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified autoscaler resource. Gets a list of available autoscalers by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Autoscaler> GetAsync(global::Google.Cloud.Compute.V1.GetAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified autoscaler resource. Gets a list of available autoscalers by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Autoscaler> GetAsync(global::Google.Cloud.Compute.V1.GetAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of autoscalers contained within the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.AutoscalerList List(global::Google.Cloud.Compute.V1.ListAutoscalersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of autoscalers contained within the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.AutoscalerList List(global::Google.Cloud.Compute.V1.ListAutoscalersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of autoscalers contained within the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.AutoscalerList> ListAsync(global::Google.Cloud.Compute.V1.ListAutoscalersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of autoscalers contained within the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.AutoscalerList> ListAsync(global::Google.Cloud.Compute.V1.ListAutoscalersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AutoscalersClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AutoscalersClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AutoscalersBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_Update, serviceImpl.Update).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AutoscalersBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListAutoscalersRequest, global::Google.Cloud.Compute.V1.AutoscalerAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetAutoscalerRequest, global::Google.Cloud.Compute.V1.Autoscaler>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListAutoscalersRequest, global::Google.Cloud.Compute.V1.AutoscalerList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdateAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Update));
    }

  }
  /// <summary>
  /// The BackendBuckets API.
  /// </summary>
  public static partial class BackendBuckets
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.BackendBuckets";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendBucketRequest> __Marshaller_google_cloud_compute_v1_AddSignedUrlKeyBackendBucketRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendBucketRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteBackendBucketRequest> __Marshaller_google_cloud_compute_v1_DeleteBackendBucketRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteBackendBucketRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendBucketRequest> __Marshaller_google_cloud_compute_v1_DeleteSignedUrlKeyBackendBucketRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendBucketRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetBackendBucketRequest> __Marshaller_google_cloud_compute_v1_GetBackendBucketRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetBackendBucketRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.BackendBucket> __Marshaller_google_cloud_compute_v1_BackendBucket = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.BackendBucket.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertBackendBucketRequest> __Marshaller_google_cloud_compute_v1_InsertBackendBucketRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertBackendBucketRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListBackendBucketsRequest> __Marshaller_google_cloud_compute_v1_ListBackendBucketsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListBackendBucketsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.BackendBucketList> __Marshaller_google_cloud_compute_v1_BackendBucketList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.BackendBucketList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchBackendBucketRequest> __Marshaller_google_cloud_compute_v1_PatchBackendBucketRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchBackendBucketRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdateBackendBucketRequest> __Marshaller_google_cloud_compute_v1_UpdateBackendBucketRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdateBackendBucketRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendBucketRequest, global::Google.Cloud.Compute.V1.Operation> __Method_AddSignedUrlKey = new grpc::Method<global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendBucketRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddSignedUrlKey",
        __Marshaller_google_cloud_compute_v1_AddSignedUrlKeyBackendBucketRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteBackendBucketRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteBackendBucketRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteBackendBucketRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendBucketRequest, global::Google.Cloud.Compute.V1.Operation> __Method_DeleteSignedUrlKey = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendBucketRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSignedUrlKey",
        __Marshaller_google_cloud_compute_v1_DeleteSignedUrlKeyBackendBucketRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetBackendBucketRequest, global::Google.Cloud.Compute.V1.BackendBucket> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetBackendBucketRequest, global::Google.Cloud.Compute.V1.BackendBucket>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetBackendBucketRequest,
        __Marshaller_google_cloud_compute_v1_BackendBucket);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertBackendBucketRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertBackendBucketRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertBackendBucketRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListBackendBucketsRequest, global::Google.Cloud.Compute.V1.BackendBucketList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListBackendBucketsRequest, global::Google.Cloud.Compute.V1.BackendBucketList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListBackendBucketsRequest,
        __Marshaller_google_cloud_compute_v1_BackendBucketList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchBackendBucketRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchBackendBucketRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchBackendBucketRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdateBackendBucketRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Update = new grpc::Method<global::Google.Cloud.Compute.V1.UpdateBackendBucketRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_google_cloud_compute_v1_UpdateBackendBucketRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[3]; }
    }

    /// <summary>Base class for server-side implementations of BackendBuckets</summary>
    [grpc::BindServiceMethod(typeof(BackendBuckets), "BindService")]
    public abstract partial class BackendBucketsBase
    {
      /// <summary>
      /// Adds a key for validating requests with signed URLs for this backend bucket.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> AddSignedUrlKey(global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendBucketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified BackendBucket resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteBackendBucketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a key for validating requests with signed URLs for this backend bucket.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> DeleteSignedUrlKey(global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendBucketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified BackendBucket resource. Gets a list of available backend buckets by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.BackendBucket> Get(global::Google.Cloud.Compute.V1.GetBackendBucketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a BackendBucket resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertBackendBucketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of BackendBucket resources available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.BackendBucketList> List(global::Google.Cloud.Compute.V1.ListBackendBucketsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified BackendBucket resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchBackendBucketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified BackendBucket resource with the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Update(global::Google.Cloud.Compute.V1.UpdateBackendBucketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BackendBuckets</summary>
    public partial class BackendBucketsClient : grpc::ClientBase<BackendBucketsClient>
    {
      /// <summary>Creates a new client for BackendBuckets</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BackendBucketsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BackendBuckets that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BackendBucketsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BackendBucketsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BackendBucketsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Adds a key for validating requests with signed URLs for this backend bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddSignedUrlKey(global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSignedUrlKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a key for validating requests with signed URLs for this backend bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddSignedUrlKey(global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSignedUrlKey, null, options, request);
      }
      /// <summary>
      /// Adds a key for validating requests with signed URLs for this backend bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddSignedUrlKeyAsync(global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSignedUrlKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a key for validating requests with signed URLs for this backend bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddSignedUrlKeyAsync(global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSignedUrlKey, null, options, request);
      }
      /// <summary>
      /// Deletes the specified BackendBucket resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteBackendBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified BackendBucket resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteBackendBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified BackendBucket resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteBackendBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified BackendBucket resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteBackendBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes a key for validating requests with signed URLs for this backend bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DeleteSignedUrlKey(global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSignedUrlKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a key for validating requests with signed URLs for this backend bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DeleteSignedUrlKey(global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSignedUrlKey, null, options, request);
      }
      /// <summary>
      /// Deletes a key for validating requests with signed URLs for this backend bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteSignedUrlKeyAsync(global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSignedUrlKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a key for validating requests with signed URLs for this backend bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteSignedUrlKeyAsync(global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSignedUrlKey, null, options, request);
      }
      /// <summary>
      /// Returns the specified BackendBucket resource. Gets a list of available backend buckets by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.BackendBucket Get(global::Google.Cloud.Compute.V1.GetBackendBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified BackendBucket resource. Gets a list of available backend buckets by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.BackendBucket Get(global::Google.Cloud.Compute.V1.GetBackendBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified BackendBucket resource. Gets a list of available backend buckets by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.BackendBucket> GetAsync(global::Google.Cloud.Compute.V1.GetBackendBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified BackendBucket resource. Gets a list of available backend buckets by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.BackendBucket> GetAsync(global::Google.Cloud.Compute.V1.GetBackendBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a BackendBucket resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertBackendBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a BackendBucket resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertBackendBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a BackendBucket resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertBackendBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a BackendBucket resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertBackendBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of BackendBucket resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.BackendBucketList List(global::Google.Cloud.Compute.V1.ListBackendBucketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of BackendBucket resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.BackendBucketList List(global::Google.Cloud.Compute.V1.ListBackendBucketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of BackendBucket resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.BackendBucketList> ListAsync(global::Google.Cloud.Compute.V1.ListBackendBucketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of BackendBucket resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.BackendBucketList> ListAsync(global::Google.Cloud.Compute.V1.ListBackendBucketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Updates the specified BackendBucket resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchBackendBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified BackendBucket resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchBackendBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates the specified BackendBucket resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchBackendBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified BackendBucket resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchBackendBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates the specified BackendBucket resource with the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateBackendBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified BackendBucket resource with the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateBackendBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Updates the specified BackendBucket resource with the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateBackendBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified BackendBucket resource with the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateBackendBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override BackendBucketsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BackendBucketsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BackendBucketsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddSignedUrlKey, serviceImpl.AddSignedUrlKey)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_DeleteSignedUrlKey, serviceImpl.DeleteSignedUrlKey)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_Update, serviceImpl.Update).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, BackendBucketsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddSignedUrlKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendBucketRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.AddSignedUrlKey));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteBackendBucketRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_DeleteSignedUrlKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendBucketRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.DeleteSignedUrlKey));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetBackendBucketRequest, global::Google.Cloud.Compute.V1.BackendBucket>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertBackendBucketRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListBackendBucketsRequest, global::Google.Cloud.Compute.V1.BackendBucketList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchBackendBucketRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdateBackendBucketRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Update));
    }

  }
  /// <summary>
  /// The BackendServices API.
  /// </summary>
  public static partial class BackendServices
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.BackendServices";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendServiceRequest> __Marshaller_google_cloud_compute_v1_AddSignedUrlKeyBackendServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListBackendServicesRequest> __Marshaller_google_cloud_compute_v1_AggregatedListBackendServicesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListBackendServicesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.BackendServiceAggregatedList> __Marshaller_google_cloud_compute_v1_BackendServiceAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.BackendServiceAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteBackendServiceRequest> __Marshaller_google_cloud_compute_v1_DeleteBackendServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteBackendServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendServiceRequest> __Marshaller_google_cloud_compute_v1_DeleteSignedUrlKeyBackendServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetBackendServiceRequest> __Marshaller_google_cloud_compute_v1_GetBackendServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetBackendServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.BackendService> __Marshaller_google_cloud_compute_v1_BackendService = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.BackendService.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetHealthBackendServiceRequest> __Marshaller_google_cloud_compute_v1_GetHealthBackendServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetHealthBackendServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.BackendServiceGroupHealth> __Marshaller_google_cloud_compute_v1_BackendServiceGroupHealth = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.BackendServiceGroupHealth.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertBackendServiceRequest> __Marshaller_google_cloud_compute_v1_InsertBackendServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertBackendServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListBackendServicesRequest> __Marshaller_google_cloud_compute_v1_ListBackendServicesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListBackendServicesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.BackendServiceList> __Marshaller_google_cloud_compute_v1_BackendServiceList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.BackendServiceList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchBackendServiceRequest> __Marshaller_google_cloud_compute_v1_PatchBackendServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchBackendServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetSecurityPolicyBackendServiceRequest> __Marshaller_google_cloud_compute_v1_SetSecurityPolicyBackendServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetSecurityPolicyBackendServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdateBackendServiceRequest> __Marshaller_google_cloud_compute_v1_UpdateBackendServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdateBackendServiceRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_AddSignedUrlKey = new grpc::Method<global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddSignedUrlKey",
        __Marshaller_google_cloud_compute_v1_AddSignedUrlKeyBackendServiceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListBackendServicesRequest, global::Google.Cloud.Compute.V1.BackendServiceAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListBackendServicesRequest, global::Google.Cloud.Compute.V1.BackendServiceAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListBackendServicesRequest,
        __Marshaller_google_cloud_compute_v1_BackendServiceAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteBackendServiceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_DeleteSignedUrlKey = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSignedUrlKey",
        __Marshaller_google_cloud_compute_v1_DeleteSignedUrlKeyBackendServiceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetBackendServiceRequest, global::Google.Cloud.Compute.V1.BackendService> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetBackendServiceRequest, global::Google.Cloud.Compute.V1.BackendService>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetBackendServiceRequest,
        __Marshaller_google_cloud_compute_v1_BackendService);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetHealthBackendServiceRequest, global::Google.Cloud.Compute.V1.BackendServiceGroupHealth> __Method_GetHealth = new grpc::Method<global::Google.Cloud.Compute.V1.GetHealthBackendServiceRequest, global::Google.Cloud.Compute.V1.BackendServiceGroupHealth>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHealth",
        __Marshaller_google_cloud_compute_v1_GetHealthBackendServiceRequest,
        __Marshaller_google_cloud_compute_v1_BackendServiceGroupHealth);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertBackendServiceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListBackendServicesRequest, global::Google.Cloud.Compute.V1.BackendServiceList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListBackendServicesRequest, global::Google.Cloud.Compute.V1.BackendServiceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListBackendServicesRequest,
        __Marshaller_google_cloud_compute_v1_BackendServiceList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchBackendServiceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetSecurityPolicyBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetSecurityPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.SetSecurityPolicyBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetSecurityPolicy",
        __Marshaller_google_cloud_compute_v1_SetSecurityPolicyBackendServiceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdateBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Update = new grpc::Method<global::Google.Cloud.Compute.V1.UpdateBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_google_cloud_compute_v1_UpdateBackendServiceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[4]; }
    }

    /// <summary>Base class for server-side implementations of BackendServices</summary>
    [grpc::BindServiceMethod(typeof(BackendServices), "BindService")]
    public abstract partial class BackendServicesBase
    {
      /// <summary>
      /// Adds a key for validating requests with signed URLs for this backend service.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> AddSignedUrlKey(global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of all BackendService resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.BackendServiceAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListBackendServicesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified BackendService resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteBackendServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a key for validating requests with signed URLs for this backend service.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> DeleteSignedUrlKey(global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified BackendService resource. Gets a list of available backend services.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.BackendService> Get(global::Google.Cloud.Compute.V1.GetBackendServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the most recent health check results for this BackendService.
      ///
      /// Example request body:
      ///
      /// { "group": "/zones/us-east1-b/instanceGroups/lb-backend-example" }
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.BackendServiceGroupHealth> GetHealth(global::Google.Cloud.Compute.V1.GetHealthBackendServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a BackendService resource in the specified project using the data included in the request. For more information, see  Backend services overview.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertBackendServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of BackendService resources available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.BackendServiceList> List(global::Google.Cloud.Compute.V1.ListBackendServicesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patches the specified BackendService resource with the data included in the request. For more information, see  Backend services overview. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchBackendServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the security policy for the specified backend service.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetSecurityPolicy(global::Google.Cloud.Compute.V1.SetSecurityPolicyBackendServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified BackendService resource with the data included in the request. For more information, see Backend services overview.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Update(global::Google.Cloud.Compute.V1.UpdateBackendServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BackendServices</summary>
    public partial class BackendServicesClient : grpc::ClientBase<BackendServicesClient>
    {
      /// <summary>Creates a new client for BackendServices</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BackendServicesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BackendServices that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BackendServicesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BackendServicesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BackendServicesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Adds a key for validating requests with signed URLs for this backend service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddSignedUrlKey(global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSignedUrlKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a key for validating requests with signed URLs for this backend service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddSignedUrlKey(global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSignedUrlKey, null, options, request);
      }
      /// <summary>
      /// Adds a key for validating requests with signed URLs for this backend service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddSignedUrlKeyAsync(global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSignedUrlKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a key for validating requests with signed URLs for this backend service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddSignedUrlKeyAsync(global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSignedUrlKey, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of all BackendService resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.BackendServiceAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListBackendServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of all BackendService resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.BackendServiceAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListBackendServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of all BackendService resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.BackendServiceAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListBackendServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of all BackendService resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.BackendServiceAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListBackendServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified BackendService resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified BackendService resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified BackendService resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified BackendService resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes a key for validating requests with signed URLs for this backend service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DeleteSignedUrlKey(global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSignedUrlKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a key for validating requests with signed URLs for this backend service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DeleteSignedUrlKey(global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSignedUrlKey, null, options, request);
      }
      /// <summary>
      /// Deletes a key for validating requests with signed URLs for this backend service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteSignedUrlKeyAsync(global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSignedUrlKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a key for validating requests with signed URLs for this backend service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteSignedUrlKeyAsync(global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSignedUrlKey, null, options, request);
      }
      /// <summary>
      /// Returns the specified BackendService resource. Gets a list of available backend services.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.BackendService Get(global::Google.Cloud.Compute.V1.GetBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified BackendService resource. Gets a list of available backend services.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.BackendService Get(global::Google.Cloud.Compute.V1.GetBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified BackendService resource. Gets a list of available backend services.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.BackendService> GetAsync(global::Google.Cloud.Compute.V1.GetBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified BackendService resource. Gets a list of available backend services.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.BackendService> GetAsync(global::Google.Cloud.Compute.V1.GetBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Gets the most recent health check results for this BackendService.
      ///
      /// Example request body:
      ///
      /// { "group": "/zones/us-east1-b/instanceGroups/lb-backend-example" }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.BackendServiceGroupHealth GetHealth(global::Google.Cloud.Compute.V1.GetHealthBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHealth(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the most recent health check results for this BackendService.
      ///
      /// Example request body:
      ///
      /// { "group": "/zones/us-east1-b/instanceGroups/lb-backend-example" }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.BackendServiceGroupHealth GetHealth(global::Google.Cloud.Compute.V1.GetHealthBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHealth, null, options, request);
      }
      /// <summary>
      /// Gets the most recent health check results for this BackendService.
      ///
      /// Example request body:
      ///
      /// { "group": "/zones/us-east1-b/instanceGroups/lb-backend-example" }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.BackendServiceGroupHealth> GetHealthAsync(global::Google.Cloud.Compute.V1.GetHealthBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHealthAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the most recent health check results for this BackendService.
      ///
      /// Example request body:
      ///
      /// { "group": "/zones/us-east1-b/instanceGroups/lb-backend-example" }
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.BackendServiceGroupHealth> GetHealthAsync(global::Google.Cloud.Compute.V1.GetHealthBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHealth, null, options, request);
      }
      /// <summary>
      /// Creates a BackendService resource in the specified project using the data included in the request. For more information, see  Backend services overview.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a BackendService resource in the specified project using the data included in the request. For more information, see  Backend services overview.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a BackendService resource in the specified project using the data included in the request. For more information, see  Backend services overview.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a BackendService resource in the specified project using the data included in the request. For more information, see  Backend services overview.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of BackendService resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.BackendServiceList List(global::Google.Cloud.Compute.V1.ListBackendServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of BackendService resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.BackendServiceList List(global::Google.Cloud.Compute.V1.ListBackendServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of BackendService resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.BackendServiceList> ListAsync(global::Google.Cloud.Compute.V1.ListBackendServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of BackendService resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.BackendServiceList> ListAsync(global::Google.Cloud.Compute.V1.ListBackendServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Patches the specified BackendService resource with the data included in the request. For more information, see  Backend services overview. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified BackendService resource with the data included in the request. For more information, see  Backend services overview. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Patches the specified BackendService resource with the data included in the request. For more information, see  Backend services overview. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified BackendService resource with the data included in the request. For more information, see  Backend services overview. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Sets the security policy for the specified backend service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetSecurityPolicy(global::Google.Cloud.Compute.V1.SetSecurityPolicyBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSecurityPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the security policy for the specified backend service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetSecurityPolicy(global::Google.Cloud.Compute.V1.SetSecurityPolicyBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSecurityPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the security policy for the specified backend service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetSecurityPolicyAsync(global::Google.Cloud.Compute.V1.SetSecurityPolicyBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSecurityPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the security policy for the specified backend service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetSecurityPolicyAsync(global::Google.Cloud.Compute.V1.SetSecurityPolicyBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSecurityPolicy, null, options, request);
      }
      /// <summary>
      /// Updates the specified BackendService resource with the data included in the request. For more information, see Backend services overview.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified BackendService resource with the data included in the request. For more information, see Backend services overview.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Updates the specified BackendService resource with the data included in the request. For more information, see Backend services overview.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified BackendService resource with the data included in the request. For more information, see Backend services overview.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override BackendServicesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BackendServicesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BackendServicesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddSignedUrlKey, serviceImpl.AddSignedUrlKey)
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_DeleteSignedUrlKey, serviceImpl.DeleteSignedUrlKey)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetHealth, serviceImpl.GetHealth)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_SetSecurityPolicy, serviceImpl.SetSecurityPolicy)
          .AddMethod(__Method_Update, serviceImpl.Update).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, BackendServicesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddSignedUrlKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AddSignedUrlKeyBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.AddSignedUrlKey));
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListBackendServicesRequest, global::Google.Cloud.Compute.V1.BackendServiceAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_DeleteSignedUrlKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteSignedUrlKeyBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.DeleteSignedUrlKey));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetBackendServiceRequest, global::Google.Cloud.Compute.V1.BackendService>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetHealth, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetHealthBackendServiceRequest, global::Google.Cloud.Compute.V1.BackendServiceGroupHealth>(serviceImpl.GetHealth));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListBackendServicesRequest, global::Google.Cloud.Compute.V1.BackendServiceList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_SetSecurityPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetSecurityPolicyBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetSecurityPolicy));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdateBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Update));
    }

  }
  /// <summary>
  /// The DiskTypes API.
  /// </summary>
  public static partial class DiskTypes
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.DiskTypes";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListDiskTypesRequest> __Marshaller_google_cloud_compute_v1_AggregatedListDiskTypesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListDiskTypesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DiskTypeAggregatedList> __Marshaller_google_cloud_compute_v1_DiskTypeAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DiskTypeAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetDiskTypeRequest> __Marshaller_google_cloud_compute_v1_GetDiskTypeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetDiskTypeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DiskType> __Marshaller_google_cloud_compute_v1_DiskType = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DiskType.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListDiskTypesRequest> __Marshaller_google_cloud_compute_v1_ListDiskTypesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListDiskTypesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DiskTypeList> __Marshaller_google_cloud_compute_v1_DiskTypeList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DiskTypeList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListDiskTypesRequest, global::Google.Cloud.Compute.V1.DiskTypeAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListDiskTypesRequest, global::Google.Cloud.Compute.V1.DiskTypeAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListDiskTypesRequest,
        __Marshaller_google_cloud_compute_v1_DiskTypeAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetDiskTypeRequest, global::Google.Cloud.Compute.V1.DiskType> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetDiskTypeRequest, global::Google.Cloud.Compute.V1.DiskType>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetDiskTypeRequest,
        __Marshaller_google_cloud_compute_v1_DiskType);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListDiskTypesRequest, global::Google.Cloud.Compute.V1.DiskTypeList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListDiskTypesRequest, global::Google.Cloud.Compute.V1.DiskTypeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListDiskTypesRequest,
        __Marshaller_google_cloud_compute_v1_DiskTypeList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[5]; }
    }

    /// <summary>Base class for server-side implementations of DiskTypes</summary>
    [grpc::BindServiceMethod(typeof(DiskTypes), "BindService")]
    public abstract partial class DiskTypesBase
    {
      /// <summary>
      /// Retrieves an aggregated list of disk types.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.DiskTypeAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListDiskTypesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified disk type. Gets a list of available disk types by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.DiskType> Get(global::Google.Cloud.Compute.V1.GetDiskTypeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of disk types available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.DiskTypeList> List(global::Google.Cloud.Compute.V1.ListDiskTypesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DiskTypes</summary>
    public partial class DiskTypesClient : grpc::ClientBase<DiskTypesClient>
    {
      /// <summary>Creates a new client for DiskTypes</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DiskTypesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DiskTypes that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DiskTypesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DiskTypesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DiskTypesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of disk types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DiskTypeAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListDiskTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of disk types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DiskTypeAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListDiskTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of disk types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DiskTypeAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListDiskTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of disk types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DiskTypeAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListDiskTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Returns the specified disk type. Gets a list of available disk types by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DiskType Get(global::Google.Cloud.Compute.V1.GetDiskTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified disk type. Gets a list of available disk types by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DiskType Get(global::Google.Cloud.Compute.V1.GetDiskTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified disk type. Gets a list of available disk types by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DiskType> GetAsync(global::Google.Cloud.Compute.V1.GetDiskTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified disk type. Gets a list of available disk types by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DiskType> GetAsync(global::Google.Cloud.Compute.V1.GetDiskTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of disk types available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DiskTypeList List(global::Google.Cloud.Compute.V1.ListDiskTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of disk types available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DiskTypeList List(global::Google.Cloud.Compute.V1.ListDiskTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of disk types available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DiskTypeList> ListAsync(global::Google.Cloud.Compute.V1.ListDiskTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of disk types available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DiskTypeList> ListAsync(global::Google.Cloud.Compute.V1.ListDiskTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DiskTypesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DiskTypesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DiskTypesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DiskTypesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListDiskTypesRequest, global::Google.Cloud.Compute.V1.DiskTypeAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetDiskTypeRequest, global::Google.Cloud.Compute.V1.DiskType>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListDiskTypesRequest, global::Google.Cloud.Compute.V1.DiskTypeList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The Disks API.
  /// </summary>
  public static partial class Disks
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.Disks";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AddResourcePoliciesDiskRequest> __Marshaller_google_cloud_compute_v1_AddResourcePoliciesDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AddResourcePoliciesDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListDisksRequest> __Marshaller_google_cloud_compute_v1_AggregatedListDisksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListDisksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DiskAggregatedList> __Marshaller_google_cloud_compute_v1_DiskAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DiskAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.CreateSnapshotDiskRequest> __Marshaller_google_cloud_compute_v1_CreateSnapshotDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.CreateSnapshotDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteDiskRequest> __Marshaller_google_cloud_compute_v1_DeleteDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetDiskRequest> __Marshaller_google_cloud_compute_v1_GetDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Disk> __Marshaller_google_cloud_compute_v1_Disk = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Disk.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetIamPolicyDiskRequest> __Marshaller_google_cloud_compute_v1_GetIamPolicyDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetIamPolicyDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Policy> __Marshaller_google_cloud_compute_v1_Policy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Policy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertDiskRequest> __Marshaller_google_cloud_compute_v1_InsertDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListDisksRequest> __Marshaller_google_cloud_compute_v1_ListDisksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListDisksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DiskList> __Marshaller_google_cloud_compute_v1_DiskList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DiskList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RemoveResourcePoliciesDiskRequest> __Marshaller_google_cloud_compute_v1_RemoveResourcePoliciesDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RemoveResourcePoliciesDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ResizeDiskRequest> __Marshaller_google_cloud_compute_v1_ResizeDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ResizeDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetIamPolicyDiskRequest> __Marshaller_google_cloud_compute_v1_SetIamPolicyDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetIamPolicyDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetLabelsDiskRequest> __Marshaller_google_cloud_compute_v1_SetLabelsDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetLabelsDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestIamPermissionsDiskRequest> __Marshaller_google_cloud_compute_v1_TestIamPermissionsDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestIamPermissionsDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Marshaller_google_cloud_compute_v1_TestPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestPermissionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AddResourcePoliciesDiskRequest, global::Google.Cloud.Compute.V1.Operation> __Method_AddResourcePolicies = new grpc::Method<global::Google.Cloud.Compute.V1.AddResourcePoliciesDiskRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddResourcePolicies",
        __Marshaller_google_cloud_compute_v1_AddResourcePoliciesDiskRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListDisksRequest, global::Google.Cloud.Compute.V1.DiskAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListDisksRequest, global::Google.Cloud.Compute.V1.DiskAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListDisksRequest,
        __Marshaller_google_cloud_compute_v1_DiskAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.CreateSnapshotDiskRequest, global::Google.Cloud.Compute.V1.Operation> __Method_CreateSnapshot = new grpc::Method<global::Google.Cloud.Compute.V1.CreateSnapshotDiskRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSnapshot",
        __Marshaller_google_cloud_compute_v1_CreateSnapshotDiskRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteDiskRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteDiskRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteDiskRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetDiskRequest, global::Google.Cloud.Compute.V1.Disk> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetDiskRequest, global::Google.Cloud.Compute.V1.Disk>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetDiskRequest,
        __Marshaller_google_cloud_compute_v1_Disk);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyDiskRequest, global::Google.Cloud.Compute.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyDiskRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_cloud_compute_v1_GetIamPolicyDiskRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertDiskRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertDiskRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertDiskRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListDisksRequest, global::Google.Cloud.Compute.V1.DiskList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListDisksRequest, global::Google.Cloud.Compute.V1.DiskList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListDisksRequest,
        __Marshaller_google_cloud_compute_v1_DiskList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.RemoveResourcePoliciesDiskRequest, global::Google.Cloud.Compute.V1.Operation> __Method_RemoveResourcePolicies = new grpc::Method<global::Google.Cloud.Compute.V1.RemoveResourcePoliciesDiskRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveResourcePolicies",
        __Marshaller_google_cloud_compute_v1_RemoveResourcePoliciesDiskRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ResizeDiskRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Resize = new grpc::Method<global::Google.Cloud.Compute.V1.ResizeDiskRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Resize",
        __Marshaller_google_cloud_compute_v1_ResizeDiskRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyDiskRequest, global::Google.Cloud.Compute.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyDiskRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_cloud_compute_v1_SetIamPolicyDiskRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetLabelsDiskRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetLabels = new grpc::Method<global::Google.Cloud.Compute.V1.SetLabelsDiskRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetLabels",
        __Marshaller_google_cloud_compute_v1_SetLabelsDiskRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsDiskRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsDiskRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_cloud_compute_v1_TestIamPermissionsDiskRequest,
        __Marshaller_google_cloud_compute_v1_TestPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[6]; }
    }

    /// <summary>Base class for server-side implementations of Disks</summary>
    [grpc::BindServiceMethod(typeof(Disks), "BindService")]
    public abstract partial class DisksBase
    {
      /// <summary>
      /// Adds existing resource policies to a disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> AddResourcePolicies(global::Google.Cloud.Compute.V1.AddResourcePoliciesDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves an aggregated list of persistent disks.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.DiskAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListDisksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a snapshot of a specified persistent disk.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> CreateSnapshot(global::Google.Cloud.Compute.V1.CreateSnapshotDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified persistent disk. Deleting a disk removes its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a specified persistent disk. Gets a list of available persistent disks by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Disk> Get(global::Google.Cloud.Compute.V1.GetDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a persistent disk in the specified project using the data in the request. You can create a disk from a source (sourceImage, sourceSnapshot, or sourceDisk) or create an empty 500 GB data disk by omitting all properties. You can also create a disk that is larger than the default size by specifying the sizeGb property.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of persistent disks contained within the specified zone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.DiskList> List(global::Google.Cloud.Compute.V1.ListDisksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes resource policies from a disk.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> RemoveResourcePolicies(global::Google.Cloud.Compute.V1.RemoveResourcePoliciesDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Resizes the specified persistent disk. You can only increase the size of the disk.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Resize(global::Google.Cloud.Compute.V1.ResizeDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the labels on a disk. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetLabels(global::Google.Cloud.Compute.V1.SetLabelsDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Disks</summary>
    public partial class DisksClient : grpc::ClientBase<DisksClient>
    {
      /// <summary>Creates a new client for Disks</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DisksClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Disks that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DisksClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DisksClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DisksClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Adds existing resource policies to a disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddResourcePolicies(global::Google.Cloud.Compute.V1.AddResourcePoliciesDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddResourcePolicies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds existing resource policies to a disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddResourcePolicies(global::Google.Cloud.Compute.V1.AddResourcePoliciesDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddResourcePolicies, null, options, request);
      }
      /// <summary>
      /// Adds existing resource policies to a disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddResourcePoliciesAsync(global::Google.Cloud.Compute.V1.AddResourcePoliciesDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddResourcePoliciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds existing resource policies to a disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddResourcePoliciesAsync(global::Google.Cloud.Compute.V1.AddResourcePoliciesDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddResourcePolicies, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of persistent disks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DiskAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListDisksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of persistent disks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DiskAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListDisksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of persistent disks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DiskAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListDisksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of persistent disks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DiskAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListDisksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Creates a snapshot of a specified persistent disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation CreateSnapshot(global::Google.Cloud.Compute.V1.CreateSnapshotDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a snapshot of a specified persistent disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation CreateSnapshot(global::Google.Cloud.Compute.V1.CreateSnapshotDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSnapshot, null, options, request);
      }
      /// <summary>
      /// Creates a snapshot of a specified persistent disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> CreateSnapshotAsync(global::Google.Cloud.Compute.V1.CreateSnapshotDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a snapshot of a specified persistent disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> CreateSnapshotAsync(global::Google.Cloud.Compute.V1.CreateSnapshotDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSnapshot, null, options, request);
      }
      /// <summary>
      /// Deletes the specified persistent disk. Deleting a disk removes its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified persistent disk. Deleting a disk removes its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified persistent disk. Deleting a disk removes its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified persistent disk. Deleting a disk removes its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns a specified persistent disk. Gets a list of available persistent disks by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Disk Get(global::Google.Cloud.Compute.V1.GetDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a specified persistent disk. Gets a list of available persistent disks by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Disk Get(global::Google.Cloud.Compute.V1.GetDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns a specified persistent disk. Gets a list of available persistent disks by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Disk> GetAsync(global::Google.Cloud.Compute.V1.GetDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a specified persistent disk. Gets a list of available persistent disks by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Disk> GetAsync(global::Google.Cloud.Compute.V1.GetDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Creates a persistent disk in the specified project using the data in the request. You can create a disk from a source (sourceImage, sourceSnapshot, or sourceDisk) or create an empty 500 GB data disk by omitting all properties. You can also create a disk that is larger than the default size by specifying the sizeGb property.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a persistent disk in the specified project using the data in the request. You can create a disk from a source (sourceImage, sourceSnapshot, or sourceDisk) or create an empty 500 GB data disk by omitting all properties. You can also create a disk that is larger than the default size by specifying the sizeGb property.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a persistent disk in the specified project using the data in the request. You can create a disk from a source (sourceImage, sourceSnapshot, or sourceDisk) or create an empty 500 GB data disk by omitting all properties. You can also create a disk that is larger than the default size by specifying the sizeGb property.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a persistent disk in the specified project using the data in the request. You can create a disk from a source (sourceImage, sourceSnapshot, or sourceDisk) or create an empty 500 GB data disk by omitting all properties. You can also create a disk that is larger than the default size by specifying the sizeGb property.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of persistent disks contained within the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DiskList List(global::Google.Cloud.Compute.V1.ListDisksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of persistent disks contained within the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DiskList List(global::Google.Cloud.Compute.V1.ListDisksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of persistent disks contained within the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DiskList> ListAsync(global::Google.Cloud.Compute.V1.ListDisksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of persistent disks contained within the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DiskList> ListAsync(global::Google.Cloud.Compute.V1.ListDisksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Removes resource policies from a disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RemoveResourcePolicies(global::Google.Cloud.Compute.V1.RemoveResourcePoliciesDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveResourcePolicies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes resource policies from a disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RemoveResourcePolicies(global::Google.Cloud.Compute.V1.RemoveResourcePoliciesDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveResourcePolicies, null, options, request);
      }
      /// <summary>
      /// Removes resource policies from a disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RemoveResourcePoliciesAsync(global::Google.Cloud.Compute.V1.RemoveResourcePoliciesDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveResourcePoliciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes resource policies from a disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RemoveResourcePoliciesAsync(global::Google.Cloud.Compute.V1.RemoveResourcePoliciesDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveResourcePolicies, null, options, request);
      }
      /// <summary>
      /// Resizes the specified persistent disk. You can only increase the size of the disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Resize(global::Google.Cloud.Compute.V1.ResizeDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Resize(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resizes the specified persistent disk. You can only increase the size of the disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Resize(global::Google.Cloud.Compute.V1.ResizeDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Resize, null, options, request);
      }
      /// <summary>
      /// Resizes the specified persistent disk. You can only increase the size of the disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> ResizeAsync(global::Google.Cloud.Compute.V1.ResizeDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResizeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resizes the specified persistent disk. You can only increase the size of the disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> ResizeAsync(global::Google.Cloud.Compute.V1.ResizeDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Resize, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the labels on a disk. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetLabels(global::Google.Cloud.Compute.V1.SetLabelsDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLabels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the labels on a disk. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetLabels(global::Google.Cloud.Compute.V1.SetLabelsDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetLabels, null, options, request);
      }
      /// <summary>
      /// Sets the labels on a disk. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetLabelsAsync(global::Google.Cloud.Compute.V1.SetLabelsDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLabelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the labels on a disk. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetLabelsAsync(global::Google.Cloud.Compute.V1.SetLabelsDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetLabels, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DisksClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DisksClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DisksBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddResourcePolicies, serviceImpl.AddResourcePolicies)
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_CreateSnapshot, serviceImpl.CreateSnapshot)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_RemoveResourcePolicies, serviceImpl.RemoveResourcePolicies)
          .AddMethod(__Method_Resize, serviceImpl.Resize)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_SetLabels, serviceImpl.SetLabels)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DisksBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddResourcePolicies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AddResourcePoliciesDiskRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.AddResourcePolicies));
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListDisksRequest, global::Google.Cloud.Compute.V1.DiskAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_CreateSnapshot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.CreateSnapshotDiskRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.CreateSnapshot));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteDiskRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetDiskRequest, global::Google.Cloud.Compute.V1.Disk>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetIamPolicyDiskRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertDiskRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListDisksRequest, global::Google.Cloud.Compute.V1.DiskList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_RemoveResourcePolicies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.RemoveResourcePoliciesDiskRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.RemoveResourcePolicies));
      serviceBinder.AddMethod(__Method_Resize, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ResizeDiskRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Resize));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetIamPolicyDiskRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_SetLabels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetLabelsDiskRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetLabels));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.TestIamPermissionsDiskRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
  /// <summary>
  /// The ExternalVpnGateways API.
  /// </summary>
  public static partial class ExternalVpnGateways
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.ExternalVpnGateways";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteExternalVpnGatewayRequest> __Marshaller_google_cloud_compute_v1_DeleteExternalVpnGatewayRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteExternalVpnGatewayRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetExternalVpnGatewayRequest> __Marshaller_google_cloud_compute_v1_GetExternalVpnGatewayRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetExternalVpnGatewayRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ExternalVpnGateway> __Marshaller_google_cloud_compute_v1_ExternalVpnGateway = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ExternalVpnGateway.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertExternalVpnGatewayRequest> __Marshaller_google_cloud_compute_v1_InsertExternalVpnGatewayRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertExternalVpnGatewayRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListExternalVpnGatewaysRequest> __Marshaller_google_cloud_compute_v1_ListExternalVpnGatewaysRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListExternalVpnGatewaysRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ExternalVpnGatewayList> __Marshaller_google_cloud_compute_v1_ExternalVpnGatewayList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ExternalVpnGatewayList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetLabelsExternalVpnGatewayRequest> __Marshaller_google_cloud_compute_v1_SetLabelsExternalVpnGatewayRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetLabelsExternalVpnGatewayRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestIamPermissionsExternalVpnGatewayRequest> __Marshaller_google_cloud_compute_v1_TestIamPermissionsExternalVpnGatewayRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestIamPermissionsExternalVpnGatewayRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Marshaller_google_cloud_compute_v1_TestPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestPermissionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteExternalVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteExternalVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteExternalVpnGatewayRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetExternalVpnGatewayRequest, global::Google.Cloud.Compute.V1.ExternalVpnGateway> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetExternalVpnGatewayRequest, global::Google.Cloud.Compute.V1.ExternalVpnGateway>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetExternalVpnGatewayRequest,
        __Marshaller_google_cloud_compute_v1_ExternalVpnGateway);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertExternalVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertExternalVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertExternalVpnGatewayRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListExternalVpnGatewaysRequest, global::Google.Cloud.Compute.V1.ExternalVpnGatewayList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListExternalVpnGatewaysRequest, global::Google.Cloud.Compute.V1.ExternalVpnGatewayList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListExternalVpnGatewaysRequest,
        __Marshaller_google_cloud_compute_v1_ExternalVpnGatewayList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetLabelsExternalVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetLabels = new grpc::Method<global::Google.Cloud.Compute.V1.SetLabelsExternalVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetLabels",
        __Marshaller_google_cloud_compute_v1_SetLabelsExternalVpnGatewayRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsExternalVpnGatewayRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsExternalVpnGatewayRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_cloud_compute_v1_TestIamPermissionsExternalVpnGatewayRequest,
        __Marshaller_google_cloud_compute_v1_TestPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[7]; }
    }

    /// <summary>Base class for server-side implementations of ExternalVpnGateways</summary>
    [grpc::BindServiceMethod(typeof(ExternalVpnGateways), "BindService")]
    public abstract partial class ExternalVpnGatewaysBase
    {
      /// <summary>
      /// Deletes the specified externalVpnGateway.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteExternalVpnGatewayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified externalVpnGateway. Get a list of available externalVpnGateways by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.ExternalVpnGateway> Get(global::Google.Cloud.Compute.V1.GetExternalVpnGatewayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a ExternalVpnGateway in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertExternalVpnGatewayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of ExternalVpnGateway available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.ExternalVpnGatewayList> List(global::Google.Cloud.Compute.V1.ListExternalVpnGatewaysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the labels on an ExternalVpnGateway. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetLabels(global::Google.Cloud.Compute.V1.SetLabelsExternalVpnGatewayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsExternalVpnGatewayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ExternalVpnGateways</summary>
    public partial class ExternalVpnGatewaysClient : grpc::ClientBase<ExternalVpnGatewaysClient>
    {
      /// <summary>Creates a new client for ExternalVpnGateways</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ExternalVpnGatewaysClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ExternalVpnGateways that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ExternalVpnGatewaysClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ExternalVpnGatewaysClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ExternalVpnGatewaysClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified externalVpnGateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteExternalVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified externalVpnGateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteExternalVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified externalVpnGateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteExternalVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified externalVpnGateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteExternalVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified externalVpnGateway. Get a list of available externalVpnGateways by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ExternalVpnGateway Get(global::Google.Cloud.Compute.V1.GetExternalVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified externalVpnGateway. Get a list of available externalVpnGateways by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ExternalVpnGateway Get(global::Google.Cloud.Compute.V1.GetExternalVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified externalVpnGateway. Get a list of available externalVpnGateways by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ExternalVpnGateway> GetAsync(global::Google.Cloud.Compute.V1.GetExternalVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified externalVpnGateway. Get a list of available externalVpnGateways by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ExternalVpnGateway> GetAsync(global::Google.Cloud.Compute.V1.GetExternalVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a ExternalVpnGateway in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertExternalVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a ExternalVpnGateway in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertExternalVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a ExternalVpnGateway in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertExternalVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a ExternalVpnGateway in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertExternalVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of ExternalVpnGateway available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ExternalVpnGatewayList List(global::Google.Cloud.Compute.V1.ListExternalVpnGatewaysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of ExternalVpnGateway available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ExternalVpnGatewayList List(global::Google.Cloud.Compute.V1.ListExternalVpnGatewaysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of ExternalVpnGateway available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ExternalVpnGatewayList> ListAsync(global::Google.Cloud.Compute.V1.ListExternalVpnGatewaysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of ExternalVpnGateway available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ExternalVpnGatewayList> ListAsync(global::Google.Cloud.Compute.V1.ListExternalVpnGatewaysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Sets the labels on an ExternalVpnGateway. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetLabels(global::Google.Cloud.Compute.V1.SetLabelsExternalVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLabels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the labels on an ExternalVpnGateway. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetLabels(global::Google.Cloud.Compute.V1.SetLabelsExternalVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetLabels, null, options, request);
      }
      /// <summary>
      /// Sets the labels on an ExternalVpnGateway. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetLabelsAsync(global::Google.Cloud.Compute.V1.SetLabelsExternalVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLabelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the labels on an ExternalVpnGateway. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetLabelsAsync(global::Google.Cloud.Compute.V1.SetLabelsExternalVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetLabels, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsExternalVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsExternalVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsExternalVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsExternalVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ExternalVpnGatewaysClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ExternalVpnGatewaysClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ExternalVpnGatewaysBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_SetLabels, serviceImpl.SetLabels)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ExternalVpnGatewaysBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteExternalVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetExternalVpnGatewayRequest, global::Google.Cloud.Compute.V1.ExternalVpnGateway>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertExternalVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListExternalVpnGatewaysRequest, global::Google.Cloud.Compute.V1.ExternalVpnGatewayList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_SetLabels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetLabelsExternalVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetLabels));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.TestIamPermissionsExternalVpnGatewayRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
  /// <summary>
  /// The Firewalls API.
  /// </summary>
  public static partial class Firewalls
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.Firewalls";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteFirewallRequest> __Marshaller_google_cloud_compute_v1_DeleteFirewallRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteFirewallRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetFirewallRequest> __Marshaller_google_cloud_compute_v1_GetFirewallRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetFirewallRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Firewall> __Marshaller_google_cloud_compute_v1_Firewall = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Firewall.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertFirewallRequest> __Marshaller_google_cloud_compute_v1_InsertFirewallRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertFirewallRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListFirewallsRequest> __Marshaller_google_cloud_compute_v1_ListFirewallsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListFirewallsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.FirewallList> __Marshaller_google_cloud_compute_v1_FirewallList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.FirewallList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchFirewallRequest> __Marshaller_google_cloud_compute_v1_PatchFirewallRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchFirewallRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdateFirewallRequest> __Marshaller_google_cloud_compute_v1_UpdateFirewallRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdateFirewallRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteFirewallRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteFirewallRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteFirewallRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetFirewallRequest, global::Google.Cloud.Compute.V1.Firewall> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetFirewallRequest, global::Google.Cloud.Compute.V1.Firewall>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetFirewallRequest,
        __Marshaller_google_cloud_compute_v1_Firewall);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertFirewallRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertFirewallRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertFirewallRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListFirewallsRequest, global::Google.Cloud.Compute.V1.FirewallList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListFirewallsRequest, global::Google.Cloud.Compute.V1.FirewallList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListFirewallsRequest,
        __Marshaller_google_cloud_compute_v1_FirewallList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchFirewallRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchFirewallRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchFirewallRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdateFirewallRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Update = new grpc::Method<global::Google.Cloud.Compute.V1.UpdateFirewallRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_google_cloud_compute_v1_UpdateFirewallRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[8]; }
    }

    /// <summary>Base class for server-side implementations of Firewalls</summary>
    [grpc::BindServiceMethod(typeof(Firewalls), "BindService")]
    public abstract partial class FirewallsBase
    {
      /// <summary>
      /// Deletes the specified firewall.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteFirewallRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified firewall.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Firewall> Get(global::Google.Cloud.Compute.V1.GetFirewallRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a firewall rule in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertFirewallRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of firewall rules available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.FirewallList> List(global::Google.Cloud.Compute.V1.ListFirewallsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified firewall rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchFirewallRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified firewall rule with the data included in the request. Note that all fields will be updated if using PUT, even fields that are not specified. To update individual fields, please use PATCH instead.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Update(global::Google.Cloud.Compute.V1.UpdateFirewallRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Firewalls</summary>
    public partial class FirewallsClient : grpc::ClientBase<FirewallsClient>
    {
      /// <summary>Creates a new client for Firewalls</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public FirewallsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Firewalls that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public FirewallsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected FirewallsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected FirewallsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified firewall.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteFirewallRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified firewall.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteFirewallRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified firewall.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteFirewallRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified firewall.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteFirewallRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified firewall.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Firewall Get(global::Google.Cloud.Compute.V1.GetFirewallRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified firewall.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Firewall Get(global::Google.Cloud.Compute.V1.GetFirewallRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified firewall.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Firewall> GetAsync(global::Google.Cloud.Compute.V1.GetFirewallRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified firewall.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Firewall> GetAsync(global::Google.Cloud.Compute.V1.GetFirewallRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a firewall rule in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertFirewallRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a firewall rule in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertFirewallRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a firewall rule in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertFirewallRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a firewall rule in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertFirewallRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of firewall rules available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.FirewallList List(global::Google.Cloud.Compute.V1.ListFirewallsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of firewall rules available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.FirewallList List(global::Google.Cloud.Compute.V1.ListFirewallsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of firewall rules available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.FirewallList> ListAsync(global::Google.Cloud.Compute.V1.ListFirewallsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of firewall rules available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.FirewallList> ListAsync(global::Google.Cloud.Compute.V1.ListFirewallsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Updates the specified firewall rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchFirewallRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified firewall rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchFirewallRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates the specified firewall rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchFirewallRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified firewall rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchFirewallRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates the specified firewall rule with the data included in the request. Note that all fields will be updated if using PUT, even fields that are not specified. To update individual fields, please use PATCH instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateFirewallRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified firewall rule with the data included in the request. Note that all fields will be updated if using PUT, even fields that are not specified. To update individual fields, please use PATCH instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateFirewallRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Updates the specified firewall rule with the data included in the request. Note that all fields will be updated if using PUT, even fields that are not specified. To update individual fields, please use PATCH instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateFirewallRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified firewall rule with the data included in the request. Note that all fields will be updated if using PUT, even fields that are not specified. To update individual fields, please use PATCH instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateFirewallRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override FirewallsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FirewallsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(FirewallsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_Update, serviceImpl.Update).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, FirewallsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteFirewallRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetFirewallRequest, global::Google.Cloud.Compute.V1.Firewall>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertFirewallRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListFirewallsRequest, global::Google.Cloud.Compute.V1.FirewallList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchFirewallRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdateFirewallRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Update));
    }

  }
  /// <summary>
  /// The ForwardingRules API.
  /// </summary>
  public static partial class ForwardingRules
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.ForwardingRules";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListForwardingRulesRequest> __Marshaller_google_cloud_compute_v1_AggregatedListForwardingRulesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListForwardingRulesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ForwardingRuleAggregatedList> __Marshaller_google_cloud_compute_v1_ForwardingRuleAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ForwardingRuleAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteForwardingRuleRequest> __Marshaller_google_cloud_compute_v1_DeleteForwardingRuleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteForwardingRuleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetForwardingRuleRequest> __Marshaller_google_cloud_compute_v1_GetForwardingRuleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetForwardingRuleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ForwardingRule> __Marshaller_google_cloud_compute_v1_ForwardingRule = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ForwardingRule.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertForwardingRuleRequest> __Marshaller_google_cloud_compute_v1_InsertForwardingRuleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertForwardingRuleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListForwardingRulesRequest> __Marshaller_google_cloud_compute_v1_ListForwardingRulesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListForwardingRulesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ForwardingRuleList> __Marshaller_google_cloud_compute_v1_ForwardingRuleList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ForwardingRuleList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchForwardingRuleRequest> __Marshaller_google_cloud_compute_v1_PatchForwardingRuleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchForwardingRuleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetTargetForwardingRuleRequest> __Marshaller_google_cloud_compute_v1_SetTargetForwardingRuleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetTargetForwardingRuleRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListForwardingRulesRequest, global::Google.Cloud.Compute.V1.ForwardingRuleAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListForwardingRulesRequest, global::Google.Cloud.Compute.V1.ForwardingRuleAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListForwardingRulesRequest,
        __Marshaller_google_cloud_compute_v1_ForwardingRuleAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteForwardingRuleRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetForwardingRuleRequest, global::Google.Cloud.Compute.V1.ForwardingRule> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetForwardingRuleRequest, global::Google.Cloud.Compute.V1.ForwardingRule>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetForwardingRuleRequest,
        __Marshaller_google_cloud_compute_v1_ForwardingRule);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertForwardingRuleRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListForwardingRulesRequest, global::Google.Cloud.Compute.V1.ForwardingRuleList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListForwardingRulesRequest, global::Google.Cloud.Compute.V1.ForwardingRuleList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListForwardingRulesRequest,
        __Marshaller_google_cloud_compute_v1_ForwardingRuleList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchForwardingRuleRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetTargetForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetTarget = new grpc::Method<global::Google.Cloud.Compute.V1.SetTargetForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTarget",
        __Marshaller_google_cloud_compute_v1_SetTargetForwardingRuleRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[9]; }
    }

    /// <summary>Base class for server-side implementations of ForwardingRules</summary>
    [grpc::BindServiceMethod(typeof(ForwardingRules), "BindService")]
    public abstract partial class ForwardingRulesBase
    {
      /// <summary>
      /// Retrieves an aggregated list of forwarding rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.ForwardingRuleAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListForwardingRulesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified ForwardingRule resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteForwardingRuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified ForwardingRule resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.ForwardingRule> Get(global::Google.Cloud.Compute.V1.GetForwardingRuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a ForwardingRule resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertForwardingRuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of ForwardingRule resources available to the specified project and region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.ForwardingRuleList> List(global::Google.Cloud.Compute.V1.ListForwardingRulesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchForwardingRuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Changes target URL for forwarding rule. The new target should be of the same type as the old target.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetTarget(global::Google.Cloud.Compute.V1.SetTargetForwardingRuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ForwardingRules</summary>
    public partial class ForwardingRulesClient : grpc::ClientBase<ForwardingRulesClient>
    {
      /// <summary>Creates a new client for ForwardingRules</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ForwardingRulesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ForwardingRules that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ForwardingRulesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ForwardingRulesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ForwardingRulesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of forwarding rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ForwardingRuleAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListForwardingRulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of forwarding rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ForwardingRuleAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListForwardingRulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of forwarding rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ForwardingRuleAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListForwardingRulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of forwarding rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ForwardingRuleAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListForwardingRulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified ForwardingRule resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified ForwardingRule resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified ForwardingRule resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified ForwardingRule resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified ForwardingRule resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ForwardingRule Get(global::Google.Cloud.Compute.V1.GetForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified ForwardingRule resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ForwardingRule Get(global::Google.Cloud.Compute.V1.GetForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified ForwardingRule resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ForwardingRule> GetAsync(global::Google.Cloud.Compute.V1.GetForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified ForwardingRule resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ForwardingRule> GetAsync(global::Google.Cloud.Compute.V1.GetForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a ForwardingRule resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a ForwardingRule resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a ForwardingRule resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a ForwardingRule resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of ForwardingRule resources available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ForwardingRuleList List(global::Google.Cloud.Compute.V1.ListForwardingRulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of ForwardingRule resources available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ForwardingRuleList List(global::Google.Cloud.Compute.V1.ListForwardingRulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of ForwardingRule resources available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ForwardingRuleList> ListAsync(global::Google.Cloud.Compute.V1.ListForwardingRulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of ForwardingRule resources available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ForwardingRuleList> ListAsync(global::Google.Cloud.Compute.V1.ListForwardingRulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Changes target URL for forwarding rule. The new target should be of the same type as the old target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetTarget(global::Google.Cloud.Compute.V1.SetTargetForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTarget(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes target URL for forwarding rule. The new target should be of the same type as the old target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetTarget(global::Google.Cloud.Compute.V1.SetTargetForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTarget, null, options, request);
      }
      /// <summary>
      /// Changes target URL for forwarding rule. The new target should be of the same type as the old target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetTargetAsync(global::Google.Cloud.Compute.V1.SetTargetForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTargetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes target URL for forwarding rule. The new target should be of the same type as the old target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetTargetAsync(global::Google.Cloud.Compute.V1.SetTargetForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTarget, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ForwardingRulesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ForwardingRulesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ForwardingRulesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_SetTarget, serviceImpl.SetTarget).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ForwardingRulesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListForwardingRulesRequest, global::Google.Cloud.Compute.V1.ForwardingRuleAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetForwardingRuleRequest, global::Google.Cloud.Compute.V1.ForwardingRule>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListForwardingRulesRequest, global::Google.Cloud.Compute.V1.ForwardingRuleList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_SetTarget, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetTargetForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetTarget));
    }

  }
  /// <summary>
  /// The GlobalAddresses API.
  /// </summary>
  public static partial class GlobalAddresses
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.GlobalAddresses";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteGlobalAddressRequest> __Marshaller_google_cloud_compute_v1_DeleteGlobalAddressRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteGlobalAddressRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetGlobalAddressRequest> __Marshaller_google_cloud_compute_v1_GetGlobalAddressRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetGlobalAddressRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Address> __Marshaller_google_cloud_compute_v1_Address = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Address.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertGlobalAddressRequest> __Marshaller_google_cloud_compute_v1_InsertGlobalAddressRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertGlobalAddressRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListGlobalAddressesRequest> __Marshaller_google_cloud_compute_v1_ListGlobalAddressesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListGlobalAddressesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AddressList> __Marshaller_google_cloud_compute_v1_AddressList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AddressList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteGlobalAddressRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteGlobalAddressRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteGlobalAddressRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetGlobalAddressRequest, global::Google.Cloud.Compute.V1.Address> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetGlobalAddressRequest, global::Google.Cloud.Compute.V1.Address>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetGlobalAddressRequest,
        __Marshaller_google_cloud_compute_v1_Address);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertGlobalAddressRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertGlobalAddressRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertGlobalAddressRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListGlobalAddressesRequest, global::Google.Cloud.Compute.V1.AddressList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListGlobalAddressesRequest, global::Google.Cloud.Compute.V1.AddressList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListGlobalAddressesRequest,
        __Marshaller_google_cloud_compute_v1_AddressList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[10]; }
    }

    /// <summary>Base class for server-side implementations of GlobalAddresses</summary>
    [grpc::BindServiceMethod(typeof(GlobalAddresses), "BindService")]
    public abstract partial class GlobalAddressesBase
    {
      /// <summary>
      /// Deletes the specified address resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteGlobalAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified address resource. Gets a list of available addresses by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Address> Get(global::Google.Cloud.Compute.V1.GetGlobalAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates an address resource in the specified project by using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertGlobalAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of global addresses.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.AddressList> List(global::Google.Cloud.Compute.V1.ListGlobalAddressesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GlobalAddresses</summary>
    public partial class GlobalAddressesClient : grpc::ClientBase<GlobalAddressesClient>
    {
      /// <summary>Creates a new client for GlobalAddresses</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GlobalAddressesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GlobalAddresses that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GlobalAddressesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GlobalAddressesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GlobalAddressesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified address resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteGlobalAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified address resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteGlobalAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified address resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteGlobalAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified address resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteGlobalAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified address resource. Gets a list of available addresses by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Address Get(global::Google.Cloud.Compute.V1.GetGlobalAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified address resource. Gets a list of available addresses by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Address Get(global::Google.Cloud.Compute.V1.GetGlobalAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified address resource. Gets a list of available addresses by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Address> GetAsync(global::Google.Cloud.Compute.V1.GetGlobalAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified address resource. Gets a list of available addresses by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Address> GetAsync(global::Google.Cloud.Compute.V1.GetGlobalAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates an address resource in the specified project by using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertGlobalAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an address resource in the specified project by using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertGlobalAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates an address resource in the specified project by using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertGlobalAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an address resource in the specified project by using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertGlobalAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of global addresses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.AddressList List(global::Google.Cloud.Compute.V1.ListGlobalAddressesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of global addresses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.AddressList List(global::Google.Cloud.Compute.V1.ListGlobalAddressesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of global addresses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.AddressList> ListAsync(global::Google.Cloud.Compute.V1.ListGlobalAddressesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of global addresses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.AddressList> ListAsync(global::Google.Cloud.Compute.V1.ListGlobalAddressesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GlobalAddressesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GlobalAddressesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GlobalAddressesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GlobalAddressesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteGlobalAddressRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetGlobalAddressRequest, global::Google.Cloud.Compute.V1.Address>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertGlobalAddressRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListGlobalAddressesRequest, global::Google.Cloud.Compute.V1.AddressList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The GlobalForwardingRules API.
  /// </summary>
  public static partial class GlobalForwardingRules
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.GlobalForwardingRules";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteGlobalForwardingRuleRequest> __Marshaller_google_cloud_compute_v1_DeleteGlobalForwardingRuleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteGlobalForwardingRuleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetGlobalForwardingRuleRequest> __Marshaller_google_cloud_compute_v1_GetGlobalForwardingRuleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetGlobalForwardingRuleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ForwardingRule> __Marshaller_google_cloud_compute_v1_ForwardingRule = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ForwardingRule.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertGlobalForwardingRuleRequest> __Marshaller_google_cloud_compute_v1_InsertGlobalForwardingRuleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertGlobalForwardingRuleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListGlobalForwardingRulesRequest> __Marshaller_google_cloud_compute_v1_ListGlobalForwardingRulesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListGlobalForwardingRulesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ForwardingRuleList> __Marshaller_google_cloud_compute_v1_ForwardingRuleList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ForwardingRuleList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchGlobalForwardingRuleRequest> __Marshaller_google_cloud_compute_v1_PatchGlobalForwardingRuleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchGlobalForwardingRuleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetTargetGlobalForwardingRuleRequest> __Marshaller_google_cloud_compute_v1_SetTargetGlobalForwardingRuleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetTargetGlobalForwardingRuleRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteGlobalForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteGlobalForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteGlobalForwardingRuleRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetGlobalForwardingRuleRequest, global::Google.Cloud.Compute.V1.ForwardingRule> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetGlobalForwardingRuleRequest, global::Google.Cloud.Compute.V1.ForwardingRule>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetGlobalForwardingRuleRequest,
        __Marshaller_google_cloud_compute_v1_ForwardingRule);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertGlobalForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertGlobalForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertGlobalForwardingRuleRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListGlobalForwardingRulesRequest, global::Google.Cloud.Compute.V1.ForwardingRuleList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListGlobalForwardingRulesRequest, global::Google.Cloud.Compute.V1.ForwardingRuleList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListGlobalForwardingRulesRequest,
        __Marshaller_google_cloud_compute_v1_ForwardingRuleList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchGlobalForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchGlobalForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchGlobalForwardingRuleRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetTargetGlobalForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetTarget = new grpc::Method<global::Google.Cloud.Compute.V1.SetTargetGlobalForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTarget",
        __Marshaller_google_cloud_compute_v1_SetTargetGlobalForwardingRuleRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[11]; }
    }

    /// <summary>Base class for server-side implementations of GlobalForwardingRules</summary>
    [grpc::BindServiceMethod(typeof(GlobalForwardingRules), "BindService")]
    public abstract partial class GlobalForwardingRulesBase
    {
      /// <summary>
      /// Deletes the specified GlobalForwardingRule resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteGlobalForwardingRuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified GlobalForwardingRule resource. Gets a list of available forwarding rules by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.ForwardingRule> Get(global::Google.Cloud.Compute.V1.GetGlobalForwardingRuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a GlobalForwardingRule resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertGlobalForwardingRuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of GlobalForwardingRule resources available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.ForwardingRuleList> List(global::Google.Cloud.Compute.V1.ListGlobalForwardingRulesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchGlobalForwardingRuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Changes target URL for the GlobalForwardingRule resource. The new target should be of the same type as the old target.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetTarget(global::Google.Cloud.Compute.V1.SetTargetGlobalForwardingRuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GlobalForwardingRules</summary>
    public partial class GlobalForwardingRulesClient : grpc::ClientBase<GlobalForwardingRulesClient>
    {
      /// <summary>Creates a new client for GlobalForwardingRules</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GlobalForwardingRulesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GlobalForwardingRules that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GlobalForwardingRulesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GlobalForwardingRulesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GlobalForwardingRulesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified GlobalForwardingRule resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteGlobalForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified GlobalForwardingRule resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteGlobalForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified GlobalForwardingRule resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteGlobalForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified GlobalForwardingRule resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteGlobalForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified GlobalForwardingRule resource. Gets a list of available forwarding rules by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ForwardingRule Get(global::Google.Cloud.Compute.V1.GetGlobalForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified GlobalForwardingRule resource. Gets a list of available forwarding rules by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ForwardingRule Get(global::Google.Cloud.Compute.V1.GetGlobalForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified GlobalForwardingRule resource. Gets a list of available forwarding rules by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ForwardingRule> GetAsync(global::Google.Cloud.Compute.V1.GetGlobalForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified GlobalForwardingRule resource. Gets a list of available forwarding rules by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ForwardingRule> GetAsync(global::Google.Cloud.Compute.V1.GetGlobalForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a GlobalForwardingRule resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertGlobalForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a GlobalForwardingRule resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertGlobalForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a GlobalForwardingRule resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertGlobalForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a GlobalForwardingRule resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertGlobalForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of GlobalForwardingRule resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ForwardingRuleList List(global::Google.Cloud.Compute.V1.ListGlobalForwardingRulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of GlobalForwardingRule resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ForwardingRuleList List(global::Google.Cloud.Compute.V1.ListGlobalForwardingRulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of GlobalForwardingRule resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ForwardingRuleList> ListAsync(global::Google.Cloud.Compute.V1.ListGlobalForwardingRulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of GlobalForwardingRule resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ForwardingRuleList> ListAsync(global::Google.Cloud.Compute.V1.ListGlobalForwardingRulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchGlobalForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchGlobalForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchGlobalForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchGlobalForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Changes target URL for the GlobalForwardingRule resource. The new target should be of the same type as the old target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetTarget(global::Google.Cloud.Compute.V1.SetTargetGlobalForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTarget(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes target URL for the GlobalForwardingRule resource. The new target should be of the same type as the old target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetTarget(global::Google.Cloud.Compute.V1.SetTargetGlobalForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTarget, null, options, request);
      }
      /// <summary>
      /// Changes target URL for the GlobalForwardingRule resource. The new target should be of the same type as the old target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetTargetAsync(global::Google.Cloud.Compute.V1.SetTargetGlobalForwardingRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTargetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes target URL for the GlobalForwardingRule resource. The new target should be of the same type as the old target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetTargetAsync(global::Google.Cloud.Compute.V1.SetTargetGlobalForwardingRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTarget, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GlobalForwardingRulesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GlobalForwardingRulesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GlobalForwardingRulesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_SetTarget, serviceImpl.SetTarget).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GlobalForwardingRulesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteGlobalForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetGlobalForwardingRuleRequest, global::Google.Cloud.Compute.V1.ForwardingRule>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertGlobalForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListGlobalForwardingRulesRequest, global::Google.Cloud.Compute.V1.ForwardingRuleList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchGlobalForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_SetTarget, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetTargetGlobalForwardingRuleRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetTarget));
    }

  }
  /// <summary>
  /// The GlobalNetworkEndpointGroups API.
  /// </summary>
  public static partial class GlobalNetworkEndpointGroups
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.GlobalNetworkEndpointGroups";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest> __Marshaller_google_cloud_compute_v1_AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteGlobalNetworkEndpointGroupRequest> __Marshaller_google_cloud_compute_v1_DeleteGlobalNetworkEndpointGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteGlobalNetworkEndpointGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest> __Marshaller_google_cloud_compute_v1_DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetGlobalNetworkEndpointGroupRequest> __Marshaller_google_cloud_compute_v1_GetGlobalNetworkEndpointGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetGlobalNetworkEndpointGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NetworkEndpointGroup> __Marshaller_google_cloud_compute_v1_NetworkEndpointGroup = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NetworkEndpointGroup.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertGlobalNetworkEndpointGroupRequest> __Marshaller_google_cloud_compute_v1_InsertGlobalNetworkEndpointGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertGlobalNetworkEndpointGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListGlobalNetworkEndpointGroupsRequest> __Marshaller_google_cloud_compute_v1_ListGlobalNetworkEndpointGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListGlobalNetworkEndpointGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NetworkEndpointGroupList> __Marshaller_google_cloud_compute_v1_NetworkEndpointGroupList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NetworkEndpointGroupList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest> __Marshaller_google_cloud_compute_v1_ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints> __Marshaller_google_cloud_compute_v1_NetworkEndpointGroupsListNetworkEndpoints = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_AttachNetworkEndpoints = new grpc::Method<global::Google.Cloud.Compute.V1.AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AttachNetworkEndpoints",
        __Marshaller_google_cloud_compute_v1_AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteGlobalNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteGlobalNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteGlobalNetworkEndpointGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_DetachNetworkEndpoints = new grpc::Method<global::Google.Cloud.Compute.V1.DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DetachNetworkEndpoints",
        __Marshaller_google_cloud_compute_v1_DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetGlobalNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroup> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetGlobalNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetGlobalNetworkEndpointGroupRequest,
        __Marshaller_google_cloud_compute_v1_NetworkEndpointGroup);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertGlobalNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertGlobalNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertGlobalNetworkEndpointGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListGlobalNetworkEndpointGroupsRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroupList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListGlobalNetworkEndpointGroupsRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroupList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListGlobalNetworkEndpointGroupsRequest,
        __Marshaller_google_cloud_compute_v1_NetworkEndpointGroupList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints> __Method_ListNetworkEndpoints = new grpc::Method<global::Google.Cloud.Compute.V1.ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNetworkEndpoints",
        __Marshaller_google_cloud_compute_v1_ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest,
        __Marshaller_google_cloud_compute_v1_NetworkEndpointGroupsListNetworkEndpoints);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[12]; }
    }

    /// <summary>Base class for server-side implementations of GlobalNetworkEndpointGroups</summary>
    [grpc::BindServiceMethod(typeof(GlobalNetworkEndpointGroups), "BindService")]
    public abstract partial class GlobalNetworkEndpointGroupsBase
    {
      /// <summary>
      /// Attach a network endpoint to the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> AttachNetworkEndpoints(global::Google.Cloud.Compute.V1.AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified network endpoint group.Note that the NEG cannot be deleted if there are backend services referencing it.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteGlobalNetworkEndpointGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Detach the network endpoint from the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> DetachNetworkEndpoints(global::Google.Cloud.Compute.V1.DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NetworkEndpointGroup> Get(global::Google.Cloud.Compute.V1.GetGlobalNetworkEndpointGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a network endpoint group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertGlobalNetworkEndpointGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of network endpoint groups that are located in the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NetworkEndpointGroupList> List(global::Google.Cloud.Compute.V1.ListGlobalNetworkEndpointGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the network endpoints in the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints> ListNetworkEndpoints(global::Google.Cloud.Compute.V1.ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GlobalNetworkEndpointGroups</summary>
    public partial class GlobalNetworkEndpointGroupsClient : grpc::ClientBase<GlobalNetworkEndpointGroupsClient>
    {
      /// <summary>Creates a new client for GlobalNetworkEndpointGroups</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GlobalNetworkEndpointGroupsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GlobalNetworkEndpointGroups that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GlobalNetworkEndpointGroupsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GlobalNetworkEndpointGroupsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GlobalNetworkEndpointGroupsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Attach a network endpoint to the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AttachNetworkEndpoints(global::Google.Cloud.Compute.V1.AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AttachNetworkEndpoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Attach a network endpoint to the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AttachNetworkEndpoints(global::Google.Cloud.Compute.V1.AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AttachNetworkEndpoints, null, options, request);
      }
      /// <summary>
      /// Attach a network endpoint to the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AttachNetworkEndpointsAsync(global::Google.Cloud.Compute.V1.AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AttachNetworkEndpointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Attach a network endpoint to the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AttachNetworkEndpointsAsync(global::Google.Cloud.Compute.V1.AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AttachNetworkEndpoints, null, options, request);
      }
      /// <summary>
      /// Deletes the specified network endpoint group.Note that the NEG cannot be deleted if there are backend services referencing it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteGlobalNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified network endpoint group.Note that the NEG cannot be deleted if there are backend services referencing it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteGlobalNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified network endpoint group.Note that the NEG cannot be deleted if there are backend services referencing it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteGlobalNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified network endpoint group.Note that the NEG cannot be deleted if there are backend services referencing it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteGlobalNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Detach the network endpoint from the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DetachNetworkEndpoints(global::Google.Cloud.Compute.V1.DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DetachNetworkEndpoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Detach the network endpoint from the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DetachNetworkEndpoints(global::Google.Cloud.Compute.V1.DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DetachNetworkEndpoints, null, options, request);
      }
      /// <summary>
      /// Detach the network endpoint from the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DetachNetworkEndpointsAsync(global::Google.Cloud.Compute.V1.DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DetachNetworkEndpointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Detach the network endpoint from the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DetachNetworkEndpointsAsync(global::Google.Cloud.Compute.V1.DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DetachNetworkEndpoints, null, options, request);
      }
      /// <summary>
      /// Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkEndpointGroup Get(global::Google.Cloud.Compute.V1.GetGlobalNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkEndpointGroup Get(global::Google.Cloud.Compute.V1.GetGlobalNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkEndpointGroup> GetAsync(global::Google.Cloud.Compute.V1.GetGlobalNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkEndpointGroup> GetAsync(global::Google.Cloud.Compute.V1.GetGlobalNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a network endpoint group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertGlobalNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a network endpoint group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertGlobalNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a network endpoint group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertGlobalNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a network endpoint group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertGlobalNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of network endpoint groups that are located in the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkEndpointGroupList List(global::Google.Cloud.Compute.V1.ListGlobalNetworkEndpointGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of network endpoint groups that are located in the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkEndpointGroupList List(global::Google.Cloud.Compute.V1.ListGlobalNetworkEndpointGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of network endpoint groups that are located in the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkEndpointGroupList> ListAsync(global::Google.Cloud.Compute.V1.ListGlobalNetworkEndpointGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of network endpoint groups that are located in the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkEndpointGroupList> ListAsync(global::Google.Cloud.Compute.V1.ListGlobalNetworkEndpointGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Lists the network endpoints in the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints ListNetworkEndpoints(global::Google.Cloud.Compute.V1.ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNetworkEndpoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the network endpoints in the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints ListNetworkEndpoints(global::Google.Cloud.Compute.V1.ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNetworkEndpoints, null, options, request);
      }
      /// <summary>
      /// Lists the network endpoints in the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints> ListNetworkEndpointsAsync(global::Google.Cloud.Compute.V1.ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNetworkEndpointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the network endpoints in the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints> ListNetworkEndpointsAsync(global::Google.Cloud.Compute.V1.ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNetworkEndpoints, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GlobalNetworkEndpointGroupsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GlobalNetworkEndpointGroupsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GlobalNetworkEndpointGroupsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AttachNetworkEndpoints, serviceImpl.AttachNetworkEndpoints)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_DetachNetworkEndpoints, serviceImpl.DetachNetworkEndpoints)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_ListNetworkEndpoints, serviceImpl.ListNetworkEndpoints).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GlobalNetworkEndpointGroupsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AttachNetworkEndpoints, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.AttachNetworkEndpoints));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteGlobalNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_DetachNetworkEndpoints, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.DetachNetworkEndpoints));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetGlobalNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroup>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertGlobalNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListGlobalNetworkEndpointGroupsRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroupList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_ListNetworkEndpoints, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints>(serviceImpl.ListNetworkEndpoints));
    }

  }
  /// <summary>
  /// The GlobalOperations API.
  /// </summary>
  public static partial class GlobalOperations
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.GlobalOperations";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListGlobalOperationsRequest> __Marshaller_google_cloud_compute_v1_AggregatedListGlobalOperationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListGlobalOperationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.OperationAggregatedList> __Marshaller_google_cloud_compute_v1_OperationAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.OperationAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteGlobalOperationRequest> __Marshaller_google_cloud_compute_v1_DeleteGlobalOperationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteGlobalOperationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteGlobalOperationResponse> __Marshaller_google_cloud_compute_v1_DeleteGlobalOperationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteGlobalOperationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetGlobalOperationRequest> __Marshaller_google_cloud_compute_v1_GetGlobalOperationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetGlobalOperationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListGlobalOperationsRequest> __Marshaller_google_cloud_compute_v1_ListGlobalOperationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListGlobalOperationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.OperationList> __Marshaller_google_cloud_compute_v1_OperationList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.OperationList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.WaitGlobalOperationRequest> __Marshaller_google_cloud_compute_v1_WaitGlobalOperationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.WaitGlobalOperationRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListGlobalOperationsRequest, global::Google.Cloud.Compute.V1.OperationAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListGlobalOperationsRequest, global::Google.Cloud.Compute.V1.OperationAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListGlobalOperationsRequest,
        __Marshaller_google_cloud_compute_v1_OperationAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteGlobalOperationRequest, global::Google.Cloud.Compute.V1.DeleteGlobalOperationResponse> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteGlobalOperationRequest, global::Google.Cloud.Compute.V1.DeleteGlobalOperationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteGlobalOperationRequest,
        __Marshaller_google_cloud_compute_v1_DeleteGlobalOperationResponse);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetGlobalOperationRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetGlobalOperationRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetGlobalOperationRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListGlobalOperationsRequest, global::Google.Cloud.Compute.V1.OperationList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListGlobalOperationsRequest, global::Google.Cloud.Compute.V1.OperationList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListGlobalOperationsRequest,
        __Marshaller_google_cloud_compute_v1_OperationList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.WaitGlobalOperationRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Wait = new grpc::Method<global::Google.Cloud.Compute.V1.WaitGlobalOperationRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Wait",
        __Marshaller_google_cloud_compute_v1_WaitGlobalOperationRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[13]; }
    }

    /// <summary>Base class for server-side implementations of GlobalOperations</summary>
    [grpc::BindServiceMethod(typeof(GlobalOperations), "BindService")]
    public abstract partial class GlobalOperationsBase
    {
      /// <summary>
      /// Retrieves an aggregated list of all operations.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.OperationAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListGlobalOperationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified Operations resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.DeleteGlobalOperationResponse> Delete(global::Google.Cloud.Compute.V1.DeleteGlobalOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the specified Operations resource. Gets a list of operations by making a `list()` request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Get(global::Google.Cloud.Compute.V1.GetGlobalOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.OperationList> List(global::Google.Cloud.Compute.V1.ListGlobalOperationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
      ///
      /// This method is called on a best-effort basis. Specifically:
      /// - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
      /// - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Wait(global::Google.Cloud.Compute.V1.WaitGlobalOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GlobalOperations</summary>
    public partial class GlobalOperationsClient : grpc::ClientBase<GlobalOperationsClient>
    {
      /// <summary>Creates a new client for GlobalOperations</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GlobalOperationsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GlobalOperations that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GlobalOperationsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GlobalOperationsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GlobalOperationsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of all operations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.OperationAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListGlobalOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of all operations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.OperationAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListGlobalOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of all operations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.OperationAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListGlobalOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of all operations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.OperationAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListGlobalOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DeleteGlobalOperationResponse Delete(global::Google.Cloud.Compute.V1.DeleteGlobalOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DeleteGlobalOperationResponse Delete(global::Google.Cloud.Compute.V1.DeleteGlobalOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DeleteGlobalOperationResponse> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteGlobalOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DeleteGlobalOperationResponse> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteGlobalOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Retrieves the specified Operations resource. Gets a list of operations by making a `list()` request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Get(global::Google.Cloud.Compute.V1.GetGlobalOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the specified Operations resource. Gets a list of operations by making a `list()` request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Get(global::Google.Cloud.Compute.V1.GetGlobalOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves the specified Operations resource. Gets a list of operations by making a `list()` request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> GetAsync(global::Google.Cloud.Compute.V1.GetGlobalOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the specified Operations resource. Gets a list of operations by making a `list()` request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> GetAsync(global::Google.Cloud.Compute.V1.GetGlobalOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.OperationList List(global::Google.Cloud.Compute.V1.ListGlobalOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.OperationList List(global::Google.Cloud.Compute.V1.ListGlobalOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.OperationList> ListAsync(global::Google.Cloud.Compute.V1.ListGlobalOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.OperationList> ListAsync(global::Google.Cloud.Compute.V1.ListGlobalOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
      ///
      /// This method is called on a best-effort basis. Specifically:
      /// - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
      /// - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Wait(global::Google.Cloud.Compute.V1.WaitGlobalOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Wait(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
      ///
      /// This method is called on a best-effort basis. Specifically:
      /// - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
      /// - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Wait(global::Google.Cloud.Compute.V1.WaitGlobalOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Wait, null, options, request);
      }
      /// <summary>
      /// Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
      ///
      /// This method is called on a best-effort basis. Specifically:
      /// - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
      /// - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> WaitAsync(global::Google.Cloud.Compute.V1.WaitGlobalOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WaitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
      ///
      /// This method is called on a best-effort basis. Specifically:
      /// - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
      /// - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> WaitAsync(global::Google.Cloud.Compute.V1.WaitGlobalOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Wait, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GlobalOperationsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GlobalOperationsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GlobalOperationsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Wait, serviceImpl.Wait).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GlobalOperationsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListGlobalOperationsRequest, global::Google.Cloud.Compute.V1.OperationAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteGlobalOperationRequest, global::Google.Cloud.Compute.V1.DeleteGlobalOperationResponse>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetGlobalOperationRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListGlobalOperationsRequest, global::Google.Cloud.Compute.V1.OperationList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Wait, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.WaitGlobalOperationRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Wait));
    }

  }
  /// <summary>
  /// The GlobalOrganizationOperations API.
  /// </summary>
  public static partial class GlobalOrganizationOperations
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.GlobalOrganizationOperations";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationRequest> __Marshaller_google_cloud_compute_v1_DeleteGlobalOrganizationOperationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationResponse> __Marshaller_google_cloud_compute_v1_DeleteGlobalOrganizationOperationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetGlobalOrganizationOperationRequest> __Marshaller_google_cloud_compute_v1_GetGlobalOrganizationOperationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetGlobalOrganizationOperationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListGlobalOrganizationOperationsRequest> __Marshaller_google_cloud_compute_v1_ListGlobalOrganizationOperationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListGlobalOrganizationOperationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.OperationList> __Marshaller_google_cloud_compute_v1_OperationList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.OperationList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationRequest, global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationResponse> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationRequest, global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteGlobalOrganizationOperationRequest,
        __Marshaller_google_cloud_compute_v1_DeleteGlobalOrganizationOperationResponse);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetGlobalOrganizationOperationRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetGlobalOrganizationOperationRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetGlobalOrganizationOperationRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListGlobalOrganizationOperationsRequest, global::Google.Cloud.Compute.V1.OperationList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListGlobalOrganizationOperationsRequest, global::Google.Cloud.Compute.V1.OperationList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListGlobalOrganizationOperationsRequest,
        __Marshaller_google_cloud_compute_v1_OperationList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[14]; }
    }

    /// <summary>Base class for server-side implementations of GlobalOrganizationOperations</summary>
    [grpc::BindServiceMethod(typeof(GlobalOrganizationOperations), "BindService")]
    public abstract partial class GlobalOrganizationOperationsBase
    {
      /// <summary>
      /// Deletes the specified Operations resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationResponse> Delete(global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the specified Operations resource. Gets a list of operations by making a `list()` request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Get(global::Google.Cloud.Compute.V1.GetGlobalOrganizationOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified organization.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.OperationList> List(global::Google.Cloud.Compute.V1.ListGlobalOrganizationOperationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GlobalOrganizationOperations</summary>
    public partial class GlobalOrganizationOperationsClient : grpc::ClientBase<GlobalOrganizationOperationsClient>
    {
      /// <summary>Creates a new client for GlobalOrganizationOperations</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GlobalOrganizationOperationsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GlobalOrganizationOperations that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GlobalOrganizationOperationsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GlobalOrganizationOperationsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GlobalOrganizationOperationsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationResponse Delete(global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationResponse Delete(global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationResponse> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationResponse> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Retrieves the specified Operations resource. Gets a list of operations by making a `list()` request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Get(global::Google.Cloud.Compute.V1.GetGlobalOrganizationOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the specified Operations resource. Gets a list of operations by making a `list()` request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Get(global::Google.Cloud.Compute.V1.GetGlobalOrganizationOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves the specified Operations resource. Gets a list of operations by making a `list()` request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> GetAsync(global::Google.Cloud.Compute.V1.GetGlobalOrganizationOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the specified Operations resource. Gets a list of operations by making a `list()` request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> GetAsync(global::Google.Cloud.Compute.V1.GetGlobalOrganizationOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.OperationList List(global::Google.Cloud.Compute.V1.ListGlobalOrganizationOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.OperationList List(global::Google.Cloud.Compute.V1.ListGlobalOrganizationOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.OperationList> ListAsync(global::Google.Cloud.Compute.V1.ListGlobalOrganizationOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.OperationList> ListAsync(global::Google.Cloud.Compute.V1.ListGlobalOrganizationOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GlobalOrganizationOperationsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GlobalOrganizationOperationsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GlobalOrganizationOperationsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GlobalOrganizationOperationsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationRequest, global::Google.Cloud.Compute.V1.DeleteGlobalOrganizationOperationResponse>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetGlobalOrganizationOperationRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListGlobalOrganizationOperationsRequest, global::Google.Cloud.Compute.V1.OperationList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The HealthChecks API.
  /// </summary>
  public static partial class HealthChecks
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.HealthChecks";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListHealthChecksRequest> __Marshaller_google_cloud_compute_v1_AggregatedListHealthChecksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListHealthChecksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.HealthChecksAggregatedList> __Marshaller_google_cloud_compute_v1_HealthChecksAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.HealthChecksAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteHealthCheckRequest> __Marshaller_google_cloud_compute_v1_DeleteHealthCheckRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteHealthCheckRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetHealthCheckRequest> __Marshaller_google_cloud_compute_v1_GetHealthCheckRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetHealthCheckRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.HealthCheck> __Marshaller_google_cloud_compute_v1_HealthCheck = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.HealthCheck.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertHealthCheckRequest> __Marshaller_google_cloud_compute_v1_InsertHealthCheckRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertHealthCheckRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListHealthChecksRequest> __Marshaller_google_cloud_compute_v1_ListHealthChecksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListHealthChecksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.HealthCheckList> __Marshaller_google_cloud_compute_v1_HealthCheckList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.HealthCheckList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchHealthCheckRequest> __Marshaller_google_cloud_compute_v1_PatchHealthCheckRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchHealthCheckRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdateHealthCheckRequest> __Marshaller_google_cloud_compute_v1_UpdateHealthCheckRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdateHealthCheckRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListHealthChecksRequest, global::Google.Cloud.Compute.V1.HealthChecksAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListHealthChecksRequest, global::Google.Cloud.Compute.V1.HealthChecksAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListHealthChecksRequest,
        __Marshaller_google_cloud_compute_v1_HealthChecksAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteHealthCheckRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetHealthCheckRequest, global::Google.Cloud.Compute.V1.HealthCheck> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetHealthCheckRequest, global::Google.Cloud.Compute.V1.HealthCheck>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetHealthCheckRequest,
        __Marshaller_google_cloud_compute_v1_HealthCheck);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertHealthCheckRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListHealthChecksRequest, global::Google.Cloud.Compute.V1.HealthCheckList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListHealthChecksRequest, global::Google.Cloud.Compute.V1.HealthCheckList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListHealthChecksRequest,
        __Marshaller_google_cloud_compute_v1_HealthCheckList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchHealthCheckRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdateHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Update = new grpc::Method<global::Google.Cloud.Compute.V1.UpdateHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_google_cloud_compute_v1_UpdateHealthCheckRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[15]; }
    }

    /// <summary>Base class for server-side implementations of HealthChecks</summary>
    [grpc::BindServiceMethod(typeof(HealthChecks), "BindService")]
    public abstract partial class HealthChecksBase
    {
      /// <summary>
      /// Retrieves the list of all HealthCheck resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.HealthChecksAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListHealthChecksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified HealthCheck resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteHealthCheckRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.HealthCheck> Get(global::Google.Cloud.Compute.V1.GetHealthCheckRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertHealthCheckRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of HealthCheck resources available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.HealthCheckList> List(global::Google.Cloud.Compute.V1.ListHealthChecksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchHealthCheckRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Update(global::Google.Cloud.Compute.V1.UpdateHealthCheckRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for HealthChecks</summary>
    public partial class HealthChecksClient : grpc::ClientBase<HealthChecksClient>
    {
      /// <summary>Creates a new client for HealthChecks</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public HealthChecksClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for HealthChecks that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public HealthChecksClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected HealthChecksClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected HealthChecksClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves the list of all HealthCheck resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.HealthChecksAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListHealthChecksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of all HealthCheck resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.HealthChecksAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListHealthChecksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of all HealthCheck resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.HealthChecksAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListHealthChecksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of all HealthCheck resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.HealthChecksAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListHealthChecksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified HealthCheck resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified HealthCheck resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified HealthCheck resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified HealthCheck resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.HealthCheck Get(global::Google.Cloud.Compute.V1.GetHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.HealthCheck Get(global::Google.Cloud.Compute.V1.GetHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.HealthCheck> GetAsync(global::Google.Cloud.Compute.V1.GetHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.HealthCheck> GetAsync(global::Google.Cloud.Compute.V1.GetHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of HealthCheck resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.HealthCheckList List(global::Google.Cloud.Compute.V1.ListHealthChecksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of HealthCheck resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.HealthCheckList List(global::Google.Cloud.Compute.V1.ListHealthChecksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of HealthCheck resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.HealthCheckList> ListAsync(global::Google.Cloud.Compute.V1.ListHealthChecksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of HealthCheck resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.HealthCheckList> ListAsync(global::Google.Cloud.Compute.V1.ListHealthChecksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override HealthChecksClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new HealthChecksClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(HealthChecksBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_Update, serviceImpl.Update).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, HealthChecksBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListHealthChecksRequest, global::Google.Cloud.Compute.V1.HealthChecksAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetHealthCheckRequest, global::Google.Cloud.Compute.V1.HealthCheck>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListHealthChecksRequest, global::Google.Cloud.Compute.V1.HealthCheckList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdateHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Update));
    }

  }
  /// <summary>
  /// The Images API.
  /// </summary>
  public static partial class Images
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.Images";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteImageRequest> __Marshaller_google_cloud_compute_v1_DeleteImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeprecateImageRequest> __Marshaller_google_cloud_compute_v1_DeprecateImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeprecateImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetImageRequest> __Marshaller_google_cloud_compute_v1_GetImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Image> __Marshaller_google_cloud_compute_v1_Image = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Image.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetFromFamilyImageRequest> __Marshaller_google_cloud_compute_v1_GetFromFamilyImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetFromFamilyImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetIamPolicyImageRequest> __Marshaller_google_cloud_compute_v1_GetIamPolicyImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetIamPolicyImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Policy> __Marshaller_google_cloud_compute_v1_Policy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Policy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertImageRequest> __Marshaller_google_cloud_compute_v1_InsertImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListImagesRequest> __Marshaller_google_cloud_compute_v1_ListImagesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListImagesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ImageList> __Marshaller_google_cloud_compute_v1_ImageList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ImageList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchImageRequest> __Marshaller_google_cloud_compute_v1_PatchImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetIamPolicyImageRequest> __Marshaller_google_cloud_compute_v1_SetIamPolicyImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetIamPolicyImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetLabelsImageRequest> __Marshaller_google_cloud_compute_v1_SetLabelsImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetLabelsImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestIamPermissionsImageRequest> __Marshaller_google_cloud_compute_v1_TestIamPermissionsImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestIamPermissionsImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Marshaller_google_cloud_compute_v1_TestPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestPermissionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteImageRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteImageRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteImageRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeprecateImageRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Deprecate = new grpc::Method<global::Google.Cloud.Compute.V1.DeprecateImageRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Deprecate",
        __Marshaller_google_cloud_compute_v1_DeprecateImageRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetImageRequest, global::Google.Cloud.Compute.V1.Image> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetImageRequest, global::Google.Cloud.Compute.V1.Image>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetImageRequest,
        __Marshaller_google_cloud_compute_v1_Image);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetFromFamilyImageRequest, global::Google.Cloud.Compute.V1.Image> __Method_GetFromFamily = new grpc::Method<global::Google.Cloud.Compute.V1.GetFromFamilyImageRequest, global::Google.Cloud.Compute.V1.Image>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFromFamily",
        __Marshaller_google_cloud_compute_v1_GetFromFamilyImageRequest,
        __Marshaller_google_cloud_compute_v1_Image);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyImageRequest, global::Google.Cloud.Compute.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyImageRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_cloud_compute_v1_GetIamPolicyImageRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertImageRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertImageRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertImageRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListImagesRequest, global::Google.Cloud.Compute.V1.ImageList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListImagesRequest, global::Google.Cloud.Compute.V1.ImageList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListImagesRequest,
        __Marshaller_google_cloud_compute_v1_ImageList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchImageRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchImageRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchImageRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyImageRequest, global::Google.Cloud.Compute.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyImageRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_cloud_compute_v1_SetIamPolicyImageRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetLabelsImageRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetLabels = new grpc::Method<global::Google.Cloud.Compute.V1.SetLabelsImageRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetLabels",
        __Marshaller_google_cloud_compute_v1_SetLabelsImageRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsImageRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsImageRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_cloud_compute_v1_TestIamPermissionsImageRequest,
        __Marshaller_google_cloud_compute_v1_TestPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[16]; }
    }

    /// <summary>Base class for server-side implementations of Images</summary>
    [grpc::BindServiceMethod(typeof(Images), "BindService")]
    public abstract partial class ImagesBase
    {
      /// <summary>
      /// Deletes the specified image.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the deprecation status of an image.
      ///
      /// If an empty request body is given, clears the deprecation status instead.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Deprecate(global::Google.Cloud.Compute.V1.DeprecateImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified image. Gets a list of available images by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Image> Get(global::Google.Cloud.Compute.V1.GetImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the latest image that is part of an image family and is not deprecated.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Image> GetFromFamily(global::Google.Cloud.Compute.V1.GetFromFamilyImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates an image in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of custom images available to the specified project. Custom images are images you create that belong to your project. This method does not get any images that belong to other projects, including publicly-available images, like Debian 8. If you want to get a list of publicly-available images, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.ImageList> List(global::Google.Cloud.Compute.V1.ListImagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patches the specified image with the data included in the request. Only the following fields can be modified: family, description, deprecation status.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the labels on an image. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetLabels(global::Google.Cloud.Compute.V1.SetLabelsImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Images</summary>
    public partial class ImagesClient : grpc::ClientBase<ImagesClient>
    {
      /// <summary>Creates a new client for Images</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ImagesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Images that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ImagesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ImagesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ImagesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Sets the deprecation status of an image.
      ///
      /// If an empty request body is given, clears the deprecation status instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Deprecate(global::Google.Cloud.Compute.V1.DeprecateImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Deprecate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the deprecation status of an image.
      ///
      /// If an empty request body is given, clears the deprecation status instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Deprecate(global::Google.Cloud.Compute.V1.DeprecateImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Deprecate, null, options, request);
      }
      /// <summary>
      /// Sets the deprecation status of an image.
      ///
      /// If an empty request body is given, clears the deprecation status instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeprecateAsync(global::Google.Cloud.Compute.V1.DeprecateImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeprecateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the deprecation status of an image.
      ///
      /// If an empty request body is given, clears the deprecation status instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeprecateAsync(global::Google.Cloud.Compute.V1.DeprecateImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Deprecate, null, options, request);
      }
      /// <summary>
      /// Returns the specified image. Gets a list of available images by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Image Get(global::Google.Cloud.Compute.V1.GetImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified image. Gets a list of available images by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Image Get(global::Google.Cloud.Compute.V1.GetImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified image. Gets a list of available images by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Image> GetAsync(global::Google.Cloud.Compute.V1.GetImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified image. Gets a list of available images by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Image> GetAsync(global::Google.Cloud.Compute.V1.GetImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the latest image that is part of an image family and is not deprecated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Image GetFromFamily(global::Google.Cloud.Compute.V1.GetFromFamilyImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFromFamily(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the latest image that is part of an image family and is not deprecated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Image GetFromFamily(global::Google.Cloud.Compute.V1.GetFromFamilyImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFromFamily, null, options, request);
      }
      /// <summary>
      /// Returns the latest image that is part of an image family and is not deprecated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Image> GetFromFamilyAsync(global::Google.Cloud.Compute.V1.GetFromFamilyImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFromFamilyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the latest image that is part of an image family and is not deprecated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Image> GetFromFamilyAsync(global::Google.Cloud.Compute.V1.GetFromFamilyImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFromFamily, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Creates an image in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an image in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates an image in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an image in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of custom images available to the specified project. Custom images are images you create that belong to your project. This method does not get any images that belong to other projects, including publicly-available images, like Debian 8. If you want to get a list of publicly-available images, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ImageList List(global::Google.Cloud.Compute.V1.ListImagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of custom images available to the specified project. Custom images are images you create that belong to your project. This method does not get any images that belong to other projects, including publicly-available images, like Debian 8. If you want to get a list of publicly-available images, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ImageList List(global::Google.Cloud.Compute.V1.ListImagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of custom images available to the specified project. Custom images are images you create that belong to your project. This method does not get any images that belong to other projects, including publicly-available images, like Debian 8. If you want to get a list of publicly-available images, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ImageList> ListAsync(global::Google.Cloud.Compute.V1.ListImagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of custom images available to the specified project. Custom images are images you create that belong to your project. This method does not get any images that belong to other projects, including publicly-available images, like Debian 8. If you want to get a list of publicly-available images, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ImageList> ListAsync(global::Google.Cloud.Compute.V1.ListImagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Patches the specified image with the data included in the request. Only the following fields can be modified: family, description, deprecation status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified image with the data included in the request. Only the following fields can be modified: family, description, deprecation status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Patches the specified image with the data included in the request. Only the following fields can be modified: family, description, deprecation status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified image with the data included in the request. Only the following fields can be modified: family, description, deprecation status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the labels on an image. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetLabels(global::Google.Cloud.Compute.V1.SetLabelsImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLabels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the labels on an image. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetLabels(global::Google.Cloud.Compute.V1.SetLabelsImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetLabels, null, options, request);
      }
      /// <summary>
      /// Sets the labels on an image. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetLabelsAsync(global::Google.Cloud.Compute.V1.SetLabelsImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLabelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the labels on an image. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetLabelsAsync(global::Google.Cloud.Compute.V1.SetLabelsImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetLabels, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ImagesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ImagesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ImagesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Deprecate, serviceImpl.Deprecate)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetFromFamily, serviceImpl.GetFromFamily)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_SetLabels, serviceImpl.SetLabels)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ImagesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteImageRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Deprecate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeprecateImageRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Deprecate));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetImageRequest, global::Google.Cloud.Compute.V1.Image>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetFromFamily, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetFromFamilyImageRequest, global::Google.Cloud.Compute.V1.Image>(serviceImpl.GetFromFamily));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetIamPolicyImageRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertImageRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListImagesRequest, global::Google.Cloud.Compute.V1.ImageList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchImageRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetIamPolicyImageRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_SetLabels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetLabelsImageRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetLabels));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.TestIamPermissionsImageRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
  /// <summary>
  /// The InstanceGroupManagers API.
  /// </summary>
  public static partial class InstanceGroupManagers
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.InstanceGroupManagers";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AbandonInstancesInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_AbandonInstancesInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AbandonInstancesInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupManagersRequest> __Marshaller_google_cloud_compute_v1_AggregatedListInstanceGroupManagersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupManagersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InstanceGroupManagerAggregatedList> __Marshaller_google_cloud_compute_v1_InstanceGroupManagerAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InstanceGroupManagerAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_ApplyUpdatesToInstancesInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.CreateInstancesInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_CreateInstancesInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.CreateInstancesInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_DeleteInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteInstancesInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_DeleteInstancesInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteInstancesInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_DeletePerInstanceConfigsInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_GetInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InstanceGroupManager> __Marshaller_google_cloud_compute_v1_InstanceGroupManager = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InstanceGroupManager.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_InsertInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListInstanceGroupManagersRequest> __Marshaller_google_cloud_compute_v1_ListInstanceGroupManagersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListInstanceGroupManagersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InstanceGroupManagerList> __Marshaller_google_cloud_compute_v1_InstanceGroupManagerList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InstanceGroupManagerList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListErrorsInstanceGroupManagersRequest> __Marshaller_google_cloud_compute_v1_ListErrorsInstanceGroupManagersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListErrorsInstanceGroupManagersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InstanceGroupManagersListErrorsResponse> __Marshaller_google_cloud_compute_v1_InstanceGroupManagersListErrorsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InstanceGroupManagersListErrorsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListManagedInstancesInstanceGroupManagersRequest> __Marshaller_google_cloud_compute_v1_ListManagedInstancesInstanceGroupManagersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListManagedInstancesInstanceGroupManagersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InstanceGroupManagersListManagedInstancesResponse> __Marshaller_google_cloud_compute_v1_InstanceGroupManagersListManagedInstancesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InstanceGroupManagersListManagedInstancesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListPerInstanceConfigsInstanceGroupManagersRequest> __Marshaller_google_cloud_compute_v1_ListPerInstanceConfigsInstanceGroupManagersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListPerInstanceConfigsInstanceGroupManagersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InstanceGroupManagersListPerInstanceConfigsResp> __Marshaller_google_cloud_compute_v1_InstanceGroupManagersListPerInstanceConfigsResp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InstanceGroupManagersListPerInstanceConfigsResp.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_PatchInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_PatchPerInstanceConfigsInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RecreateInstancesInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_RecreateInstancesInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RecreateInstancesInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ResizeInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_ResizeInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ResizeInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetInstanceTemplateInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_SetInstanceTemplateInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetInstanceTemplateInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetTargetPoolsInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_SetTargetPoolsInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetTargetPoolsInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_UpdatePerInstanceConfigsInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsInstanceGroupManagerRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AbandonInstancesInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_AbandonInstances = new grpc::Method<global::Google.Cloud.Compute.V1.AbandonInstancesInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AbandonInstances",
        __Marshaller_google_cloud_compute_v1_AbandonInstancesInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.InstanceGroupManagerAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.InstanceGroupManagerAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListInstanceGroupManagersRequest,
        __Marshaller_google_cloud_compute_v1_InstanceGroupManagerAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_ApplyUpdatesToInstances = new grpc::Method<global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ApplyUpdatesToInstances",
        __Marshaller_google_cloud_compute_v1_ApplyUpdatesToInstancesInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.CreateInstancesInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_CreateInstances = new grpc::Method<global::Google.Cloud.Compute.V1.CreateInstancesInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateInstances",
        __Marshaller_google_cloud_compute_v1_CreateInstancesInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteInstancesInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_DeleteInstances = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteInstancesInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteInstances",
        __Marshaller_google_cloud_compute_v1_DeleteInstancesInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_DeletePerInstanceConfigs = new grpc::Method<global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePerInstanceConfigs",
        __Marshaller_google_cloud_compute_v1_DeletePerInstanceConfigsInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.InstanceGroupManager> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.InstanceGroupManager>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_InstanceGroupManager);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.InstanceGroupManagerList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.InstanceGroupManagerList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListInstanceGroupManagersRequest,
        __Marshaller_google_cloud_compute_v1_InstanceGroupManagerList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListErrorsInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.InstanceGroupManagersListErrorsResponse> __Method_ListErrors = new grpc::Method<global::Google.Cloud.Compute.V1.ListErrorsInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.InstanceGroupManagersListErrorsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListErrors",
        __Marshaller_google_cloud_compute_v1_ListErrorsInstanceGroupManagersRequest,
        __Marshaller_google_cloud_compute_v1_InstanceGroupManagersListErrorsResponse);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListManagedInstancesInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.InstanceGroupManagersListManagedInstancesResponse> __Method_ListManagedInstances = new grpc::Method<global::Google.Cloud.Compute.V1.ListManagedInstancesInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.InstanceGroupManagersListManagedInstancesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListManagedInstances",
        __Marshaller_google_cloud_compute_v1_ListManagedInstancesInstanceGroupManagersRequest,
        __Marshaller_google_cloud_compute_v1_InstanceGroupManagersListManagedInstancesResponse);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListPerInstanceConfigsInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.InstanceGroupManagersListPerInstanceConfigsResp> __Method_ListPerInstanceConfigs = new grpc::Method<global::Google.Cloud.Compute.V1.ListPerInstanceConfigsInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.InstanceGroupManagersListPerInstanceConfigsResp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPerInstanceConfigs",
        __Marshaller_google_cloud_compute_v1_ListPerInstanceConfigsInstanceGroupManagersRequest,
        __Marshaller_google_cloud_compute_v1_InstanceGroupManagersListPerInstanceConfigsResp);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_PatchPerInstanceConfigs = new grpc::Method<global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchPerInstanceConfigs",
        __Marshaller_google_cloud_compute_v1_PatchPerInstanceConfigsInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.RecreateInstancesInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_RecreateInstances = new grpc::Method<global::Google.Cloud.Compute.V1.RecreateInstancesInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RecreateInstances",
        __Marshaller_google_cloud_compute_v1_RecreateInstancesInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ResizeInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Resize = new grpc::Method<global::Google.Cloud.Compute.V1.ResizeInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Resize",
        __Marshaller_google_cloud_compute_v1_ResizeInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetInstanceTemplateInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetInstanceTemplate = new grpc::Method<global::Google.Cloud.Compute.V1.SetInstanceTemplateInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetInstanceTemplate",
        __Marshaller_google_cloud_compute_v1_SetInstanceTemplateInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetTargetPoolsInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetTargetPools = new grpc::Method<global::Google.Cloud.Compute.V1.SetTargetPoolsInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTargetPools",
        __Marshaller_google_cloud_compute_v1_SetTargetPoolsInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_UpdatePerInstanceConfigs = new grpc::Method<global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePerInstanceConfigs",
        __Marshaller_google_cloud_compute_v1_UpdatePerInstanceConfigsInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[17]; }
    }

    /// <summary>Base class for server-side implementations of InstanceGroupManagers</summary>
    [grpc::BindServiceMethod(typeof(InstanceGroupManagers), "BindService")]
    public abstract partial class InstanceGroupManagersBase
    {
      /// <summary>
      /// Flags the specified instances to be removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> AbandonInstances(global::Google.Cloud.Compute.V1.AbandonInstancesInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of managed instance groups and groups them by zone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InstanceGroupManagerAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupManagersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Applies changes to selected instances on the managed instance group. This method can be used to apply new overrides and/or new versions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> ApplyUpdatesToInstances(global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates instances with per-instance configs in this managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> CreateInstances(global::Google.Cloud.Compute.V1.CreateInstancesInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified managed instance group and all of the instances in that group. Note that the instance group must not belong to a backend service. Read  Deleting an instance group for more information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Flags the specified instances in the managed instance group for immediate deletion. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. This operation is marked as DONE when the action is scheduled even if the instances are still being deleted. You must separately verify the status of the deleting action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> DeleteInstances(global::Google.Cloud.Compute.V1.DeleteInstancesInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes selected per-instance configs for the managed instance group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> DeletePerInstanceConfigs(global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns all of the details about the specified managed instance group. Gets a list of available managed instance groups by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InstanceGroupManager> Get(global::Google.Cloud.Compute.V1.GetInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method.
      ///
      /// A managed instance group can have up to 1000 VM instances per group. Please contact Cloud Support if you need an increase in this limit.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of managed instance groups that are contained within the specified project and zone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InstanceGroupManagerList> List(global::Google.Cloud.Compute.V1.ListInstanceGroupManagersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all errors thrown by actions on instances for a given managed instance group. The filter and orderBy query parameters are not supported.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InstanceGroupManagersListErrorsResponse> ListErrors(global::Google.Cloud.Compute.V1.ListErrorsInstanceGroupManagersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all of the instances in the managed instance group. Each instance in the list has a currentAction, which indicates the action that the managed instance group is performing on the instance. For example, if the group is still creating an instance, the currentAction is CREATING. If a previous action failed, the list displays the errors for that failed action. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InstanceGroupManagersListManagedInstancesResponse> ListManagedInstances(global::Google.Cloud.Compute.V1.ListManagedInstancesInstanceGroupManagersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all of the per-instance configs defined for the managed instance group. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InstanceGroupManagersListPerInstanceConfigsResp> ListPerInstanceConfigs(global::Google.Cloud.Compute.V1.ListPerInstanceConfigsInstanceGroupManagersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listManagedInstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Inserts or patches per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> PatchPerInstanceConfigs(global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Flags the specified instances in the managed instance group to be immediately recreated. The instances are deleted and recreated using the current instance template for the managed instance group. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of the recreating action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> RecreateInstances(global::Google.Cloud.Compute.V1.RecreateInstancesInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Resizes the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes instances. The resize operation is marked DONE when the resize actions are scheduled even if the group has not yet added or deleted any instances. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method.
      ///
      /// When resizing down, the instance group arbitrarily chooses the order in which VMs are deleted. The group takes into account some VM attributes when making the selection including:
      ///
      /// + The status of the VM instance. + The health of the VM instance. + The instance template version the VM is based on. + For regional managed instance groups, the location of the VM instance.
      ///
      /// This list is subject to change.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Resize(global::Google.Cloud.Compute.V1.ResizeInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Specifies the instance template to use when creating new instances in this group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetInstanceTemplate(global::Google.Cloud.Compute.V1.SetInstanceTemplateInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Modifies the target pools to which all instances in this managed instance group are assigned. The target pools automatically apply to all of the instances in the managed instance group. This operation is marked DONE when you make the request even if the instances have not yet been added to their target pools. The change might take some time to apply to all of the instances in the group depending on the size of the group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetTargetPools(global::Google.Cloud.Compute.V1.SetTargetPoolsInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Inserts or updates per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> UpdatePerInstanceConfigs(global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for InstanceGroupManagers</summary>
    public partial class InstanceGroupManagersClient : grpc::ClientBase<InstanceGroupManagersClient>
    {
      /// <summary>Creates a new client for InstanceGroupManagers</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public InstanceGroupManagersClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for InstanceGroupManagers that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public InstanceGroupManagersClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected InstanceGroupManagersClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected InstanceGroupManagersClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Flags the specified instances to be removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AbandonInstances(global::Google.Cloud.Compute.V1.AbandonInstancesInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AbandonInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Flags the specified instances to be removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AbandonInstances(global::Google.Cloud.Compute.V1.AbandonInstancesInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AbandonInstances, null, options, request);
      }
      /// <summary>
      /// Flags the specified instances to be removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AbandonInstancesAsync(global::Google.Cloud.Compute.V1.AbandonInstancesInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AbandonInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Flags the specified instances to be removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AbandonInstancesAsync(global::Google.Cloud.Compute.V1.AbandonInstancesInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AbandonInstances, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of managed instance groups and groups them by zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupManagerAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupManagersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of managed instance groups and groups them by zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupManagerAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupManagersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of managed instance groups and groups them by zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupManagerAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupManagersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of managed instance groups and groups them by zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupManagerAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupManagersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Applies changes to selected instances on the managed instance group. This method can be used to apply new overrides and/or new versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation ApplyUpdatesToInstances(global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ApplyUpdatesToInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Applies changes to selected instances on the managed instance group. This method can be used to apply new overrides and/or new versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation ApplyUpdatesToInstances(global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ApplyUpdatesToInstances, null, options, request);
      }
      /// <summary>
      /// Applies changes to selected instances on the managed instance group. This method can be used to apply new overrides and/or new versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> ApplyUpdatesToInstancesAsync(global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ApplyUpdatesToInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Applies changes to selected instances on the managed instance group. This method can be used to apply new overrides and/or new versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> ApplyUpdatesToInstancesAsync(global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ApplyUpdatesToInstances, null, options, request);
      }
      /// <summary>
      /// Creates instances with per-instance configs in this managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation CreateInstances(global::Google.Cloud.Compute.V1.CreateInstancesInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates instances with per-instance configs in this managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation CreateInstances(global::Google.Cloud.Compute.V1.CreateInstancesInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateInstances, null, options, request);
      }
      /// <summary>
      /// Creates instances with per-instance configs in this managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> CreateInstancesAsync(global::Google.Cloud.Compute.V1.CreateInstancesInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates instances with per-instance configs in this managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> CreateInstancesAsync(global::Google.Cloud.Compute.V1.CreateInstancesInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateInstances, null, options, request);
      }
      /// <summary>
      /// Deletes the specified managed instance group and all of the instances in that group. Note that the instance group must not belong to a backend service. Read  Deleting an instance group for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified managed instance group and all of the instances in that group. Note that the instance group must not belong to a backend service. Read  Deleting an instance group for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified managed instance group and all of the instances in that group. Note that the instance group must not belong to a backend service. Read  Deleting an instance group for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified managed instance group and all of the instances in that group. Note that the instance group must not belong to a backend service. Read  Deleting an instance group for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Flags the specified instances in the managed instance group for immediate deletion. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. This operation is marked as DONE when the action is scheduled even if the instances are still being deleted. You must separately verify the status of the deleting action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DeleteInstances(global::Google.Cloud.Compute.V1.DeleteInstancesInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Flags the specified instances in the managed instance group for immediate deletion. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. This operation is marked as DONE when the action is scheduled even if the instances are still being deleted. You must separately verify the status of the deleting action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DeleteInstances(global::Google.Cloud.Compute.V1.DeleteInstancesInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteInstances, null, options, request);
      }
      /// <summary>
      /// Flags the specified instances in the managed instance group for immediate deletion. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. This operation is marked as DONE when the action is scheduled even if the instances are still being deleted. You must separately verify the status of the deleting action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteInstancesAsync(global::Google.Cloud.Compute.V1.DeleteInstancesInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Flags the specified instances in the managed instance group for immediate deletion. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. This operation is marked as DONE when the action is scheduled even if the instances are still being deleted. You must separately verify the status of the deleting action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteInstancesAsync(global::Google.Cloud.Compute.V1.DeleteInstancesInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteInstances, null, options, request);
      }
      /// <summary>
      /// Deletes selected per-instance configs for the managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DeletePerInstanceConfigs(global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePerInstanceConfigs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes selected per-instance configs for the managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DeletePerInstanceConfigs(global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePerInstanceConfigs, null, options, request);
      }
      /// <summary>
      /// Deletes selected per-instance configs for the managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeletePerInstanceConfigsAsync(global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePerInstanceConfigsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes selected per-instance configs for the managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeletePerInstanceConfigsAsync(global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePerInstanceConfigs, null, options, request);
      }
      /// <summary>
      /// Returns all of the details about the specified managed instance group. Gets a list of available managed instance groups by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupManager Get(global::Google.Cloud.Compute.V1.GetInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns all of the details about the specified managed instance group. Gets a list of available managed instance groups by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupManager Get(global::Google.Cloud.Compute.V1.GetInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns all of the details about the specified managed instance group. Gets a list of available managed instance groups by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupManager> GetAsync(global::Google.Cloud.Compute.V1.GetInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns all of the details about the specified managed instance group. Gets a list of available managed instance groups by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupManager> GetAsync(global::Google.Cloud.Compute.V1.GetInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method.
      ///
      /// A managed instance group can have up to 1000 VM instances per group. Please contact Cloud Support if you need an increase in this limit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method.
      ///
      /// A managed instance group can have up to 1000 VM instances per group. Please contact Cloud Support if you need an increase in this limit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method.
      ///
      /// A managed instance group can have up to 1000 VM instances per group. Please contact Cloud Support if you need an increase in this limit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method.
      ///
      /// A managed instance group can have up to 1000 VM instances per group. Please contact Cloud Support if you need an increase in this limit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of managed instance groups that are contained within the specified project and zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupManagerList List(global::Google.Cloud.Compute.V1.ListInstanceGroupManagersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of managed instance groups that are contained within the specified project and zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupManagerList List(global::Google.Cloud.Compute.V1.ListInstanceGroupManagersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of managed instance groups that are contained within the specified project and zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupManagerList> ListAsync(global::Google.Cloud.Compute.V1.ListInstanceGroupManagersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of managed instance groups that are contained within the specified project and zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupManagerList> ListAsync(global::Google.Cloud.Compute.V1.ListInstanceGroupManagersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Lists all errors thrown by actions on instances for a given managed instance group. The filter and orderBy query parameters are not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupManagersListErrorsResponse ListErrors(global::Google.Cloud.Compute.V1.ListErrorsInstanceGroupManagersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListErrors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all errors thrown by actions on instances for a given managed instance group. The filter and orderBy query parameters are not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupManagersListErrorsResponse ListErrors(global::Google.Cloud.Compute.V1.ListErrorsInstanceGroupManagersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListErrors, null, options, request);
      }
      /// <summary>
      /// Lists all errors thrown by actions on instances for a given managed instance group. The filter and orderBy query parameters are not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupManagersListErrorsResponse> ListErrorsAsync(global::Google.Cloud.Compute.V1.ListErrorsInstanceGroupManagersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListErrorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all errors thrown by actions on instances for a given managed instance group. The filter and orderBy query parameters are not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupManagersListErrorsResponse> ListErrorsAsync(global::Google.Cloud.Compute.V1.ListErrorsInstanceGroupManagersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListErrors, null, options, request);
      }
      /// <summary>
      /// Lists all of the instances in the managed instance group. Each instance in the list has a currentAction, which indicates the action that the managed instance group is performing on the instance. For example, if the group is still creating an instance, the currentAction is CREATING. If a previous action failed, the list displays the errors for that failed action. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupManagersListManagedInstancesResponse ListManagedInstances(global::Google.Cloud.Compute.V1.ListManagedInstancesInstanceGroupManagersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListManagedInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all of the instances in the managed instance group. Each instance in the list has a currentAction, which indicates the action that the managed instance group is performing on the instance. For example, if the group is still creating an instance, the currentAction is CREATING. If a previous action failed, the list displays the errors for that failed action. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupManagersListManagedInstancesResponse ListManagedInstances(global::Google.Cloud.Compute.V1.ListManagedInstancesInstanceGroupManagersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListManagedInstances, null, options, request);
      }
      /// <summary>
      /// Lists all of the instances in the managed instance group. Each instance in the list has a currentAction, which indicates the action that the managed instance group is performing on the instance. For example, if the group is still creating an instance, the currentAction is CREATING. If a previous action failed, the list displays the errors for that failed action. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupManagersListManagedInstancesResponse> ListManagedInstancesAsync(global::Google.Cloud.Compute.V1.ListManagedInstancesInstanceGroupManagersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListManagedInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all of the instances in the managed instance group. Each instance in the list has a currentAction, which indicates the action that the managed instance group is performing on the instance. For example, if the group is still creating an instance, the currentAction is CREATING. If a previous action failed, the list displays the errors for that failed action. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupManagersListManagedInstancesResponse> ListManagedInstancesAsync(global::Google.Cloud.Compute.V1.ListManagedInstancesInstanceGroupManagersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListManagedInstances, null, options, request);
      }
      /// <summary>
      /// Lists all of the per-instance configs defined for the managed instance group. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupManagersListPerInstanceConfigsResp ListPerInstanceConfigs(global::Google.Cloud.Compute.V1.ListPerInstanceConfigsInstanceGroupManagersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPerInstanceConfigs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all of the per-instance configs defined for the managed instance group. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupManagersListPerInstanceConfigsResp ListPerInstanceConfigs(global::Google.Cloud.Compute.V1.ListPerInstanceConfigsInstanceGroupManagersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPerInstanceConfigs, null, options, request);
      }
      /// <summary>
      /// Lists all of the per-instance configs defined for the managed instance group. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupManagersListPerInstanceConfigsResp> ListPerInstanceConfigsAsync(global::Google.Cloud.Compute.V1.ListPerInstanceConfigsInstanceGroupManagersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPerInstanceConfigsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all of the per-instance configs defined for the managed instance group. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupManagersListPerInstanceConfigsResp> ListPerInstanceConfigsAsync(global::Google.Cloud.Compute.V1.ListPerInstanceConfigsInstanceGroupManagersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPerInstanceConfigs, null, options, request);
      }
      /// <summary>
      /// Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listManagedInstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listManagedInstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listManagedInstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listManagedInstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Inserts or patches per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation PatchPerInstanceConfigs(global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchPerInstanceConfigs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts or patches per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation PatchPerInstanceConfigs(global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchPerInstanceConfigs, null, options, request);
      }
      /// <summary>
      /// Inserts or patches per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchPerInstanceConfigsAsync(global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchPerInstanceConfigsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts or patches per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchPerInstanceConfigsAsync(global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchPerInstanceConfigs, null, options, request);
      }
      /// <summary>
      /// Flags the specified instances in the managed instance group to be immediately recreated. The instances are deleted and recreated using the current instance template for the managed instance group. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of the recreating action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RecreateInstances(global::Google.Cloud.Compute.V1.RecreateInstancesInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecreateInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Flags the specified instances in the managed instance group to be immediately recreated. The instances are deleted and recreated using the current instance template for the managed instance group. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of the recreating action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RecreateInstances(global::Google.Cloud.Compute.V1.RecreateInstancesInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RecreateInstances, null, options, request);
      }
      /// <summary>
      /// Flags the specified instances in the managed instance group to be immediately recreated. The instances are deleted and recreated using the current instance template for the managed instance group. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of the recreating action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RecreateInstancesAsync(global::Google.Cloud.Compute.V1.RecreateInstancesInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecreateInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Flags the specified instances in the managed instance group to be immediately recreated. The instances are deleted and recreated using the current instance template for the managed instance group. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of the recreating action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RecreateInstancesAsync(global::Google.Cloud.Compute.V1.RecreateInstancesInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RecreateInstances, null, options, request);
      }
      /// <summary>
      /// Resizes the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes instances. The resize operation is marked DONE when the resize actions are scheduled even if the group has not yet added or deleted any instances. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method.
      ///
      /// When resizing down, the instance group arbitrarily chooses the order in which VMs are deleted. The group takes into account some VM attributes when making the selection including:
      ///
      /// + The status of the VM instance. + The health of the VM instance. + The instance template version the VM is based on. + For regional managed instance groups, the location of the VM instance.
      ///
      /// This list is subject to change.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Resize(global::Google.Cloud.Compute.V1.ResizeInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Resize(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resizes the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes instances. The resize operation is marked DONE when the resize actions are scheduled even if the group has not yet added or deleted any instances. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method.
      ///
      /// When resizing down, the instance group arbitrarily chooses the order in which VMs are deleted. The group takes into account some VM attributes when making the selection including:
      ///
      /// + The status of the VM instance. + The health of the VM instance. + The instance template version the VM is based on. + For regional managed instance groups, the location of the VM instance.
      ///
      /// This list is subject to change.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Resize(global::Google.Cloud.Compute.V1.ResizeInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Resize, null, options, request);
      }
      /// <summary>
      /// Resizes the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes instances. The resize operation is marked DONE when the resize actions are scheduled even if the group has not yet added or deleted any instances. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method.
      ///
      /// When resizing down, the instance group arbitrarily chooses the order in which VMs are deleted. The group takes into account some VM attributes when making the selection including:
      ///
      /// + The status of the VM instance. + The health of the VM instance. + The instance template version the VM is based on. + For regional managed instance groups, the location of the VM instance.
      ///
      /// This list is subject to change.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> ResizeAsync(global::Google.Cloud.Compute.V1.ResizeInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResizeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resizes the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes instances. The resize operation is marked DONE when the resize actions are scheduled even if the group has not yet added or deleted any instances. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method.
      ///
      /// When resizing down, the instance group arbitrarily chooses the order in which VMs are deleted. The group takes into account some VM attributes when making the selection including:
      ///
      /// + The status of the VM instance. + The health of the VM instance. + The instance template version the VM is based on. + For regional managed instance groups, the location of the VM instance.
      ///
      /// This list is subject to change.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> ResizeAsync(global::Google.Cloud.Compute.V1.ResizeInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Resize, null, options, request);
      }
      /// <summary>
      /// Specifies the instance template to use when creating new instances in this group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetInstanceTemplate(global::Google.Cloud.Compute.V1.SetInstanceTemplateInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetInstanceTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Specifies the instance template to use when creating new instances in this group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetInstanceTemplate(global::Google.Cloud.Compute.V1.SetInstanceTemplateInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetInstanceTemplate, null, options, request);
      }
      /// <summary>
      /// Specifies the instance template to use when creating new instances in this group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetInstanceTemplateAsync(global::Google.Cloud.Compute.V1.SetInstanceTemplateInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetInstanceTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Specifies the instance template to use when creating new instances in this group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetInstanceTemplateAsync(global::Google.Cloud.Compute.V1.SetInstanceTemplateInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetInstanceTemplate, null, options, request);
      }
      /// <summary>
      /// Modifies the target pools to which all instances in this managed instance group are assigned. The target pools automatically apply to all of the instances in the managed instance group. This operation is marked DONE when you make the request even if the instances have not yet been added to their target pools. The change might take some time to apply to all of the instances in the group depending on the size of the group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetTargetPools(global::Google.Cloud.Compute.V1.SetTargetPoolsInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTargetPools(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies the target pools to which all instances in this managed instance group are assigned. The target pools automatically apply to all of the instances in the managed instance group. This operation is marked DONE when you make the request even if the instances have not yet been added to their target pools. The change might take some time to apply to all of the instances in the group depending on the size of the group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetTargetPools(global::Google.Cloud.Compute.V1.SetTargetPoolsInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTargetPools, null, options, request);
      }
      /// <summary>
      /// Modifies the target pools to which all instances in this managed instance group are assigned. The target pools automatically apply to all of the instances in the managed instance group. This operation is marked DONE when you make the request even if the instances have not yet been added to their target pools. The change might take some time to apply to all of the instances in the group depending on the size of the group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetTargetPoolsAsync(global::Google.Cloud.Compute.V1.SetTargetPoolsInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTargetPoolsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies the target pools to which all instances in this managed instance group are assigned. The target pools automatically apply to all of the instances in the managed instance group. This operation is marked DONE when you make the request even if the instances have not yet been added to their target pools. The change might take some time to apply to all of the instances in the group depending on the size of the group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetTargetPoolsAsync(global::Google.Cloud.Compute.V1.SetTargetPoolsInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTargetPools, null, options, request);
      }
      /// <summary>
      /// Inserts or updates per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation UpdatePerInstanceConfigs(global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePerInstanceConfigs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts or updates per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation UpdatePerInstanceConfigs(global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePerInstanceConfigs, null, options, request);
      }
      /// <summary>
      /// Inserts or updates per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdatePerInstanceConfigsAsync(global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePerInstanceConfigsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts or updates per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdatePerInstanceConfigsAsync(global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePerInstanceConfigs, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override InstanceGroupManagersClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InstanceGroupManagersClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(InstanceGroupManagersBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AbandonInstances, serviceImpl.AbandonInstances)
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_ApplyUpdatesToInstances, serviceImpl.ApplyUpdatesToInstances)
          .AddMethod(__Method_CreateInstances, serviceImpl.CreateInstances)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_DeleteInstances, serviceImpl.DeleteInstances)
          .AddMethod(__Method_DeletePerInstanceConfigs, serviceImpl.DeletePerInstanceConfigs)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_ListErrors, serviceImpl.ListErrors)
          .AddMethod(__Method_ListManagedInstances, serviceImpl.ListManagedInstances)
          .AddMethod(__Method_ListPerInstanceConfigs, serviceImpl.ListPerInstanceConfigs)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_PatchPerInstanceConfigs, serviceImpl.PatchPerInstanceConfigs)
          .AddMethod(__Method_RecreateInstances, serviceImpl.RecreateInstances)
          .AddMethod(__Method_Resize, serviceImpl.Resize)
          .AddMethod(__Method_SetInstanceTemplate, serviceImpl.SetInstanceTemplate)
          .AddMethod(__Method_SetTargetPools, serviceImpl.SetTargetPools)
          .AddMethod(__Method_UpdatePerInstanceConfigs, serviceImpl.UpdatePerInstanceConfigs).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, InstanceGroupManagersBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AbandonInstances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AbandonInstancesInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.AbandonInstances));
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.InstanceGroupManagerAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_ApplyUpdatesToInstances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.ApplyUpdatesToInstances));
      serviceBinder.AddMethod(__Method_CreateInstances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.CreateInstancesInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.CreateInstances));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_DeleteInstances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteInstancesInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.DeleteInstances));
      serviceBinder.AddMethod(__Method_DeletePerInstanceConfigs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.DeletePerInstanceConfigs));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.InstanceGroupManager>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.InstanceGroupManagerList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_ListErrors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListErrorsInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.InstanceGroupManagersListErrorsResponse>(serviceImpl.ListErrors));
      serviceBinder.AddMethod(__Method_ListManagedInstances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListManagedInstancesInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.InstanceGroupManagersListManagedInstancesResponse>(serviceImpl.ListManagedInstances));
      serviceBinder.AddMethod(__Method_ListPerInstanceConfigs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListPerInstanceConfigsInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.InstanceGroupManagersListPerInstanceConfigsResp>(serviceImpl.ListPerInstanceConfigs));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_PatchPerInstanceConfigs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.PatchPerInstanceConfigs));
      serviceBinder.AddMethod(__Method_RecreateInstances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.RecreateInstancesInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.RecreateInstances));
      serviceBinder.AddMethod(__Method_Resize, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ResizeInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Resize));
      serviceBinder.AddMethod(__Method_SetInstanceTemplate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetInstanceTemplateInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetInstanceTemplate));
      serviceBinder.AddMethod(__Method_SetTargetPools, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetTargetPoolsInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetTargetPools));
      serviceBinder.AddMethod(__Method_UpdatePerInstanceConfigs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.UpdatePerInstanceConfigs));
    }

  }
  /// <summary>
  /// The InstanceGroups API.
  /// </summary>
  public static partial class InstanceGroups
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.InstanceGroups";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AddInstancesInstanceGroupRequest> __Marshaller_google_cloud_compute_v1_AddInstancesInstanceGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AddInstancesInstanceGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupsRequest> __Marshaller_google_cloud_compute_v1_AggregatedListInstanceGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InstanceGroupAggregatedList> __Marshaller_google_cloud_compute_v1_InstanceGroupAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InstanceGroupAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteInstanceGroupRequest> __Marshaller_google_cloud_compute_v1_DeleteInstanceGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteInstanceGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetInstanceGroupRequest> __Marshaller_google_cloud_compute_v1_GetInstanceGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetInstanceGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InstanceGroup> __Marshaller_google_cloud_compute_v1_InstanceGroup = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InstanceGroup.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertInstanceGroupRequest> __Marshaller_google_cloud_compute_v1_InsertInstanceGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertInstanceGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListInstanceGroupsRequest> __Marshaller_google_cloud_compute_v1_ListInstanceGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListInstanceGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InstanceGroupList> __Marshaller_google_cloud_compute_v1_InstanceGroupList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InstanceGroupList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListInstancesInstanceGroupsRequest> __Marshaller_google_cloud_compute_v1_ListInstancesInstanceGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListInstancesInstanceGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InstanceGroupsListInstances> __Marshaller_google_cloud_compute_v1_InstanceGroupsListInstances = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InstanceGroupsListInstances.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RemoveInstancesInstanceGroupRequest> __Marshaller_google_cloud_compute_v1_RemoveInstancesInstanceGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RemoveInstancesInstanceGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetNamedPortsInstanceGroupRequest> __Marshaller_google_cloud_compute_v1_SetNamedPortsInstanceGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetNamedPortsInstanceGroupRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AddInstancesInstanceGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_AddInstances = new grpc::Method<global::Google.Cloud.Compute.V1.AddInstancesInstanceGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddInstances",
        __Marshaller_google_cloud_compute_v1_AddInstancesInstanceGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupsRequest, global::Google.Cloud.Compute.V1.InstanceGroupAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupsRequest, global::Google.Cloud.Compute.V1.InstanceGroupAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListInstanceGroupsRequest,
        __Marshaller_google_cloud_compute_v1_InstanceGroupAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteInstanceGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteInstanceGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteInstanceGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetInstanceGroupRequest, global::Google.Cloud.Compute.V1.InstanceGroup> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetInstanceGroupRequest, global::Google.Cloud.Compute.V1.InstanceGroup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetInstanceGroupRequest,
        __Marshaller_google_cloud_compute_v1_InstanceGroup);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertInstanceGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertInstanceGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertInstanceGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListInstanceGroupsRequest, global::Google.Cloud.Compute.V1.InstanceGroupList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListInstanceGroupsRequest, global::Google.Cloud.Compute.V1.InstanceGroupList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListInstanceGroupsRequest,
        __Marshaller_google_cloud_compute_v1_InstanceGroupList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListInstancesInstanceGroupsRequest, global::Google.Cloud.Compute.V1.InstanceGroupsListInstances> __Method_ListInstances = new grpc::Method<global::Google.Cloud.Compute.V1.ListInstancesInstanceGroupsRequest, global::Google.Cloud.Compute.V1.InstanceGroupsListInstances>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListInstances",
        __Marshaller_google_cloud_compute_v1_ListInstancesInstanceGroupsRequest,
        __Marshaller_google_cloud_compute_v1_InstanceGroupsListInstances);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.RemoveInstancesInstanceGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_RemoveInstances = new grpc::Method<global::Google.Cloud.Compute.V1.RemoveInstancesInstanceGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveInstances",
        __Marshaller_google_cloud_compute_v1_RemoveInstancesInstanceGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetNamedPortsInstanceGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetNamedPorts = new grpc::Method<global::Google.Cloud.Compute.V1.SetNamedPortsInstanceGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetNamedPorts",
        __Marshaller_google_cloud_compute_v1_SetNamedPortsInstanceGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[18]; }
    }

    /// <summary>Base class for server-side implementations of InstanceGroups</summary>
    [grpc::BindServiceMethod(typeof(InstanceGroups), "BindService")]
    public abstract partial class InstanceGroupsBase
    {
      /// <summary>
      /// Adds a list of instances to the specified instance group. All of the instances in the instance group must be in the same network/subnetwork. Read  Adding instances for more information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> AddInstances(global::Google.Cloud.Compute.V1.AddInstancesInstanceGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of instance groups and sorts them by zone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InstanceGroupAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified instance group. The instances in the group are not deleted. Note that instance group must not belong to a backend service. Read  Deleting an instance group for more information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteInstanceGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified zonal instance group. Get a list of available zonal instance groups by making a list() request.
      ///
      /// For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InstanceGroup> Get(global::Google.Cloud.Compute.V1.GetInstanceGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates an instance group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertInstanceGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of zonal instance group resources contained within the specified zone.
      ///
      /// For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InstanceGroupList> List(global::Google.Cloud.Compute.V1.ListInstanceGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the instances in the specified instance group. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InstanceGroupsListInstances> ListInstances(global::Google.Cloud.Compute.V1.ListInstancesInstanceGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes one or more instances from the specified instance group, but does not delete those instances.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration before the VM instance is removed or deleted.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> RemoveInstances(global::Google.Cloud.Compute.V1.RemoveInstancesInstanceGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the named ports for the specified instance group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetNamedPorts(global::Google.Cloud.Compute.V1.SetNamedPortsInstanceGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for InstanceGroups</summary>
    public partial class InstanceGroupsClient : grpc::ClientBase<InstanceGroupsClient>
    {
      /// <summary>Creates a new client for InstanceGroups</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public InstanceGroupsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for InstanceGroups that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public InstanceGroupsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected InstanceGroupsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected InstanceGroupsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Adds a list of instances to the specified instance group. All of the instances in the instance group must be in the same network/subnetwork. Read  Adding instances for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddInstances(global::Google.Cloud.Compute.V1.AddInstancesInstanceGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a list of instances to the specified instance group. All of the instances in the instance group must be in the same network/subnetwork. Read  Adding instances for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddInstances(global::Google.Cloud.Compute.V1.AddInstancesInstanceGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddInstances, null, options, request);
      }
      /// <summary>
      /// Adds a list of instances to the specified instance group. All of the instances in the instance group must be in the same network/subnetwork. Read  Adding instances for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddInstancesAsync(global::Google.Cloud.Compute.V1.AddInstancesInstanceGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a list of instances to the specified instance group. All of the instances in the instance group must be in the same network/subnetwork. Read  Adding instances for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddInstancesAsync(global::Google.Cloud.Compute.V1.AddInstancesInstanceGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddInstances, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of instance groups and sorts them by zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of instance groups and sorts them by zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of instance groups and sorts them by zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of instance groups and sorts them by zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified instance group. The instances in the group are not deleted. Note that instance group must not belong to a backend service. Read  Deleting an instance group for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteInstanceGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified instance group. The instances in the group are not deleted. Note that instance group must not belong to a backend service. Read  Deleting an instance group for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteInstanceGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified instance group. The instances in the group are not deleted. Note that instance group must not belong to a backend service. Read  Deleting an instance group for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteInstanceGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified instance group. The instances in the group are not deleted. Note that instance group must not belong to a backend service. Read  Deleting an instance group for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteInstanceGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified zonal instance group. Get a list of available zonal instance groups by making a list() request.
      ///
      /// For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroup Get(global::Google.Cloud.Compute.V1.GetInstanceGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified zonal instance group. Get a list of available zonal instance groups by making a list() request.
      ///
      /// For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroup Get(global::Google.Cloud.Compute.V1.GetInstanceGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified zonal instance group. Get a list of available zonal instance groups by making a list() request.
      ///
      /// For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroup> GetAsync(global::Google.Cloud.Compute.V1.GetInstanceGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified zonal instance group. Get a list of available zonal instance groups by making a list() request.
      ///
      /// For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroup> GetAsync(global::Google.Cloud.Compute.V1.GetInstanceGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates an instance group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertInstanceGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an instance group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertInstanceGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates an instance group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertInstanceGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an instance group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertInstanceGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of zonal instance group resources contained within the specified zone.
      ///
      /// For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupList List(global::Google.Cloud.Compute.V1.ListInstanceGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of zonal instance group resources contained within the specified zone.
      ///
      /// For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupList List(global::Google.Cloud.Compute.V1.ListInstanceGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of zonal instance group resources contained within the specified zone.
      ///
      /// For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupList> ListAsync(global::Google.Cloud.Compute.V1.ListInstanceGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of zonal instance group resources contained within the specified zone.
      ///
      /// For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupList> ListAsync(global::Google.Cloud.Compute.V1.ListInstanceGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Lists the instances in the specified instance group. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupsListInstances ListInstances(global::Google.Cloud.Compute.V1.ListInstancesInstanceGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the instances in the specified instance group. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupsListInstances ListInstances(global::Google.Cloud.Compute.V1.ListInstancesInstanceGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListInstances, null, options, request);
      }
      /// <summary>
      /// Lists the instances in the specified instance group. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupsListInstances> ListInstancesAsync(global::Google.Cloud.Compute.V1.ListInstancesInstanceGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the instances in the specified instance group. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupsListInstances> ListInstancesAsync(global::Google.Cloud.Compute.V1.ListInstancesInstanceGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListInstances, null, options, request);
      }
      /// <summary>
      /// Removes one or more instances from the specified instance group, but does not delete those instances.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration before the VM instance is removed or deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RemoveInstances(global::Google.Cloud.Compute.V1.RemoveInstancesInstanceGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes one or more instances from the specified instance group, but does not delete those instances.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration before the VM instance is removed or deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RemoveInstances(global::Google.Cloud.Compute.V1.RemoveInstancesInstanceGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveInstances, null, options, request);
      }
      /// <summary>
      /// Removes one or more instances from the specified instance group, but does not delete those instances.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration before the VM instance is removed or deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RemoveInstancesAsync(global::Google.Cloud.Compute.V1.RemoveInstancesInstanceGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes one or more instances from the specified instance group, but does not delete those instances.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration before the VM instance is removed or deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RemoveInstancesAsync(global::Google.Cloud.Compute.V1.RemoveInstancesInstanceGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveInstances, null, options, request);
      }
      /// <summary>
      /// Sets the named ports for the specified instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetNamedPorts(global::Google.Cloud.Compute.V1.SetNamedPortsInstanceGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetNamedPorts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the named ports for the specified instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetNamedPorts(global::Google.Cloud.Compute.V1.SetNamedPortsInstanceGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetNamedPorts, null, options, request);
      }
      /// <summary>
      /// Sets the named ports for the specified instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetNamedPortsAsync(global::Google.Cloud.Compute.V1.SetNamedPortsInstanceGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetNamedPortsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the named ports for the specified instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetNamedPortsAsync(global::Google.Cloud.Compute.V1.SetNamedPortsInstanceGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetNamedPorts, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override InstanceGroupsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InstanceGroupsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(InstanceGroupsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddInstances, serviceImpl.AddInstances)
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_ListInstances, serviceImpl.ListInstances)
          .AddMethod(__Method_RemoveInstances, serviceImpl.RemoveInstances)
          .AddMethod(__Method_SetNamedPorts, serviceImpl.SetNamedPorts).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, InstanceGroupsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddInstances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AddInstancesInstanceGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.AddInstances));
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListInstanceGroupsRequest, global::Google.Cloud.Compute.V1.InstanceGroupAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteInstanceGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetInstanceGroupRequest, global::Google.Cloud.Compute.V1.InstanceGroup>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertInstanceGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListInstanceGroupsRequest, global::Google.Cloud.Compute.V1.InstanceGroupList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_ListInstances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListInstancesInstanceGroupsRequest, global::Google.Cloud.Compute.V1.InstanceGroupsListInstances>(serviceImpl.ListInstances));
      serviceBinder.AddMethod(__Method_RemoveInstances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.RemoveInstancesInstanceGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.RemoveInstances));
      serviceBinder.AddMethod(__Method_SetNamedPorts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetNamedPortsInstanceGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetNamedPorts));
    }

  }
  /// <summary>
  /// The InstanceTemplates API.
  /// </summary>
  public static partial class InstanceTemplates
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.InstanceTemplates";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteInstanceTemplateRequest> __Marshaller_google_cloud_compute_v1_DeleteInstanceTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteInstanceTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetInstanceTemplateRequest> __Marshaller_google_cloud_compute_v1_GetInstanceTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetInstanceTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InstanceTemplate> __Marshaller_google_cloud_compute_v1_InstanceTemplate = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InstanceTemplate.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetIamPolicyInstanceTemplateRequest> __Marshaller_google_cloud_compute_v1_GetIamPolicyInstanceTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetIamPolicyInstanceTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Policy> __Marshaller_google_cloud_compute_v1_Policy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Policy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertInstanceTemplateRequest> __Marshaller_google_cloud_compute_v1_InsertInstanceTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertInstanceTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListInstanceTemplatesRequest> __Marshaller_google_cloud_compute_v1_ListInstanceTemplatesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListInstanceTemplatesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InstanceTemplateList> __Marshaller_google_cloud_compute_v1_InstanceTemplateList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InstanceTemplateList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetIamPolicyInstanceTemplateRequest> __Marshaller_google_cloud_compute_v1_SetIamPolicyInstanceTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetIamPolicyInstanceTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceTemplateRequest> __Marshaller_google_cloud_compute_v1_TestIamPermissionsInstanceTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Marshaller_google_cloud_compute_v1_TestPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestPermissionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteInstanceTemplateRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteInstanceTemplateRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteInstanceTemplateRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetInstanceTemplateRequest, global::Google.Cloud.Compute.V1.InstanceTemplate> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetInstanceTemplateRequest, global::Google.Cloud.Compute.V1.InstanceTemplate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetInstanceTemplateRequest,
        __Marshaller_google_cloud_compute_v1_InstanceTemplate);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyInstanceTemplateRequest, global::Google.Cloud.Compute.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyInstanceTemplateRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_cloud_compute_v1_GetIamPolicyInstanceTemplateRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertInstanceTemplateRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertInstanceTemplateRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertInstanceTemplateRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListInstanceTemplatesRequest, global::Google.Cloud.Compute.V1.InstanceTemplateList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListInstanceTemplatesRequest, global::Google.Cloud.Compute.V1.InstanceTemplateList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListInstanceTemplatesRequest,
        __Marshaller_google_cloud_compute_v1_InstanceTemplateList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyInstanceTemplateRequest, global::Google.Cloud.Compute.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyInstanceTemplateRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_cloud_compute_v1_SetIamPolicyInstanceTemplateRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceTemplateRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceTemplateRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_cloud_compute_v1_TestIamPermissionsInstanceTemplateRequest,
        __Marshaller_google_cloud_compute_v1_TestPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[19]; }
    }

    /// <summary>Base class for server-side implementations of InstanceTemplates</summary>
    [grpc::BindServiceMethod(typeof(InstanceTemplates), "BindService")]
    public abstract partial class InstanceTemplatesBase
    {
      /// <summary>
      /// Deletes the specified instance template. Deleting an instance template is permanent and cannot be undone. It is not possible to delete templates that are already in use by a managed instance group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteInstanceTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified instance template. Gets a list of available instance templates by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InstanceTemplate> Get(global::Google.Cloud.Compute.V1.GetInstanceTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyInstanceTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates an instance template in the specified project using the data that is included in the request. If you are creating a new template to update an existing instance group, your new instance template must use the same network or, if applicable, the same subnetwork as the original template.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertInstanceTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of instance templates that are contained within the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InstanceTemplateList> List(global::Google.Cloud.Compute.V1.ListInstanceTemplatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyInstanceTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for InstanceTemplates</summary>
    public partial class InstanceTemplatesClient : grpc::ClientBase<InstanceTemplatesClient>
    {
      /// <summary>Creates a new client for InstanceTemplates</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public InstanceTemplatesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for InstanceTemplates that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public InstanceTemplatesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected InstanceTemplatesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected InstanceTemplatesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified instance template. Deleting an instance template is permanent and cannot be undone. It is not possible to delete templates that are already in use by a managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteInstanceTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified instance template. Deleting an instance template is permanent and cannot be undone. It is not possible to delete templates that are already in use by a managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteInstanceTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified instance template. Deleting an instance template is permanent and cannot be undone. It is not possible to delete templates that are already in use by a managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteInstanceTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified instance template. Deleting an instance template is permanent and cannot be undone. It is not possible to delete templates that are already in use by a managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteInstanceTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified instance template. Gets a list of available instance templates by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceTemplate Get(global::Google.Cloud.Compute.V1.GetInstanceTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified instance template. Gets a list of available instance templates by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceTemplate Get(global::Google.Cloud.Compute.V1.GetInstanceTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified instance template. Gets a list of available instance templates by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceTemplate> GetAsync(global::Google.Cloud.Compute.V1.GetInstanceTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified instance template. Gets a list of available instance templates by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceTemplate> GetAsync(global::Google.Cloud.Compute.V1.GetInstanceTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyInstanceTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyInstanceTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyInstanceTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyInstanceTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Creates an instance template in the specified project using the data that is included in the request. If you are creating a new template to update an existing instance group, your new instance template must use the same network or, if applicable, the same subnetwork as the original template.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertInstanceTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an instance template in the specified project using the data that is included in the request. If you are creating a new template to update an existing instance group, your new instance template must use the same network or, if applicable, the same subnetwork as the original template.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertInstanceTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates an instance template in the specified project using the data that is included in the request. If you are creating a new template to update an existing instance group, your new instance template must use the same network or, if applicable, the same subnetwork as the original template.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertInstanceTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an instance template in the specified project using the data that is included in the request. If you are creating a new template to update an existing instance group, your new instance template must use the same network or, if applicable, the same subnetwork as the original template.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertInstanceTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of instance templates that are contained within the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceTemplateList List(global::Google.Cloud.Compute.V1.ListInstanceTemplatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of instance templates that are contained within the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceTemplateList List(global::Google.Cloud.Compute.V1.ListInstanceTemplatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of instance templates that are contained within the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceTemplateList> ListAsync(global::Google.Cloud.Compute.V1.ListInstanceTemplatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of instance templates that are contained within the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceTemplateList> ListAsync(global::Google.Cloud.Compute.V1.ListInstanceTemplatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyInstanceTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyInstanceTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyInstanceTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyInstanceTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override InstanceTemplatesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InstanceTemplatesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(InstanceTemplatesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, InstanceTemplatesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteInstanceTemplateRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetInstanceTemplateRequest, global::Google.Cloud.Compute.V1.InstanceTemplate>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetIamPolicyInstanceTemplateRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertInstanceTemplateRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListInstanceTemplatesRequest, global::Google.Cloud.Compute.V1.InstanceTemplateList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetIamPolicyInstanceTemplateRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceTemplateRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
  /// <summary>
  /// The Instances API.
  /// </summary>
  public static partial class Instances
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.Instances";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AddAccessConfigInstanceRequest> __Marshaller_google_cloud_compute_v1_AddAccessConfigInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AddAccessConfigInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AddResourcePoliciesInstanceRequest> __Marshaller_google_cloud_compute_v1_AddResourcePoliciesInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AddResourcePoliciesInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListInstancesRequest> __Marshaller_google_cloud_compute_v1_AggregatedListInstancesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListInstancesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InstanceAggregatedList> __Marshaller_google_cloud_compute_v1_InstanceAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InstanceAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AttachDiskInstanceRequest> __Marshaller_google_cloud_compute_v1_AttachDiskInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AttachDiskInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteInstanceRequest> __Marshaller_google_cloud_compute_v1_DeleteInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteAccessConfigInstanceRequest> __Marshaller_google_cloud_compute_v1_DeleteAccessConfigInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteAccessConfigInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DetachDiskInstanceRequest> __Marshaller_google_cloud_compute_v1_DetachDiskInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DetachDiskInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetInstanceRequest> __Marshaller_google_cloud_compute_v1_GetInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Instance> __Marshaller_google_cloud_compute_v1_Instance = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Instance.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetGuestAttributesInstanceRequest> __Marshaller_google_cloud_compute_v1_GetGuestAttributesInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetGuestAttributesInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GuestAttributes> __Marshaller_google_cloud_compute_v1_GuestAttributes = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GuestAttributes.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetIamPolicyInstanceRequest> __Marshaller_google_cloud_compute_v1_GetIamPolicyInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetIamPolicyInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Policy> __Marshaller_google_cloud_compute_v1_Policy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Policy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetScreenshotInstanceRequest> __Marshaller_google_cloud_compute_v1_GetScreenshotInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetScreenshotInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Screenshot> __Marshaller_google_cloud_compute_v1_Screenshot = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Screenshot.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetSerialPortOutputInstanceRequest> __Marshaller_google_cloud_compute_v1_GetSerialPortOutputInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetSerialPortOutputInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SerialPortOutput> __Marshaller_google_cloud_compute_v1_SerialPortOutput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SerialPortOutput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetShieldedInstanceIdentityInstanceRequest> __Marshaller_google_cloud_compute_v1_GetShieldedInstanceIdentityInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetShieldedInstanceIdentityInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ShieldedInstanceIdentity> __Marshaller_google_cloud_compute_v1_ShieldedInstanceIdentity = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ShieldedInstanceIdentity.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertInstanceRequest> __Marshaller_google_cloud_compute_v1_InsertInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListInstancesRequest> __Marshaller_google_cloud_compute_v1_ListInstancesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListInstancesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InstanceList> __Marshaller_google_cloud_compute_v1_InstanceList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InstanceList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListReferrersInstancesRequest> __Marshaller_google_cloud_compute_v1_ListReferrersInstancesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListReferrersInstancesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InstanceListReferrers> __Marshaller_google_cloud_compute_v1_InstanceListReferrers = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InstanceListReferrers.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RemoveResourcePoliciesInstanceRequest> __Marshaller_google_cloud_compute_v1_RemoveResourcePoliciesInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RemoveResourcePoliciesInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ResetInstanceRequest> __Marshaller_google_cloud_compute_v1_ResetInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ResetInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetDeletionProtectionInstanceRequest> __Marshaller_google_cloud_compute_v1_SetDeletionProtectionInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetDeletionProtectionInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetDiskAutoDeleteInstanceRequest> __Marshaller_google_cloud_compute_v1_SetDiskAutoDeleteInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetDiskAutoDeleteInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetIamPolicyInstanceRequest> __Marshaller_google_cloud_compute_v1_SetIamPolicyInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetIamPolicyInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetLabelsInstanceRequest> __Marshaller_google_cloud_compute_v1_SetLabelsInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetLabelsInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetMachineResourcesInstanceRequest> __Marshaller_google_cloud_compute_v1_SetMachineResourcesInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetMachineResourcesInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetMachineTypeInstanceRequest> __Marshaller_google_cloud_compute_v1_SetMachineTypeInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetMachineTypeInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetMetadataInstanceRequest> __Marshaller_google_cloud_compute_v1_SetMetadataInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetMetadataInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetMinCpuPlatformInstanceRequest> __Marshaller_google_cloud_compute_v1_SetMinCpuPlatformInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetMinCpuPlatformInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetSchedulingInstanceRequest> __Marshaller_google_cloud_compute_v1_SetSchedulingInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetSchedulingInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetServiceAccountInstanceRequest> __Marshaller_google_cloud_compute_v1_SetServiceAccountInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetServiceAccountInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetShieldedInstanceIntegrityPolicyInstanceRequest> __Marshaller_google_cloud_compute_v1_SetShieldedInstanceIntegrityPolicyInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetShieldedInstanceIntegrityPolicyInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetTagsInstanceRequest> __Marshaller_google_cloud_compute_v1_SetTagsInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetTagsInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SimulateMaintenanceEventInstanceRequest> __Marshaller_google_cloud_compute_v1_SimulateMaintenanceEventInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SimulateMaintenanceEventInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.StartInstanceRequest> __Marshaller_google_cloud_compute_v1_StartInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.StartInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.StartWithEncryptionKeyInstanceRequest> __Marshaller_google_cloud_compute_v1_StartWithEncryptionKeyInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.StartWithEncryptionKeyInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.StopInstanceRequest> __Marshaller_google_cloud_compute_v1_StopInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.StopInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceRequest> __Marshaller_google_cloud_compute_v1_TestIamPermissionsInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Marshaller_google_cloud_compute_v1_TestPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestPermissionsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdateInstanceRequest> __Marshaller_google_cloud_compute_v1_UpdateInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdateInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdateAccessConfigInstanceRequest> __Marshaller_google_cloud_compute_v1_UpdateAccessConfigInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdateAccessConfigInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdateDisplayDeviceInstanceRequest> __Marshaller_google_cloud_compute_v1_UpdateDisplayDeviceInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdateDisplayDeviceInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdateNetworkInterfaceInstanceRequest> __Marshaller_google_cloud_compute_v1_UpdateNetworkInterfaceInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdateNetworkInterfaceInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdateShieldedInstanceConfigInstanceRequest> __Marshaller_google_cloud_compute_v1_UpdateShieldedInstanceConfigInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdateShieldedInstanceConfigInstanceRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AddAccessConfigInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_AddAccessConfig = new grpc::Method<global::Google.Cloud.Compute.V1.AddAccessConfigInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddAccessConfig",
        __Marshaller_google_cloud_compute_v1_AddAccessConfigInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AddResourcePoliciesInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_AddResourcePolicies = new grpc::Method<global::Google.Cloud.Compute.V1.AddResourcePoliciesInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddResourcePolicies",
        __Marshaller_google_cloud_compute_v1_AddResourcePoliciesInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListInstancesRequest, global::Google.Cloud.Compute.V1.InstanceAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListInstancesRequest, global::Google.Cloud.Compute.V1.InstanceAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListInstancesRequest,
        __Marshaller_google_cloud_compute_v1_InstanceAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AttachDiskInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_AttachDisk = new grpc::Method<global::Google.Cloud.Compute.V1.AttachDiskInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AttachDisk",
        __Marshaller_google_cloud_compute_v1_AttachDiskInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteAccessConfigInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_DeleteAccessConfig = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteAccessConfigInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAccessConfig",
        __Marshaller_google_cloud_compute_v1_DeleteAccessConfigInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DetachDiskInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_DetachDisk = new grpc::Method<global::Google.Cloud.Compute.V1.DetachDiskInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DetachDisk",
        __Marshaller_google_cloud_compute_v1_DetachDiskInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetInstanceRequest, global::Google.Cloud.Compute.V1.Instance> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetInstanceRequest, global::Google.Cloud.Compute.V1.Instance>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Instance);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetGuestAttributesInstanceRequest, global::Google.Cloud.Compute.V1.GuestAttributes> __Method_GetGuestAttributes = new grpc::Method<global::Google.Cloud.Compute.V1.GetGuestAttributesInstanceRequest, global::Google.Cloud.Compute.V1.GuestAttributes>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGuestAttributes",
        __Marshaller_google_cloud_compute_v1_GetGuestAttributesInstanceRequest,
        __Marshaller_google_cloud_compute_v1_GuestAttributes);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyInstanceRequest, global::Google.Cloud.Compute.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyInstanceRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_cloud_compute_v1_GetIamPolicyInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetScreenshotInstanceRequest, global::Google.Cloud.Compute.V1.Screenshot> __Method_GetScreenshot = new grpc::Method<global::Google.Cloud.Compute.V1.GetScreenshotInstanceRequest, global::Google.Cloud.Compute.V1.Screenshot>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetScreenshot",
        __Marshaller_google_cloud_compute_v1_GetScreenshotInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Screenshot);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetSerialPortOutputInstanceRequest, global::Google.Cloud.Compute.V1.SerialPortOutput> __Method_GetSerialPortOutput = new grpc::Method<global::Google.Cloud.Compute.V1.GetSerialPortOutputInstanceRequest, global::Google.Cloud.Compute.V1.SerialPortOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSerialPortOutput",
        __Marshaller_google_cloud_compute_v1_GetSerialPortOutputInstanceRequest,
        __Marshaller_google_cloud_compute_v1_SerialPortOutput);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetShieldedInstanceIdentityInstanceRequest, global::Google.Cloud.Compute.V1.ShieldedInstanceIdentity> __Method_GetShieldedInstanceIdentity = new grpc::Method<global::Google.Cloud.Compute.V1.GetShieldedInstanceIdentityInstanceRequest, global::Google.Cloud.Compute.V1.ShieldedInstanceIdentity>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetShieldedInstanceIdentity",
        __Marshaller_google_cloud_compute_v1_GetShieldedInstanceIdentityInstanceRequest,
        __Marshaller_google_cloud_compute_v1_ShieldedInstanceIdentity);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListInstancesRequest, global::Google.Cloud.Compute.V1.InstanceList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListInstancesRequest, global::Google.Cloud.Compute.V1.InstanceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListInstancesRequest,
        __Marshaller_google_cloud_compute_v1_InstanceList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListReferrersInstancesRequest, global::Google.Cloud.Compute.V1.InstanceListReferrers> __Method_ListReferrers = new grpc::Method<global::Google.Cloud.Compute.V1.ListReferrersInstancesRequest, global::Google.Cloud.Compute.V1.InstanceListReferrers>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListReferrers",
        __Marshaller_google_cloud_compute_v1_ListReferrersInstancesRequest,
        __Marshaller_google_cloud_compute_v1_InstanceListReferrers);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.RemoveResourcePoliciesInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_RemoveResourcePolicies = new grpc::Method<global::Google.Cloud.Compute.V1.RemoveResourcePoliciesInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveResourcePolicies",
        __Marshaller_google_cloud_compute_v1_RemoveResourcePoliciesInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ResetInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Reset = new grpc::Method<global::Google.Cloud.Compute.V1.ResetInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Reset",
        __Marshaller_google_cloud_compute_v1_ResetInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetDeletionProtectionInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetDeletionProtection = new grpc::Method<global::Google.Cloud.Compute.V1.SetDeletionProtectionInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetDeletionProtection",
        __Marshaller_google_cloud_compute_v1_SetDeletionProtectionInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetDiskAutoDeleteInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetDiskAutoDelete = new grpc::Method<global::Google.Cloud.Compute.V1.SetDiskAutoDeleteInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetDiskAutoDelete",
        __Marshaller_google_cloud_compute_v1_SetDiskAutoDeleteInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyInstanceRequest, global::Google.Cloud.Compute.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyInstanceRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_cloud_compute_v1_SetIamPolicyInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetLabelsInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetLabels = new grpc::Method<global::Google.Cloud.Compute.V1.SetLabelsInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetLabels",
        __Marshaller_google_cloud_compute_v1_SetLabelsInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetMachineResourcesInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetMachineResources = new grpc::Method<global::Google.Cloud.Compute.V1.SetMachineResourcesInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetMachineResources",
        __Marshaller_google_cloud_compute_v1_SetMachineResourcesInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetMachineTypeInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetMachineType = new grpc::Method<global::Google.Cloud.Compute.V1.SetMachineTypeInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetMachineType",
        __Marshaller_google_cloud_compute_v1_SetMachineTypeInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetMetadataInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetMetadata = new grpc::Method<global::Google.Cloud.Compute.V1.SetMetadataInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetMetadata",
        __Marshaller_google_cloud_compute_v1_SetMetadataInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetMinCpuPlatformInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetMinCpuPlatform = new grpc::Method<global::Google.Cloud.Compute.V1.SetMinCpuPlatformInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetMinCpuPlatform",
        __Marshaller_google_cloud_compute_v1_SetMinCpuPlatformInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetSchedulingInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetScheduling = new grpc::Method<global::Google.Cloud.Compute.V1.SetSchedulingInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetScheduling",
        __Marshaller_google_cloud_compute_v1_SetSchedulingInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetServiceAccountInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetServiceAccount = new grpc::Method<global::Google.Cloud.Compute.V1.SetServiceAccountInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetServiceAccount",
        __Marshaller_google_cloud_compute_v1_SetServiceAccountInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetShieldedInstanceIntegrityPolicyInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetShieldedInstanceIntegrityPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.SetShieldedInstanceIntegrityPolicyInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetShieldedInstanceIntegrityPolicy",
        __Marshaller_google_cloud_compute_v1_SetShieldedInstanceIntegrityPolicyInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetTagsInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetTags = new grpc::Method<global::Google.Cloud.Compute.V1.SetTagsInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTags",
        __Marshaller_google_cloud_compute_v1_SetTagsInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SimulateMaintenanceEventInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SimulateMaintenanceEvent = new grpc::Method<global::Google.Cloud.Compute.V1.SimulateMaintenanceEventInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SimulateMaintenanceEvent",
        __Marshaller_google_cloud_compute_v1_SimulateMaintenanceEventInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.StartInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Start = new grpc::Method<global::Google.Cloud.Compute.V1.StartInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Start",
        __Marshaller_google_cloud_compute_v1_StartInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.StartWithEncryptionKeyInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_StartWithEncryptionKey = new grpc::Method<global::Google.Cloud.Compute.V1.StartWithEncryptionKeyInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartWithEncryptionKey",
        __Marshaller_google_cloud_compute_v1_StartWithEncryptionKeyInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.StopInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Stop = new grpc::Method<global::Google.Cloud.Compute.V1.StopInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Stop",
        __Marshaller_google_cloud_compute_v1_StopInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_cloud_compute_v1_TestIamPermissionsInstanceRequest,
        __Marshaller_google_cloud_compute_v1_TestPermissionsResponse);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdateInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Update = new grpc::Method<global::Google.Cloud.Compute.V1.UpdateInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_google_cloud_compute_v1_UpdateInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdateAccessConfigInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_UpdateAccessConfig = new grpc::Method<global::Google.Cloud.Compute.V1.UpdateAccessConfigInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccessConfig",
        __Marshaller_google_cloud_compute_v1_UpdateAccessConfigInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdateDisplayDeviceInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_UpdateDisplayDevice = new grpc::Method<global::Google.Cloud.Compute.V1.UpdateDisplayDeviceInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDisplayDevice",
        __Marshaller_google_cloud_compute_v1_UpdateDisplayDeviceInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdateNetworkInterfaceInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_UpdateNetworkInterface = new grpc::Method<global::Google.Cloud.Compute.V1.UpdateNetworkInterfaceInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateNetworkInterface",
        __Marshaller_google_cloud_compute_v1_UpdateNetworkInterfaceInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdateShieldedInstanceConfigInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_UpdateShieldedInstanceConfig = new grpc::Method<global::Google.Cloud.Compute.V1.UpdateShieldedInstanceConfigInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateShieldedInstanceConfig",
        __Marshaller_google_cloud_compute_v1_UpdateShieldedInstanceConfigInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[20]; }
    }

    /// <summary>Base class for server-side implementations of Instances</summary>
    [grpc::BindServiceMethod(typeof(Instances), "BindService")]
    public abstract partial class InstancesBase
    {
      /// <summary>
      /// Adds an access config to an instance's network interface.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> AddAccessConfig(global::Google.Cloud.Compute.V1.AddAccessConfigInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Adds existing resource policies to an instance. You can only add one policy right now which will be applied to this instance for scheduling live migrations.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> AddResourcePolicies(global::Google.Cloud.Compute.V1.AddResourcePoliciesInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves aggregated list of all of the instances in your project across all regions and zones.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InstanceAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListInstancesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Attaches an existing Disk resource to an instance. You must first create the disk before you can attach it. It is not possible to create and attach a disk at the same time. For more information, read Adding a persistent disk to your instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> AttachDisk(global::Google.Cloud.Compute.V1.AttachDiskInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified Instance resource. For more information, see Stopping or Deleting an Instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes an access config from an instance's network interface.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> DeleteAccessConfig(global::Google.Cloud.Compute.V1.DeleteAccessConfigInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Detaches a disk from an instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> DetachDisk(global::Google.Cloud.Compute.V1.DetachDiskInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified Instance resource. Gets a list of available instances by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Instance> Get(global::Google.Cloud.Compute.V1.GetInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified guest attributes entry.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.GuestAttributes> GetGuestAttributes(global::Google.Cloud.Compute.V1.GetGuestAttributesInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the screenshot from the specified instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Screenshot> GetScreenshot(global::Google.Cloud.Compute.V1.GetScreenshotInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the last 1 MB of serial port output from the specified instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.SerialPortOutput> GetSerialPortOutput(global::Google.Cloud.Compute.V1.GetSerialPortOutputInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the Shielded Instance Identity of an instance
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.ShieldedInstanceIdentity> GetShieldedInstanceIdentity(global::Google.Cloud.Compute.V1.GetShieldedInstanceIdentityInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates an instance resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of instances contained within the specified zone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InstanceList> List(global::Google.Cloud.Compute.V1.ListInstancesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of resources that refer to the VM instance specified in the request. For example, if the VM instance is part of a managed or unmanaged instance group, the referrers list includes the instance group. For more information, read Viewing referrers to VM instances.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InstanceListReferrers> ListReferrers(global::Google.Cloud.Compute.V1.ListReferrersInstancesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes resource policies from an instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> RemoveResourcePolicies(global::Google.Cloud.Compute.V1.RemoveResourcePoliciesInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Performs a reset on the instance. This is a hard reset the VM does not do a graceful shutdown. For more information, see Resetting an instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Reset(global::Google.Cloud.Compute.V1.ResetInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets deletion protection on the instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetDeletionProtection(global::Google.Cloud.Compute.V1.SetDeletionProtectionInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the auto-delete flag for a disk attached to an instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetDiskAutoDelete(global::Google.Cloud.Compute.V1.SetDiskAutoDeleteInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets labels on an instance. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetLabels(global::Google.Cloud.Compute.V1.SetLabelsInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Changes the number and/or type of accelerator for a stopped instance to the values specified in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetMachineResources(global::Google.Cloud.Compute.V1.SetMachineResourcesInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Changes the machine type for a stopped instance to the machine type specified in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetMachineType(global::Google.Cloud.Compute.V1.SetMachineTypeInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets metadata for the specified instance to the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetMetadata(global::Google.Cloud.Compute.V1.SetMetadataInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Changes the minimum CPU platform that this instance should use. This method can only be called on a stopped instance. For more information, read Specifying a Minimum CPU Platform.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetMinCpuPlatform(global::Google.Cloud.Compute.V1.SetMinCpuPlatformInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets an instance's scheduling options. You can only call this method on a stopped instance, that is, a VM instance that is in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetScheduling(global::Google.Cloud.Compute.V1.SetSchedulingInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the service account on the instance. For more information, read Changing the service account and access scopes for an instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetServiceAccount(global::Google.Cloud.Compute.V1.SetServiceAccountInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the Shielded Instance integrity policy for an instance. You can only use this method on a running instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetShieldedInstanceIntegrityPolicy(global::Google.Cloud.Compute.V1.SetShieldedInstanceIntegrityPolicyInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets network tags for the specified instance to the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetTags(global::Google.Cloud.Compute.V1.SetTagsInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Simulates a maintenance event on the instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SimulateMaintenanceEvent(global::Google.Cloud.Compute.V1.SimulateMaintenanceEventInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Start(global::Google.Cloud.Compute.V1.StartInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> StartWithEncryptionKey(global::Google.Cloud.Compute.V1.StartWithEncryptionKeyInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stops a running instance, shutting it down cleanly, and allows you to restart the instance at a later time. Stopped instances do not incur VM usage charges while they are stopped. However, resources that the VM is using, such as persistent disks and static IP addresses, will continue to be charged until they are deleted. For more information, see Stopping an instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Stop(global::Google.Cloud.Compute.V1.StopInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an instance only if the necessary resources are available. This method can update only a specific set of instance properties. See  Updating a running instance for a list of updatable instance properties.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Update(global::Google.Cloud.Compute.V1.UpdateInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified access config from an instance's network interface with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> UpdateAccessConfig(global::Google.Cloud.Compute.V1.UpdateAccessConfigInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the Display config for a VM instance. You can only use this method on a stopped VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> UpdateDisplayDevice(global::Google.Cloud.Compute.V1.UpdateDisplayDeviceInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an instance's network interface. This method follows PATCH semantics.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> UpdateNetworkInterface(global::Google.Cloud.Compute.V1.UpdateNetworkInterfaceInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the Shielded Instance config for an instance. You can only use this method on a stopped instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> UpdateShieldedInstanceConfig(global::Google.Cloud.Compute.V1.UpdateShieldedInstanceConfigInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Instances</summary>
    public partial class InstancesClient : grpc::ClientBase<InstancesClient>
    {
      /// <summary>Creates a new client for Instances</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public InstancesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Instances that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public InstancesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected InstancesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected InstancesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Adds an access config to an instance's network interface.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddAccessConfig(global::Google.Cloud.Compute.V1.AddAccessConfigInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddAccessConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds an access config to an instance's network interface.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddAccessConfig(global::Google.Cloud.Compute.V1.AddAccessConfigInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddAccessConfig, null, options, request);
      }
      /// <summary>
      /// Adds an access config to an instance's network interface.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddAccessConfigAsync(global::Google.Cloud.Compute.V1.AddAccessConfigInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddAccessConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds an access config to an instance's network interface.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddAccessConfigAsync(global::Google.Cloud.Compute.V1.AddAccessConfigInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddAccessConfig, null, options, request);
      }
      /// <summary>
      /// Adds existing resource policies to an instance. You can only add one policy right now which will be applied to this instance for scheduling live migrations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddResourcePolicies(global::Google.Cloud.Compute.V1.AddResourcePoliciesInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddResourcePolicies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds existing resource policies to an instance. You can only add one policy right now which will be applied to this instance for scheduling live migrations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddResourcePolicies(global::Google.Cloud.Compute.V1.AddResourcePoliciesInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddResourcePolicies, null, options, request);
      }
      /// <summary>
      /// Adds existing resource policies to an instance. You can only add one policy right now which will be applied to this instance for scheduling live migrations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddResourcePoliciesAsync(global::Google.Cloud.Compute.V1.AddResourcePoliciesInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddResourcePoliciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds existing resource policies to an instance. You can only add one policy right now which will be applied to this instance for scheduling live migrations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddResourcePoliciesAsync(global::Google.Cloud.Compute.V1.AddResourcePoliciesInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddResourcePolicies, null, options, request);
      }
      /// <summary>
      /// Retrieves aggregated list of all of the instances in your project across all regions and zones.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListInstancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves aggregated list of all of the instances in your project across all regions and zones.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListInstancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves aggregated list of all of the instances in your project across all regions and zones.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListInstancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves aggregated list of all of the instances in your project across all regions and zones.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListInstancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Attaches an existing Disk resource to an instance. You must first create the disk before you can attach it. It is not possible to create and attach a disk at the same time. For more information, read Adding a persistent disk to your instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AttachDisk(global::Google.Cloud.Compute.V1.AttachDiskInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AttachDisk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Attaches an existing Disk resource to an instance. You must first create the disk before you can attach it. It is not possible to create and attach a disk at the same time. For more information, read Adding a persistent disk to your instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AttachDisk(global::Google.Cloud.Compute.V1.AttachDiskInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AttachDisk, null, options, request);
      }
      /// <summary>
      /// Attaches an existing Disk resource to an instance. You must first create the disk before you can attach it. It is not possible to create and attach a disk at the same time. For more information, read Adding a persistent disk to your instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AttachDiskAsync(global::Google.Cloud.Compute.V1.AttachDiskInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AttachDiskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Attaches an existing Disk resource to an instance. You must first create the disk before you can attach it. It is not possible to create and attach a disk at the same time. For more information, read Adding a persistent disk to your instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AttachDiskAsync(global::Google.Cloud.Compute.V1.AttachDiskInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AttachDisk, null, options, request);
      }
      /// <summary>
      /// Deletes the specified Instance resource. For more information, see Stopping or Deleting an Instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified Instance resource. For more information, see Stopping or Deleting an Instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified Instance resource. For more information, see Stopping or Deleting an Instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified Instance resource. For more information, see Stopping or Deleting an Instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes an access config from an instance's network interface.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DeleteAccessConfig(global::Google.Cloud.Compute.V1.DeleteAccessConfigInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccessConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an access config from an instance's network interface.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DeleteAccessConfig(global::Google.Cloud.Compute.V1.DeleteAccessConfigInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAccessConfig, null, options, request);
      }
      /// <summary>
      /// Deletes an access config from an instance's network interface.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAccessConfigAsync(global::Google.Cloud.Compute.V1.DeleteAccessConfigInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccessConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an access config from an instance's network interface.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAccessConfigAsync(global::Google.Cloud.Compute.V1.DeleteAccessConfigInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAccessConfig, null, options, request);
      }
      /// <summary>
      /// Detaches a disk from an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DetachDisk(global::Google.Cloud.Compute.V1.DetachDiskInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DetachDisk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Detaches a disk from an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DetachDisk(global::Google.Cloud.Compute.V1.DetachDiskInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DetachDisk, null, options, request);
      }
      /// <summary>
      /// Detaches a disk from an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DetachDiskAsync(global::Google.Cloud.Compute.V1.DetachDiskInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DetachDiskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Detaches a disk from an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DetachDiskAsync(global::Google.Cloud.Compute.V1.DetachDiskInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DetachDisk, null, options, request);
      }
      /// <summary>
      /// Returns the specified Instance resource. Gets a list of available instances by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Instance Get(global::Google.Cloud.Compute.V1.GetInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified Instance resource. Gets a list of available instances by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Instance Get(global::Google.Cloud.Compute.V1.GetInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified Instance resource. Gets a list of available instances by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Instance> GetAsync(global::Google.Cloud.Compute.V1.GetInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified Instance resource. Gets a list of available instances by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Instance> GetAsync(global::Google.Cloud.Compute.V1.GetInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified guest attributes entry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.GuestAttributes GetGuestAttributes(global::Google.Cloud.Compute.V1.GetGuestAttributesInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGuestAttributes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified guest attributes entry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.GuestAttributes GetGuestAttributes(global::Google.Cloud.Compute.V1.GetGuestAttributesInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGuestAttributes, null, options, request);
      }
      /// <summary>
      /// Returns the specified guest attributes entry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.GuestAttributes> GetGuestAttributesAsync(global::Google.Cloud.Compute.V1.GetGuestAttributesInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGuestAttributesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified guest attributes entry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.GuestAttributes> GetGuestAttributesAsync(global::Google.Cloud.Compute.V1.GetGuestAttributesInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGuestAttributes, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Returns the screenshot from the specified instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Screenshot GetScreenshot(global::Google.Cloud.Compute.V1.GetScreenshotInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetScreenshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the screenshot from the specified instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Screenshot GetScreenshot(global::Google.Cloud.Compute.V1.GetScreenshotInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetScreenshot, null, options, request);
      }
      /// <summary>
      /// Returns the screenshot from the specified instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Screenshot> GetScreenshotAsync(global::Google.Cloud.Compute.V1.GetScreenshotInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetScreenshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the screenshot from the specified instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Screenshot> GetScreenshotAsync(global::Google.Cloud.Compute.V1.GetScreenshotInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetScreenshot, null, options, request);
      }
      /// <summary>
      /// Returns the last 1 MB of serial port output from the specified instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SerialPortOutput GetSerialPortOutput(global::Google.Cloud.Compute.V1.GetSerialPortOutputInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSerialPortOutput(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the last 1 MB of serial port output from the specified instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SerialPortOutput GetSerialPortOutput(global::Google.Cloud.Compute.V1.GetSerialPortOutputInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSerialPortOutput, null, options, request);
      }
      /// <summary>
      /// Returns the last 1 MB of serial port output from the specified instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SerialPortOutput> GetSerialPortOutputAsync(global::Google.Cloud.Compute.V1.GetSerialPortOutputInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSerialPortOutputAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the last 1 MB of serial port output from the specified instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SerialPortOutput> GetSerialPortOutputAsync(global::Google.Cloud.Compute.V1.GetSerialPortOutputInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSerialPortOutput, null, options, request);
      }
      /// <summary>
      /// Returns the Shielded Instance Identity of an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ShieldedInstanceIdentity GetShieldedInstanceIdentity(global::Google.Cloud.Compute.V1.GetShieldedInstanceIdentityInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetShieldedInstanceIdentity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the Shielded Instance Identity of an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ShieldedInstanceIdentity GetShieldedInstanceIdentity(global::Google.Cloud.Compute.V1.GetShieldedInstanceIdentityInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetShieldedInstanceIdentity, null, options, request);
      }
      /// <summary>
      /// Returns the Shielded Instance Identity of an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ShieldedInstanceIdentity> GetShieldedInstanceIdentityAsync(global::Google.Cloud.Compute.V1.GetShieldedInstanceIdentityInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetShieldedInstanceIdentityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the Shielded Instance Identity of an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ShieldedInstanceIdentity> GetShieldedInstanceIdentityAsync(global::Google.Cloud.Compute.V1.GetShieldedInstanceIdentityInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetShieldedInstanceIdentity, null, options, request);
      }
      /// <summary>
      /// Creates an instance resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an instance resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates an instance resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an instance resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of instances contained within the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceList List(global::Google.Cloud.Compute.V1.ListInstancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of instances contained within the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceList List(global::Google.Cloud.Compute.V1.ListInstancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of instances contained within the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceList> ListAsync(global::Google.Cloud.Compute.V1.ListInstancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of instances contained within the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceList> ListAsync(global::Google.Cloud.Compute.V1.ListInstancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of resources that refer to the VM instance specified in the request. For example, if the VM instance is part of a managed or unmanaged instance group, the referrers list includes the instance group. For more information, read Viewing referrers to VM instances.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceListReferrers ListReferrers(global::Google.Cloud.Compute.V1.ListReferrersInstancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListReferrers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of resources that refer to the VM instance specified in the request. For example, if the VM instance is part of a managed or unmanaged instance group, the referrers list includes the instance group. For more information, read Viewing referrers to VM instances.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceListReferrers ListReferrers(global::Google.Cloud.Compute.V1.ListReferrersInstancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListReferrers, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of resources that refer to the VM instance specified in the request. For example, if the VM instance is part of a managed or unmanaged instance group, the referrers list includes the instance group. For more information, read Viewing referrers to VM instances.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceListReferrers> ListReferrersAsync(global::Google.Cloud.Compute.V1.ListReferrersInstancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListReferrersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of resources that refer to the VM instance specified in the request. For example, if the VM instance is part of a managed or unmanaged instance group, the referrers list includes the instance group. For more information, read Viewing referrers to VM instances.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceListReferrers> ListReferrersAsync(global::Google.Cloud.Compute.V1.ListReferrersInstancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListReferrers, null, options, request);
      }
      /// <summary>
      /// Removes resource policies from an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RemoveResourcePolicies(global::Google.Cloud.Compute.V1.RemoveResourcePoliciesInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveResourcePolicies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes resource policies from an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RemoveResourcePolicies(global::Google.Cloud.Compute.V1.RemoveResourcePoliciesInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveResourcePolicies, null, options, request);
      }
      /// <summary>
      /// Removes resource policies from an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RemoveResourcePoliciesAsync(global::Google.Cloud.Compute.V1.RemoveResourcePoliciesInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveResourcePoliciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes resource policies from an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RemoveResourcePoliciesAsync(global::Google.Cloud.Compute.V1.RemoveResourcePoliciesInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveResourcePolicies, null, options, request);
      }
      /// <summary>
      /// Performs a reset on the instance. This is a hard reset the VM does not do a graceful shutdown. For more information, see Resetting an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Reset(global::Google.Cloud.Compute.V1.ResetInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Reset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Performs a reset on the instance. This is a hard reset the VM does not do a graceful shutdown. For more information, see Resetting an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Reset(global::Google.Cloud.Compute.V1.ResetInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Reset, null, options, request);
      }
      /// <summary>
      /// Performs a reset on the instance. This is a hard reset the VM does not do a graceful shutdown. For more information, see Resetting an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> ResetAsync(global::Google.Cloud.Compute.V1.ResetInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Performs a reset on the instance. This is a hard reset the VM does not do a graceful shutdown. For more information, see Resetting an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> ResetAsync(global::Google.Cloud.Compute.V1.ResetInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Reset, null, options, request);
      }
      /// <summary>
      /// Sets deletion protection on the instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetDeletionProtection(global::Google.Cloud.Compute.V1.SetDeletionProtectionInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetDeletionProtection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets deletion protection on the instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetDeletionProtection(global::Google.Cloud.Compute.V1.SetDeletionProtectionInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetDeletionProtection, null, options, request);
      }
      /// <summary>
      /// Sets deletion protection on the instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetDeletionProtectionAsync(global::Google.Cloud.Compute.V1.SetDeletionProtectionInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetDeletionProtectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets deletion protection on the instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetDeletionProtectionAsync(global::Google.Cloud.Compute.V1.SetDeletionProtectionInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetDeletionProtection, null, options, request);
      }
      /// <summary>
      /// Sets the auto-delete flag for a disk attached to an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetDiskAutoDelete(global::Google.Cloud.Compute.V1.SetDiskAutoDeleteInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetDiskAutoDelete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the auto-delete flag for a disk attached to an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetDiskAutoDelete(global::Google.Cloud.Compute.V1.SetDiskAutoDeleteInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetDiskAutoDelete, null, options, request);
      }
      /// <summary>
      /// Sets the auto-delete flag for a disk attached to an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetDiskAutoDeleteAsync(global::Google.Cloud.Compute.V1.SetDiskAutoDeleteInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetDiskAutoDeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the auto-delete flag for a disk attached to an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetDiskAutoDeleteAsync(global::Google.Cloud.Compute.V1.SetDiskAutoDeleteInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetDiskAutoDelete, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets labels on an instance. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetLabels(global::Google.Cloud.Compute.V1.SetLabelsInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLabels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets labels on an instance. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetLabels(global::Google.Cloud.Compute.V1.SetLabelsInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetLabels, null, options, request);
      }
      /// <summary>
      /// Sets labels on an instance. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetLabelsAsync(global::Google.Cloud.Compute.V1.SetLabelsInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLabelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets labels on an instance. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetLabelsAsync(global::Google.Cloud.Compute.V1.SetLabelsInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetLabels, null, options, request);
      }
      /// <summary>
      /// Changes the number and/or type of accelerator for a stopped instance to the values specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetMachineResources(global::Google.Cloud.Compute.V1.SetMachineResourcesInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetMachineResources(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the number and/or type of accelerator for a stopped instance to the values specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetMachineResources(global::Google.Cloud.Compute.V1.SetMachineResourcesInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetMachineResources, null, options, request);
      }
      /// <summary>
      /// Changes the number and/or type of accelerator for a stopped instance to the values specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetMachineResourcesAsync(global::Google.Cloud.Compute.V1.SetMachineResourcesInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetMachineResourcesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the number and/or type of accelerator for a stopped instance to the values specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetMachineResourcesAsync(global::Google.Cloud.Compute.V1.SetMachineResourcesInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetMachineResources, null, options, request);
      }
      /// <summary>
      /// Changes the machine type for a stopped instance to the machine type specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetMachineType(global::Google.Cloud.Compute.V1.SetMachineTypeInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetMachineType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the machine type for a stopped instance to the machine type specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetMachineType(global::Google.Cloud.Compute.V1.SetMachineTypeInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetMachineType, null, options, request);
      }
      /// <summary>
      /// Changes the machine type for a stopped instance to the machine type specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetMachineTypeAsync(global::Google.Cloud.Compute.V1.SetMachineTypeInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetMachineTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the machine type for a stopped instance to the machine type specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetMachineTypeAsync(global::Google.Cloud.Compute.V1.SetMachineTypeInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetMachineType, null, options, request);
      }
      /// <summary>
      /// Sets metadata for the specified instance to the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetMetadata(global::Google.Cloud.Compute.V1.SetMetadataInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets metadata for the specified instance to the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetMetadata(global::Google.Cloud.Compute.V1.SetMetadataInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetMetadata, null, options, request);
      }
      /// <summary>
      /// Sets metadata for the specified instance to the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetMetadataAsync(global::Google.Cloud.Compute.V1.SetMetadataInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets metadata for the specified instance to the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetMetadataAsync(global::Google.Cloud.Compute.V1.SetMetadataInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetMetadata, null, options, request);
      }
      /// <summary>
      /// Changes the minimum CPU platform that this instance should use. This method can only be called on a stopped instance. For more information, read Specifying a Minimum CPU Platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetMinCpuPlatform(global::Google.Cloud.Compute.V1.SetMinCpuPlatformInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetMinCpuPlatform(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the minimum CPU platform that this instance should use. This method can only be called on a stopped instance. For more information, read Specifying a Minimum CPU Platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetMinCpuPlatform(global::Google.Cloud.Compute.V1.SetMinCpuPlatformInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetMinCpuPlatform, null, options, request);
      }
      /// <summary>
      /// Changes the minimum CPU platform that this instance should use. This method can only be called on a stopped instance. For more information, read Specifying a Minimum CPU Platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetMinCpuPlatformAsync(global::Google.Cloud.Compute.V1.SetMinCpuPlatformInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetMinCpuPlatformAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the minimum CPU platform that this instance should use. This method can only be called on a stopped instance. For more information, read Specifying a Minimum CPU Platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetMinCpuPlatformAsync(global::Google.Cloud.Compute.V1.SetMinCpuPlatformInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetMinCpuPlatform, null, options, request);
      }
      /// <summary>
      /// Sets an instance's scheduling options. You can only call this method on a stopped instance, that is, a VM instance that is in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetScheduling(global::Google.Cloud.Compute.V1.SetSchedulingInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetScheduling(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets an instance's scheduling options. You can only call this method on a stopped instance, that is, a VM instance that is in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetScheduling(global::Google.Cloud.Compute.V1.SetSchedulingInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetScheduling, null, options, request);
      }
      /// <summary>
      /// Sets an instance's scheduling options. You can only call this method on a stopped instance, that is, a VM instance that is in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetSchedulingAsync(global::Google.Cloud.Compute.V1.SetSchedulingInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSchedulingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets an instance's scheduling options. You can only call this method on a stopped instance, that is, a VM instance that is in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetSchedulingAsync(global::Google.Cloud.Compute.V1.SetSchedulingInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetScheduling, null, options, request);
      }
      /// <summary>
      /// Sets the service account on the instance. For more information, read Changing the service account and access scopes for an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetServiceAccount(global::Google.Cloud.Compute.V1.SetServiceAccountInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetServiceAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the service account on the instance. For more information, read Changing the service account and access scopes for an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetServiceAccount(global::Google.Cloud.Compute.V1.SetServiceAccountInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetServiceAccount, null, options, request);
      }
      /// <summary>
      /// Sets the service account on the instance. For more information, read Changing the service account and access scopes for an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetServiceAccountAsync(global::Google.Cloud.Compute.V1.SetServiceAccountInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetServiceAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the service account on the instance. For more information, read Changing the service account and access scopes for an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetServiceAccountAsync(global::Google.Cloud.Compute.V1.SetServiceAccountInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetServiceAccount, null, options, request);
      }
      /// <summary>
      /// Sets the Shielded Instance integrity policy for an instance. You can only use this method on a running instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetShieldedInstanceIntegrityPolicy(global::Google.Cloud.Compute.V1.SetShieldedInstanceIntegrityPolicyInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetShieldedInstanceIntegrityPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the Shielded Instance integrity policy for an instance. You can only use this method on a running instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetShieldedInstanceIntegrityPolicy(global::Google.Cloud.Compute.V1.SetShieldedInstanceIntegrityPolicyInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetShieldedInstanceIntegrityPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the Shielded Instance integrity policy for an instance. You can only use this method on a running instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetShieldedInstanceIntegrityPolicyAsync(global::Google.Cloud.Compute.V1.SetShieldedInstanceIntegrityPolicyInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetShieldedInstanceIntegrityPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the Shielded Instance integrity policy for an instance. You can only use this method on a running instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetShieldedInstanceIntegrityPolicyAsync(global::Google.Cloud.Compute.V1.SetShieldedInstanceIntegrityPolicyInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetShieldedInstanceIntegrityPolicy, null, options, request);
      }
      /// <summary>
      /// Sets network tags for the specified instance to the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetTags(global::Google.Cloud.Compute.V1.SetTagsInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTags(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets network tags for the specified instance to the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetTags(global::Google.Cloud.Compute.V1.SetTagsInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTags, null, options, request);
      }
      /// <summary>
      /// Sets network tags for the specified instance to the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetTagsAsync(global::Google.Cloud.Compute.V1.SetTagsInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTagsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets network tags for the specified instance to the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetTagsAsync(global::Google.Cloud.Compute.V1.SetTagsInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTags, null, options, request);
      }
      /// <summary>
      /// Simulates a maintenance event on the instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SimulateMaintenanceEvent(global::Google.Cloud.Compute.V1.SimulateMaintenanceEventInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SimulateMaintenanceEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Simulates a maintenance event on the instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SimulateMaintenanceEvent(global::Google.Cloud.Compute.V1.SimulateMaintenanceEventInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SimulateMaintenanceEvent, null, options, request);
      }
      /// <summary>
      /// Simulates a maintenance event on the instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SimulateMaintenanceEventAsync(global::Google.Cloud.Compute.V1.SimulateMaintenanceEventInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SimulateMaintenanceEventAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Simulates a maintenance event on the instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SimulateMaintenanceEventAsync(global::Google.Cloud.Compute.V1.SimulateMaintenanceEventInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SimulateMaintenanceEvent, null, options, request);
      }
      /// <summary>
      /// Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Start(global::Google.Cloud.Compute.V1.StartInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Start(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Start(global::Google.Cloud.Compute.V1.StartInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Start, null, options, request);
      }
      /// <summary>
      /// Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> StartAsync(global::Google.Cloud.Compute.V1.StartInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> StartAsync(global::Google.Cloud.Compute.V1.StartInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Start, null, options, request);
      }
      /// <summary>
      /// Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation StartWithEncryptionKey(global::Google.Cloud.Compute.V1.StartWithEncryptionKeyInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartWithEncryptionKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation StartWithEncryptionKey(global::Google.Cloud.Compute.V1.StartWithEncryptionKeyInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartWithEncryptionKey, null, options, request);
      }
      /// <summary>
      /// Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> StartWithEncryptionKeyAsync(global::Google.Cloud.Compute.V1.StartWithEncryptionKeyInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartWithEncryptionKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> StartWithEncryptionKeyAsync(global::Google.Cloud.Compute.V1.StartWithEncryptionKeyInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartWithEncryptionKey, null, options, request);
      }
      /// <summary>
      /// Stops a running instance, shutting it down cleanly, and allows you to restart the instance at a later time. Stopped instances do not incur VM usage charges while they are stopped. However, resources that the VM is using, such as persistent disks and static IP addresses, will continue to be charged until they are deleted. For more information, see Stopping an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Stop(global::Google.Cloud.Compute.V1.StopInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Stop(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stops a running instance, shutting it down cleanly, and allows you to restart the instance at a later time. Stopped instances do not incur VM usage charges while they are stopped. However, resources that the VM is using, such as persistent disks and static IP addresses, will continue to be charged until they are deleted. For more information, see Stopping an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Stop(global::Google.Cloud.Compute.V1.StopInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Stop, null, options, request);
      }
      /// <summary>
      /// Stops a running instance, shutting it down cleanly, and allows you to restart the instance at a later time. Stopped instances do not incur VM usage charges while they are stopped. However, resources that the VM is using, such as persistent disks and static IP addresses, will continue to be charged until they are deleted. For more information, see Stopping an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> StopAsync(global::Google.Cloud.Compute.V1.StopInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stops a running instance, shutting it down cleanly, and allows you to restart the instance at a later time. Stopped instances do not incur VM usage charges while they are stopped. However, resources that the VM is using, such as persistent disks and static IP addresses, will continue to be charged until they are deleted. For more information, see Stopping an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> StopAsync(global::Google.Cloud.Compute.V1.StopInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Stop, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Updates an instance only if the necessary resources are available. This method can update only a specific set of instance properties. See  Updating a running instance for a list of updatable instance properties.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an instance only if the necessary resources are available. This method can update only a specific set of instance properties. See  Updating a running instance for a list of updatable instance properties.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Updates an instance only if the necessary resources are available. This method can update only a specific set of instance properties. See  Updating a running instance for a list of updatable instance properties.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an instance only if the necessary resources are available. This method can update only a specific set of instance properties. See  Updating a running instance for a list of updatable instance properties.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Updates the specified access config from an instance's network interface with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation UpdateAccessConfig(global::Google.Cloud.Compute.V1.UpdateAccessConfigInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccessConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified access config from an instance's network interface with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation UpdateAccessConfig(global::Google.Cloud.Compute.V1.UpdateAccessConfigInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccessConfig, null, options, request);
      }
      /// <summary>
      /// Updates the specified access config from an instance's network interface with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAccessConfigAsync(global::Google.Cloud.Compute.V1.UpdateAccessConfigInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccessConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified access config from an instance's network interface with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAccessConfigAsync(global::Google.Cloud.Compute.V1.UpdateAccessConfigInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccessConfig, null, options, request);
      }
      /// <summary>
      /// Updates the Display config for a VM instance. You can only use this method on a stopped VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation UpdateDisplayDevice(global::Google.Cloud.Compute.V1.UpdateDisplayDeviceInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDisplayDevice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the Display config for a VM instance. You can only use this method on a stopped VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation UpdateDisplayDevice(global::Google.Cloud.Compute.V1.UpdateDisplayDeviceInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDisplayDevice, null, options, request);
      }
      /// <summary>
      /// Updates the Display config for a VM instance. You can only use this method on a stopped VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateDisplayDeviceAsync(global::Google.Cloud.Compute.V1.UpdateDisplayDeviceInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDisplayDeviceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the Display config for a VM instance. You can only use this method on a stopped VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateDisplayDeviceAsync(global::Google.Cloud.Compute.V1.UpdateDisplayDeviceInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDisplayDevice, null, options, request);
      }
      /// <summary>
      /// Updates an instance's network interface. This method follows PATCH semantics.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation UpdateNetworkInterface(global::Google.Cloud.Compute.V1.UpdateNetworkInterfaceInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNetworkInterface(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an instance's network interface. This method follows PATCH semantics.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation UpdateNetworkInterface(global::Google.Cloud.Compute.V1.UpdateNetworkInterfaceInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateNetworkInterface, null, options, request);
      }
      /// <summary>
      /// Updates an instance's network interface. This method follows PATCH semantics.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateNetworkInterfaceAsync(global::Google.Cloud.Compute.V1.UpdateNetworkInterfaceInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNetworkInterfaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an instance's network interface. This method follows PATCH semantics.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateNetworkInterfaceAsync(global::Google.Cloud.Compute.V1.UpdateNetworkInterfaceInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateNetworkInterface, null, options, request);
      }
      /// <summary>
      /// Updates the Shielded Instance config for an instance. You can only use this method on a stopped instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation UpdateShieldedInstanceConfig(global::Google.Cloud.Compute.V1.UpdateShieldedInstanceConfigInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateShieldedInstanceConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the Shielded Instance config for an instance. You can only use this method on a stopped instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation UpdateShieldedInstanceConfig(global::Google.Cloud.Compute.V1.UpdateShieldedInstanceConfigInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateShieldedInstanceConfig, null, options, request);
      }
      /// <summary>
      /// Updates the Shielded Instance config for an instance. You can only use this method on a stopped instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateShieldedInstanceConfigAsync(global::Google.Cloud.Compute.V1.UpdateShieldedInstanceConfigInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateShieldedInstanceConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the Shielded Instance config for an instance. You can only use this method on a stopped instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateShieldedInstanceConfigAsync(global::Google.Cloud.Compute.V1.UpdateShieldedInstanceConfigInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateShieldedInstanceConfig, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override InstancesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InstancesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(InstancesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddAccessConfig, serviceImpl.AddAccessConfig)
          .AddMethod(__Method_AddResourcePolicies, serviceImpl.AddResourcePolicies)
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_AttachDisk, serviceImpl.AttachDisk)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_DeleteAccessConfig, serviceImpl.DeleteAccessConfig)
          .AddMethod(__Method_DetachDisk, serviceImpl.DetachDisk)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetGuestAttributes, serviceImpl.GetGuestAttributes)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_GetScreenshot, serviceImpl.GetScreenshot)
          .AddMethod(__Method_GetSerialPortOutput, serviceImpl.GetSerialPortOutput)
          .AddMethod(__Method_GetShieldedInstanceIdentity, serviceImpl.GetShieldedInstanceIdentity)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_ListReferrers, serviceImpl.ListReferrers)
          .AddMethod(__Method_RemoveResourcePolicies, serviceImpl.RemoveResourcePolicies)
          .AddMethod(__Method_Reset, serviceImpl.Reset)
          .AddMethod(__Method_SetDeletionProtection, serviceImpl.SetDeletionProtection)
          .AddMethod(__Method_SetDiskAutoDelete, serviceImpl.SetDiskAutoDelete)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_SetLabels, serviceImpl.SetLabels)
          .AddMethod(__Method_SetMachineResources, serviceImpl.SetMachineResources)
          .AddMethod(__Method_SetMachineType, serviceImpl.SetMachineType)
          .AddMethod(__Method_SetMetadata, serviceImpl.SetMetadata)
          .AddMethod(__Method_SetMinCpuPlatform, serviceImpl.SetMinCpuPlatform)
          .AddMethod(__Method_SetScheduling, serviceImpl.SetScheduling)
          .AddMethod(__Method_SetServiceAccount, serviceImpl.SetServiceAccount)
          .AddMethod(__Method_SetShieldedInstanceIntegrityPolicy, serviceImpl.SetShieldedInstanceIntegrityPolicy)
          .AddMethod(__Method_SetTags, serviceImpl.SetTags)
          .AddMethod(__Method_SimulateMaintenanceEvent, serviceImpl.SimulateMaintenanceEvent)
          .AddMethod(__Method_Start, serviceImpl.Start)
          .AddMethod(__Method_StartWithEncryptionKey, serviceImpl.StartWithEncryptionKey)
          .AddMethod(__Method_Stop, serviceImpl.Stop)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_UpdateAccessConfig, serviceImpl.UpdateAccessConfig)
          .AddMethod(__Method_UpdateDisplayDevice, serviceImpl.UpdateDisplayDevice)
          .AddMethod(__Method_UpdateNetworkInterface, serviceImpl.UpdateNetworkInterface)
          .AddMethod(__Method_UpdateShieldedInstanceConfig, serviceImpl.UpdateShieldedInstanceConfig).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, InstancesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddAccessConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AddAccessConfigInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.AddAccessConfig));
      serviceBinder.AddMethod(__Method_AddResourcePolicies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AddResourcePoliciesInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.AddResourcePolicies));
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListInstancesRequest, global::Google.Cloud.Compute.V1.InstanceAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_AttachDisk, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AttachDiskInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.AttachDisk));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_DeleteAccessConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteAccessConfigInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.DeleteAccessConfig));
      serviceBinder.AddMethod(__Method_DetachDisk, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DetachDiskInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.DetachDisk));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetInstanceRequest, global::Google.Cloud.Compute.V1.Instance>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetGuestAttributes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetGuestAttributesInstanceRequest, global::Google.Cloud.Compute.V1.GuestAttributes>(serviceImpl.GetGuestAttributes));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetIamPolicyInstanceRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_GetScreenshot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetScreenshotInstanceRequest, global::Google.Cloud.Compute.V1.Screenshot>(serviceImpl.GetScreenshot));
      serviceBinder.AddMethod(__Method_GetSerialPortOutput, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetSerialPortOutputInstanceRequest, global::Google.Cloud.Compute.V1.SerialPortOutput>(serviceImpl.GetSerialPortOutput));
      serviceBinder.AddMethod(__Method_GetShieldedInstanceIdentity, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetShieldedInstanceIdentityInstanceRequest, global::Google.Cloud.Compute.V1.ShieldedInstanceIdentity>(serviceImpl.GetShieldedInstanceIdentity));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListInstancesRequest, global::Google.Cloud.Compute.V1.InstanceList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_ListReferrers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListReferrersInstancesRequest, global::Google.Cloud.Compute.V1.InstanceListReferrers>(serviceImpl.ListReferrers));
      serviceBinder.AddMethod(__Method_RemoveResourcePolicies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.RemoveResourcePoliciesInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.RemoveResourcePolicies));
      serviceBinder.AddMethod(__Method_Reset, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ResetInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Reset));
      serviceBinder.AddMethod(__Method_SetDeletionProtection, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetDeletionProtectionInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetDeletionProtection));
      serviceBinder.AddMethod(__Method_SetDiskAutoDelete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetDiskAutoDeleteInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetDiskAutoDelete));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetIamPolicyInstanceRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_SetLabels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetLabelsInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetLabels));
      serviceBinder.AddMethod(__Method_SetMachineResources, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetMachineResourcesInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetMachineResources));
      serviceBinder.AddMethod(__Method_SetMachineType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetMachineTypeInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetMachineType));
      serviceBinder.AddMethod(__Method_SetMetadata, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetMetadataInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetMetadata));
      serviceBinder.AddMethod(__Method_SetMinCpuPlatform, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetMinCpuPlatformInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetMinCpuPlatform));
      serviceBinder.AddMethod(__Method_SetScheduling, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetSchedulingInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetScheduling));
      serviceBinder.AddMethod(__Method_SetServiceAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetServiceAccountInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetServiceAccount));
      serviceBinder.AddMethod(__Method_SetShieldedInstanceIntegrityPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetShieldedInstanceIntegrityPolicyInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetShieldedInstanceIntegrityPolicy));
      serviceBinder.AddMethod(__Method_SetTags, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetTagsInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetTags));
      serviceBinder.AddMethod(__Method_SimulateMaintenanceEvent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SimulateMaintenanceEventInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SimulateMaintenanceEvent));
      serviceBinder.AddMethod(__Method_Start, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.StartInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Start));
      serviceBinder.AddMethod(__Method_StartWithEncryptionKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.StartWithEncryptionKeyInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.StartWithEncryptionKey));
      serviceBinder.AddMethod(__Method_Stop, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.StopInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Stop));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.TestIamPermissionsInstanceRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(serviceImpl.TestIamPermissions));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdateInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Update));
      serviceBinder.AddMethod(__Method_UpdateAccessConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdateAccessConfigInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.UpdateAccessConfig));
      serviceBinder.AddMethod(__Method_UpdateDisplayDevice, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdateDisplayDeviceInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.UpdateDisplayDevice));
      serviceBinder.AddMethod(__Method_UpdateNetworkInterface, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdateNetworkInterfaceInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.UpdateNetworkInterface));
      serviceBinder.AddMethod(__Method_UpdateShieldedInstanceConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdateShieldedInstanceConfigInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.UpdateShieldedInstanceConfig));
    }

  }
  /// <summary>
  /// The InterconnectAttachments API.
  /// </summary>
  public static partial class InterconnectAttachments
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.InterconnectAttachments";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListInterconnectAttachmentsRequest> __Marshaller_google_cloud_compute_v1_AggregatedListInterconnectAttachmentsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListInterconnectAttachmentsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InterconnectAttachmentAggregatedList> __Marshaller_google_cloud_compute_v1_InterconnectAttachmentAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InterconnectAttachmentAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteInterconnectAttachmentRequest> __Marshaller_google_cloud_compute_v1_DeleteInterconnectAttachmentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteInterconnectAttachmentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetInterconnectAttachmentRequest> __Marshaller_google_cloud_compute_v1_GetInterconnectAttachmentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetInterconnectAttachmentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InterconnectAttachment> __Marshaller_google_cloud_compute_v1_InterconnectAttachment = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InterconnectAttachment.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertInterconnectAttachmentRequest> __Marshaller_google_cloud_compute_v1_InsertInterconnectAttachmentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertInterconnectAttachmentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListInterconnectAttachmentsRequest> __Marshaller_google_cloud_compute_v1_ListInterconnectAttachmentsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListInterconnectAttachmentsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InterconnectAttachmentList> __Marshaller_google_cloud_compute_v1_InterconnectAttachmentList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InterconnectAttachmentList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchInterconnectAttachmentRequest> __Marshaller_google_cloud_compute_v1_PatchInterconnectAttachmentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchInterconnectAttachmentRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListInterconnectAttachmentsRequest, global::Google.Cloud.Compute.V1.InterconnectAttachmentAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListInterconnectAttachmentsRequest, global::Google.Cloud.Compute.V1.InterconnectAttachmentAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListInterconnectAttachmentsRequest,
        __Marshaller_google_cloud_compute_v1_InterconnectAttachmentAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteInterconnectAttachmentRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteInterconnectAttachmentRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteInterconnectAttachmentRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetInterconnectAttachmentRequest, global::Google.Cloud.Compute.V1.InterconnectAttachment> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetInterconnectAttachmentRequest, global::Google.Cloud.Compute.V1.InterconnectAttachment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetInterconnectAttachmentRequest,
        __Marshaller_google_cloud_compute_v1_InterconnectAttachment);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertInterconnectAttachmentRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertInterconnectAttachmentRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertInterconnectAttachmentRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListInterconnectAttachmentsRequest, global::Google.Cloud.Compute.V1.InterconnectAttachmentList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListInterconnectAttachmentsRequest, global::Google.Cloud.Compute.V1.InterconnectAttachmentList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListInterconnectAttachmentsRequest,
        __Marshaller_google_cloud_compute_v1_InterconnectAttachmentList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchInterconnectAttachmentRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchInterconnectAttachmentRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchInterconnectAttachmentRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[21]; }
    }

    /// <summary>Base class for server-side implementations of InterconnectAttachments</summary>
    [grpc::BindServiceMethod(typeof(InterconnectAttachments), "BindService")]
    public abstract partial class InterconnectAttachmentsBase
    {
      /// <summary>
      /// Retrieves an aggregated list of interconnect attachments.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InterconnectAttachmentAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListInterconnectAttachmentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified interconnect attachment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteInterconnectAttachmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified interconnect attachment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InterconnectAttachment> Get(global::Google.Cloud.Compute.V1.GetInterconnectAttachmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates an InterconnectAttachment in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertInterconnectAttachmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of interconnect attachments contained within the specified region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InterconnectAttachmentList> List(global::Google.Cloud.Compute.V1.ListInterconnectAttachmentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified interconnect attachment with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchInterconnectAttachmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for InterconnectAttachments</summary>
    public partial class InterconnectAttachmentsClient : grpc::ClientBase<InterconnectAttachmentsClient>
    {
      /// <summary>Creates a new client for InterconnectAttachments</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public InterconnectAttachmentsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for InterconnectAttachments that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public InterconnectAttachmentsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected InterconnectAttachmentsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected InterconnectAttachmentsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of interconnect attachments.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InterconnectAttachmentAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListInterconnectAttachmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of interconnect attachments.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InterconnectAttachmentAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListInterconnectAttachmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of interconnect attachments.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InterconnectAttachmentAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListInterconnectAttachmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of interconnect attachments.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InterconnectAttachmentAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListInterconnectAttachmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified interconnect attachment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteInterconnectAttachmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified interconnect attachment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteInterconnectAttachmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified interconnect attachment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteInterconnectAttachmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified interconnect attachment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteInterconnectAttachmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified interconnect attachment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InterconnectAttachment Get(global::Google.Cloud.Compute.V1.GetInterconnectAttachmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified interconnect attachment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InterconnectAttachment Get(global::Google.Cloud.Compute.V1.GetInterconnectAttachmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified interconnect attachment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InterconnectAttachment> GetAsync(global::Google.Cloud.Compute.V1.GetInterconnectAttachmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified interconnect attachment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InterconnectAttachment> GetAsync(global::Google.Cloud.Compute.V1.GetInterconnectAttachmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates an InterconnectAttachment in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertInterconnectAttachmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an InterconnectAttachment in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertInterconnectAttachmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates an InterconnectAttachment in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertInterconnectAttachmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an InterconnectAttachment in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertInterconnectAttachmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of interconnect attachments contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InterconnectAttachmentList List(global::Google.Cloud.Compute.V1.ListInterconnectAttachmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of interconnect attachments contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InterconnectAttachmentList List(global::Google.Cloud.Compute.V1.ListInterconnectAttachmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of interconnect attachments contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InterconnectAttachmentList> ListAsync(global::Google.Cloud.Compute.V1.ListInterconnectAttachmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of interconnect attachments contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InterconnectAttachmentList> ListAsync(global::Google.Cloud.Compute.V1.ListInterconnectAttachmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Updates the specified interconnect attachment with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchInterconnectAttachmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified interconnect attachment with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchInterconnectAttachmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates the specified interconnect attachment with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchInterconnectAttachmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified interconnect attachment with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchInterconnectAttachmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override InterconnectAttachmentsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InterconnectAttachmentsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(InterconnectAttachmentsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, InterconnectAttachmentsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListInterconnectAttachmentsRequest, global::Google.Cloud.Compute.V1.InterconnectAttachmentAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteInterconnectAttachmentRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetInterconnectAttachmentRequest, global::Google.Cloud.Compute.V1.InterconnectAttachment>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertInterconnectAttachmentRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListInterconnectAttachmentsRequest, global::Google.Cloud.Compute.V1.InterconnectAttachmentList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchInterconnectAttachmentRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
    }

  }
  /// <summary>
  /// The InterconnectLocations API.
  /// </summary>
  public static partial class InterconnectLocations
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.InterconnectLocations";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetInterconnectLocationRequest> __Marshaller_google_cloud_compute_v1_GetInterconnectLocationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetInterconnectLocationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InterconnectLocation> __Marshaller_google_cloud_compute_v1_InterconnectLocation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InterconnectLocation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListInterconnectLocationsRequest> __Marshaller_google_cloud_compute_v1_ListInterconnectLocationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListInterconnectLocationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InterconnectLocationList> __Marshaller_google_cloud_compute_v1_InterconnectLocationList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InterconnectLocationList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetInterconnectLocationRequest, global::Google.Cloud.Compute.V1.InterconnectLocation> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetInterconnectLocationRequest, global::Google.Cloud.Compute.V1.InterconnectLocation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetInterconnectLocationRequest,
        __Marshaller_google_cloud_compute_v1_InterconnectLocation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListInterconnectLocationsRequest, global::Google.Cloud.Compute.V1.InterconnectLocationList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListInterconnectLocationsRequest, global::Google.Cloud.Compute.V1.InterconnectLocationList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListInterconnectLocationsRequest,
        __Marshaller_google_cloud_compute_v1_InterconnectLocationList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[22]; }
    }

    /// <summary>Base class for server-side implementations of InterconnectLocations</summary>
    [grpc::BindServiceMethod(typeof(InterconnectLocations), "BindService")]
    public abstract partial class InterconnectLocationsBase
    {
      /// <summary>
      /// Returns the details for the specified interconnect location. Gets a list of available interconnect locations by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InterconnectLocation> Get(global::Google.Cloud.Compute.V1.GetInterconnectLocationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of interconnect locations available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InterconnectLocationList> List(global::Google.Cloud.Compute.V1.ListInterconnectLocationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for InterconnectLocations</summary>
    public partial class InterconnectLocationsClient : grpc::ClientBase<InterconnectLocationsClient>
    {
      /// <summary>Creates a new client for InterconnectLocations</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public InterconnectLocationsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for InterconnectLocations that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public InterconnectLocationsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected InterconnectLocationsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected InterconnectLocationsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns the details for the specified interconnect location. Gets a list of available interconnect locations by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InterconnectLocation Get(global::Google.Cloud.Compute.V1.GetInterconnectLocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the details for the specified interconnect location. Gets a list of available interconnect locations by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InterconnectLocation Get(global::Google.Cloud.Compute.V1.GetInterconnectLocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the details for the specified interconnect location. Gets a list of available interconnect locations by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InterconnectLocation> GetAsync(global::Google.Cloud.Compute.V1.GetInterconnectLocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the details for the specified interconnect location. Gets a list of available interconnect locations by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InterconnectLocation> GetAsync(global::Google.Cloud.Compute.V1.GetInterconnectLocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of interconnect locations available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InterconnectLocationList List(global::Google.Cloud.Compute.V1.ListInterconnectLocationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of interconnect locations available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InterconnectLocationList List(global::Google.Cloud.Compute.V1.ListInterconnectLocationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of interconnect locations available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InterconnectLocationList> ListAsync(global::Google.Cloud.Compute.V1.ListInterconnectLocationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of interconnect locations available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InterconnectLocationList> ListAsync(global::Google.Cloud.Compute.V1.ListInterconnectLocationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override InterconnectLocationsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InterconnectLocationsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(InterconnectLocationsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, InterconnectLocationsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetInterconnectLocationRequest, global::Google.Cloud.Compute.V1.InterconnectLocation>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListInterconnectLocationsRequest, global::Google.Cloud.Compute.V1.InterconnectLocationList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The Interconnects API.
  /// </summary>
  public static partial class Interconnects
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.Interconnects";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteInterconnectRequest> __Marshaller_google_cloud_compute_v1_DeleteInterconnectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteInterconnectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetInterconnectRequest> __Marshaller_google_cloud_compute_v1_GetInterconnectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetInterconnectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Interconnect> __Marshaller_google_cloud_compute_v1_Interconnect = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Interconnect.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetDiagnosticsInterconnectRequest> __Marshaller_google_cloud_compute_v1_GetDiagnosticsInterconnectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetDiagnosticsInterconnectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InterconnectsGetDiagnosticsResponse> __Marshaller_google_cloud_compute_v1_InterconnectsGetDiagnosticsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InterconnectsGetDiagnosticsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertInterconnectRequest> __Marshaller_google_cloud_compute_v1_InsertInterconnectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertInterconnectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListInterconnectsRequest> __Marshaller_google_cloud_compute_v1_ListInterconnectsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListInterconnectsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InterconnectList> __Marshaller_google_cloud_compute_v1_InterconnectList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InterconnectList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchInterconnectRequest> __Marshaller_google_cloud_compute_v1_PatchInterconnectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchInterconnectRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteInterconnectRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteInterconnectRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteInterconnectRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetInterconnectRequest, global::Google.Cloud.Compute.V1.Interconnect> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetInterconnectRequest, global::Google.Cloud.Compute.V1.Interconnect>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetInterconnectRequest,
        __Marshaller_google_cloud_compute_v1_Interconnect);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetDiagnosticsInterconnectRequest, global::Google.Cloud.Compute.V1.InterconnectsGetDiagnosticsResponse> __Method_GetDiagnostics = new grpc::Method<global::Google.Cloud.Compute.V1.GetDiagnosticsInterconnectRequest, global::Google.Cloud.Compute.V1.InterconnectsGetDiagnosticsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDiagnostics",
        __Marshaller_google_cloud_compute_v1_GetDiagnosticsInterconnectRequest,
        __Marshaller_google_cloud_compute_v1_InterconnectsGetDiagnosticsResponse);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertInterconnectRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertInterconnectRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertInterconnectRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListInterconnectsRequest, global::Google.Cloud.Compute.V1.InterconnectList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListInterconnectsRequest, global::Google.Cloud.Compute.V1.InterconnectList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListInterconnectsRequest,
        __Marshaller_google_cloud_compute_v1_InterconnectList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchInterconnectRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchInterconnectRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchInterconnectRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[23]; }
    }

    /// <summary>Base class for server-side implementations of Interconnects</summary>
    [grpc::BindServiceMethod(typeof(Interconnects), "BindService")]
    public abstract partial class InterconnectsBase
    {
      /// <summary>
      /// Deletes the specified interconnect.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteInterconnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified interconnect. Get a list of available interconnects by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Interconnect> Get(global::Google.Cloud.Compute.V1.GetInterconnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the interconnectDiagnostics for the specified interconnect.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InterconnectsGetDiagnosticsResponse> GetDiagnostics(global::Google.Cloud.Compute.V1.GetDiagnosticsInterconnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a Interconnect in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertInterconnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of interconnect available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InterconnectList> List(global::Google.Cloud.Compute.V1.ListInterconnectsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified interconnect with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchInterconnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Interconnects</summary>
    public partial class InterconnectsClient : grpc::ClientBase<InterconnectsClient>
    {
      /// <summary>Creates a new client for Interconnects</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public InterconnectsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Interconnects that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public InterconnectsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected InterconnectsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected InterconnectsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified interconnect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteInterconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified interconnect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteInterconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified interconnect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteInterconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified interconnect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteInterconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified interconnect. Get a list of available interconnects by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Interconnect Get(global::Google.Cloud.Compute.V1.GetInterconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified interconnect. Get a list of available interconnects by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Interconnect Get(global::Google.Cloud.Compute.V1.GetInterconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified interconnect. Get a list of available interconnects by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Interconnect> GetAsync(global::Google.Cloud.Compute.V1.GetInterconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified interconnect. Get a list of available interconnects by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Interconnect> GetAsync(global::Google.Cloud.Compute.V1.GetInterconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the interconnectDiagnostics for the specified interconnect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InterconnectsGetDiagnosticsResponse GetDiagnostics(global::Google.Cloud.Compute.V1.GetDiagnosticsInterconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDiagnostics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the interconnectDiagnostics for the specified interconnect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InterconnectsGetDiagnosticsResponse GetDiagnostics(global::Google.Cloud.Compute.V1.GetDiagnosticsInterconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDiagnostics, null, options, request);
      }
      /// <summary>
      /// Returns the interconnectDiagnostics for the specified interconnect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InterconnectsGetDiagnosticsResponse> GetDiagnosticsAsync(global::Google.Cloud.Compute.V1.GetDiagnosticsInterconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDiagnosticsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the interconnectDiagnostics for the specified interconnect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InterconnectsGetDiagnosticsResponse> GetDiagnosticsAsync(global::Google.Cloud.Compute.V1.GetDiagnosticsInterconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDiagnostics, null, options, request);
      }
      /// <summary>
      /// Creates a Interconnect in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertInterconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Interconnect in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertInterconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a Interconnect in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertInterconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Interconnect in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertInterconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of interconnect available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InterconnectList List(global::Google.Cloud.Compute.V1.ListInterconnectsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of interconnect available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InterconnectList List(global::Google.Cloud.Compute.V1.ListInterconnectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of interconnect available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InterconnectList> ListAsync(global::Google.Cloud.Compute.V1.ListInterconnectsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of interconnect available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InterconnectList> ListAsync(global::Google.Cloud.Compute.V1.ListInterconnectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Updates the specified interconnect with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchInterconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified interconnect with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchInterconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates the specified interconnect with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchInterconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified interconnect with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchInterconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override InterconnectsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InterconnectsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(InterconnectsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetDiagnostics, serviceImpl.GetDiagnostics)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, InterconnectsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteInterconnectRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetInterconnectRequest, global::Google.Cloud.Compute.V1.Interconnect>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetDiagnostics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetDiagnosticsInterconnectRequest, global::Google.Cloud.Compute.V1.InterconnectsGetDiagnosticsResponse>(serviceImpl.GetDiagnostics));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertInterconnectRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListInterconnectsRequest, global::Google.Cloud.Compute.V1.InterconnectList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchInterconnectRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
    }

  }
  /// <summary>
  /// The LicenseCodes API.
  /// </summary>
  public static partial class LicenseCodes
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.LicenseCodes";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetLicenseCodeRequest> __Marshaller_google_cloud_compute_v1_GetLicenseCodeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetLicenseCodeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.LicenseCode> __Marshaller_google_cloud_compute_v1_LicenseCode = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.LicenseCode.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseCodeRequest> __Marshaller_google_cloud_compute_v1_TestIamPermissionsLicenseCodeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseCodeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Marshaller_google_cloud_compute_v1_TestPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestPermissionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetLicenseCodeRequest, global::Google.Cloud.Compute.V1.LicenseCode> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetLicenseCodeRequest, global::Google.Cloud.Compute.V1.LicenseCode>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetLicenseCodeRequest,
        __Marshaller_google_cloud_compute_v1_LicenseCode);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseCodeRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseCodeRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_cloud_compute_v1_TestIamPermissionsLicenseCodeRequest,
        __Marshaller_google_cloud_compute_v1_TestPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[24]; }
    }

    /// <summary>Base class for server-side implementations of LicenseCodes</summary>
    [grpc::BindServiceMethod(typeof(LicenseCodes), "BindService")]
    public abstract partial class LicenseCodesBase
    {
      /// <summary>
      /// Return a specified license code. License codes are mirrored across all projects that have permissions to read the License Code.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.LicenseCode> Get(global::Google.Cloud.Compute.V1.GetLicenseCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for LicenseCodes</summary>
    public partial class LicenseCodesClient : grpc::ClientBase<LicenseCodesClient>
    {
      /// <summary>Creates a new client for LicenseCodes</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LicenseCodesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for LicenseCodes that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LicenseCodesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LicenseCodesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LicenseCodesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Return a specified license code. License codes are mirrored across all projects that have permissions to read the License Code.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.LicenseCode Get(global::Google.Cloud.Compute.V1.GetLicenseCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return a specified license code. License codes are mirrored across all projects that have permissions to read the License Code.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.LicenseCode Get(global::Google.Cloud.Compute.V1.GetLicenseCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Return a specified license code. License codes are mirrored across all projects that have permissions to read the License Code.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.LicenseCode> GetAsync(global::Google.Cloud.Compute.V1.GetLicenseCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return a specified license code. License codes are mirrored across all projects that have permissions to read the License Code.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.LicenseCode> GetAsync(global::Google.Cloud.Compute.V1.GetLicenseCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LicenseCodesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LicenseCodesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(LicenseCodesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, LicenseCodesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetLicenseCodeRequest, global::Google.Cloud.Compute.V1.LicenseCode>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseCodeRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
  /// <summary>
  /// The Licenses API.
  /// </summary>
  public static partial class Licenses
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.Licenses";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteLicenseRequest> __Marshaller_google_cloud_compute_v1_DeleteLicenseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteLicenseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetLicenseRequest> __Marshaller_google_cloud_compute_v1_GetLicenseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetLicenseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.License> __Marshaller_google_cloud_compute_v1_License = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.License.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetIamPolicyLicenseRequest> __Marshaller_google_cloud_compute_v1_GetIamPolicyLicenseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetIamPolicyLicenseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Policy> __Marshaller_google_cloud_compute_v1_Policy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Policy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertLicenseRequest> __Marshaller_google_cloud_compute_v1_InsertLicenseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertLicenseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListLicensesRequest> __Marshaller_google_cloud_compute_v1_ListLicensesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListLicensesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.LicensesListResponse> __Marshaller_google_cloud_compute_v1_LicensesListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.LicensesListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetIamPolicyLicenseRequest> __Marshaller_google_cloud_compute_v1_SetIamPolicyLicenseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetIamPolicyLicenseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseRequest> __Marshaller_google_cloud_compute_v1_TestIamPermissionsLicenseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Marshaller_google_cloud_compute_v1_TestPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestPermissionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteLicenseRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteLicenseRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteLicenseRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetLicenseRequest, global::Google.Cloud.Compute.V1.License> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetLicenseRequest, global::Google.Cloud.Compute.V1.License>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetLicenseRequest,
        __Marshaller_google_cloud_compute_v1_License);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyLicenseRequest, global::Google.Cloud.Compute.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyLicenseRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_cloud_compute_v1_GetIamPolicyLicenseRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertLicenseRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertLicenseRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertLicenseRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListLicensesRequest, global::Google.Cloud.Compute.V1.LicensesListResponse> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListLicensesRequest, global::Google.Cloud.Compute.V1.LicensesListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListLicensesRequest,
        __Marshaller_google_cloud_compute_v1_LicensesListResponse);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyLicenseRequest, global::Google.Cloud.Compute.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyLicenseRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_cloud_compute_v1_SetIamPolicyLicenseRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_cloud_compute_v1_TestIamPermissionsLicenseRequest,
        __Marshaller_google_cloud_compute_v1_TestPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[25]; }
    }

    /// <summary>Base class for server-side implementations of Licenses</summary>
    [grpc::BindServiceMethod(typeof(Licenses), "BindService")]
    public abstract partial class LicensesBase
    {
      /// <summary>
      /// Deletes the specified license.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteLicenseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified License resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.License> Get(global::Google.Cloud.Compute.V1.GetLicenseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyLicenseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a License resource in the specified project.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertLicenseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of licenses available in the specified project. This method does not get any licenses that belong to other projects, including licenses attached to publicly-available images, like Debian 9. If you want to get a list of publicly-available licenses, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.LicensesListResponse> List(global::Google.Cloud.Compute.V1.ListLicensesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyLicenseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Licenses</summary>
    public partial class LicensesClient : grpc::ClientBase<LicensesClient>
    {
      /// <summary>Creates a new client for Licenses</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LicensesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Licenses that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LicensesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LicensesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LicensesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified license.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteLicenseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified license.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteLicenseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified license.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteLicenseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified license.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteLicenseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified License resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.License Get(global::Google.Cloud.Compute.V1.GetLicenseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified License resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.License Get(global::Google.Cloud.Compute.V1.GetLicenseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified License resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.License> GetAsync(global::Google.Cloud.Compute.V1.GetLicenseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified License resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.License> GetAsync(global::Google.Cloud.Compute.V1.GetLicenseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyLicenseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyLicenseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyLicenseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyLicenseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Create a License resource in the specified project.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertLicenseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a License resource in the specified project.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertLicenseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Create a License resource in the specified project.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertLicenseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a License resource in the specified project.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertLicenseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of licenses available in the specified project. This method does not get any licenses that belong to other projects, including licenses attached to publicly-available images, like Debian 9. If you want to get a list of publicly-available licenses, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.LicensesListResponse List(global::Google.Cloud.Compute.V1.ListLicensesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of licenses available in the specified project. This method does not get any licenses that belong to other projects, including licenses attached to publicly-available images, like Debian 9. If you want to get a list of publicly-available licenses, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.LicensesListResponse List(global::Google.Cloud.Compute.V1.ListLicensesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of licenses available in the specified project. This method does not get any licenses that belong to other projects, including licenses attached to publicly-available images, like Debian 9. If you want to get a list of publicly-available licenses, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.LicensesListResponse> ListAsync(global::Google.Cloud.Compute.V1.ListLicensesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of licenses available in the specified project. This method does not get any licenses that belong to other projects, including licenses attached to publicly-available images, like Debian 9. If you want to get a list of publicly-available licenses, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.LicensesListResponse> ListAsync(global::Google.Cloud.Compute.V1.ListLicensesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyLicenseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyLicenseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyLicenseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyLicenseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LicensesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LicensesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(LicensesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, LicensesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteLicenseRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetLicenseRequest, global::Google.Cloud.Compute.V1.License>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetIamPolicyLicenseRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertLicenseRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListLicensesRequest, global::Google.Cloud.Compute.V1.LicensesListResponse>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetIamPolicyLicenseRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.TestIamPermissionsLicenseRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
  /// <summary>
  /// The MachineTypes API.
  /// </summary>
  public static partial class MachineTypes
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.MachineTypes";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListMachineTypesRequest> __Marshaller_google_cloud_compute_v1_AggregatedListMachineTypesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListMachineTypesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.MachineTypeAggregatedList> __Marshaller_google_cloud_compute_v1_MachineTypeAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.MachineTypeAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetMachineTypeRequest> __Marshaller_google_cloud_compute_v1_GetMachineTypeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetMachineTypeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.MachineType> __Marshaller_google_cloud_compute_v1_MachineType = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.MachineType.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListMachineTypesRequest> __Marshaller_google_cloud_compute_v1_ListMachineTypesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListMachineTypesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.MachineTypeList> __Marshaller_google_cloud_compute_v1_MachineTypeList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.MachineTypeList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListMachineTypesRequest, global::Google.Cloud.Compute.V1.MachineTypeAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListMachineTypesRequest, global::Google.Cloud.Compute.V1.MachineTypeAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListMachineTypesRequest,
        __Marshaller_google_cloud_compute_v1_MachineTypeAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetMachineTypeRequest, global::Google.Cloud.Compute.V1.MachineType> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetMachineTypeRequest, global::Google.Cloud.Compute.V1.MachineType>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetMachineTypeRequest,
        __Marshaller_google_cloud_compute_v1_MachineType);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListMachineTypesRequest, global::Google.Cloud.Compute.V1.MachineTypeList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListMachineTypesRequest, global::Google.Cloud.Compute.V1.MachineTypeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListMachineTypesRequest,
        __Marshaller_google_cloud_compute_v1_MachineTypeList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[26]; }
    }

    /// <summary>Base class for server-side implementations of MachineTypes</summary>
    [grpc::BindServiceMethod(typeof(MachineTypes), "BindService")]
    public abstract partial class MachineTypesBase
    {
      /// <summary>
      /// Retrieves an aggregated list of machine types.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.MachineTypeAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListMachineTypesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified machine type. Gets a list of available machine types by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.MachineType> Get(global::Google.Cloud.Compute.V1.GetMachineTypeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of machine types available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.MachineTypeList> List(global::Google.Cloud.Compute.V1.ListMachineTypesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MachineTypes</summary>
    public partial class MachineTypesClient : grpc::ClientBase<MachineTypesClient>
    {
      /// <summary>Creates a new client for MachineTypes</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MachineTypesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MachineTypes that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MachineTypesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MachineTypesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MachineTypesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of machine types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.MachineTypeAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListMachineTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of machine types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.MachineTypeAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListMachineTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of machine types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.MachineTypeAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListMachineTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of machine types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.MachineTypeAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListMachineTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Returns the specified machine type. Gets a list of available machine types by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.MachineType Get(global::Google.Cloud.Compute.V1.GetMachineTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified machine type. Gets a list of available machine types by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.MachineType Get(global::Google.Cloud.Compute.V1.GetMachineTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified machine type. Gets a list of available machine types by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.MachineType> GetAsync(global::Google.Cloud.Compute.V1.GetMachineTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified machine type. Gets a list of available machine types by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.MachineType> GetAsync(global::Google.Cloud.Compute.V1.GetMachineTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of machine types available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.MachineTypeList List(global::Google.Cloud.Compute.V1.ListMachineTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of machine types available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.MachineTypeList List(global::Google.Cloud.Compute.V1.ListMachineTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of machine types available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.MachineTypeList> ListAsync(global::Google.Cloud.Compute.V1.ListMachineTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of machine types available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.MachineTypeList> ListAsync(global::Google.Cloud.Compute.V1.ListMachineTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MachineTypesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MachineTypesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MachineTypesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MachineTypesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListMachineTypesRequest, global::Google.Cloud.Compute.V1.MachineTypeAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetMachineTypeRequest, global::Google.Cloud.Compute.V1.MachineType>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListMachineTypesRequest, global::Google.Cloud.Compute.V1.MachineTypeList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The NetworkEndpointGroups API.
  /// </summary>
  public static partial class NetworkEndpointGroups
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.NetworkEndpointGroups";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListNetworkEndpointGroupsRequest> __Marshaller_google_cloud_compute_v1_AggregatedListNetworkEndpointGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListNetworkEndpointGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NetworkEndpointGroupAggregatedList> __Marshaller_google_cloud_compute_v1_NetworkEndpointGroupAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NetworkEndpointGroupAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AttachNetworkEndpointsNetworkEndpointGroupRequest> __Marshaller_google_cloud_compute_v1_AttachNetworkEndpointsNetworkEndpointGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AttachNetworkEndpointsNetworkEndpointGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteNetworkEndpointGroupRequest> __Marshaller_google_cloud_compute_v1_DeleteNetworkEndpointGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteNetworkEndpointGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DetachNetworkEndpointsNetworkEndpointGroupRequest> __Marshaller_google_cloud_compute_v1_DetachNetworkEndpointsNetworkEndpointGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DetachNetworkEndpointsNetworkEndpointGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetNetworkEndpointGroupRequest> __Marshaller_google_cloud_compute_v1_GetNetworkEndpointGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetNetworkEndpointGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NetworkEndpointGroup> __Marshaller_google_cloud_compute_v1_NetworkEndpointGroup = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NetworkEndpointGroup.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertNetworkEndpointGroupRequest> __Marshaller_google_cloud_compute_v1_InsertNetworkEndpointGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertNetworkEndpointGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListNetworkEndpointGroupsRequest> __Marshaller_google_cloud_compute_v1_ListNetworkEndpointGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListNetworkEndpointGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NetworkEndpointGroupList> __Marshaller_google_cloud_compute_v1_NetworkEndpointGroupList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NetworkEndpointGroupList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListNetworkEndpointsNetworkEndpointGroupsRequest> __Marshaller_google_cloud_compute_v1_ListNetworkEndpointsNetworkEndpointGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListNetworkEndpointsNetworkEndpointGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints> __Marshaller_google_cloud_compute_v1_NetworkEndpointGroupsListNetworkEndpoints = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestIamPermissionsNetworkEndpointGroupRequest> __Marshaller_google_cloud_compute_v1_TestIamPermissionsNetworkEndpointGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestIamPermissionsNetworkEndpointGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Marshaller_google_cloud_compute_v1_TestPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestPermissionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListNetworkEndpointGroupsRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroupAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListNetworkEndpointGroupsRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroupAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListNetworkEndpointGroupsRequest,
        __Marshaller_google_cloud_compute_v1_NetworkEndpointGroupAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AttachNetworkEndpointsNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_AttachNetworkEndpoints = new grpc::Method<global::Google.Cloud.Compute.V1.AttachNetworkEndpointsNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AttachNetworkEndpoints",
        __Marshaller_google_cloud_compute_v1_AttachNetworkEndpointsNetworkEndpointGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteNetworkEndpointGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DetachNetworkEndpointsNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_DetachNetworkEndpoints = new grpc::Method<global::Google.Cloud.Compute.V1.DetachNetworkEndpointsNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DetachNetworkEndpoints",
        __Marshaller_google_cloud_compute_v1_DetachNetworkEndpointsNetworkEndpointGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroup> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetNetworkEndpointGroupRequest,
        __Marshaller_google_cloud_compute_v1_NetworkEndpointGroup);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertNetworkEndpointGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListNetworkEndpointGroupsRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroupList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListNetworkEndpointGroupsRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroupList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListNetworkEndpointGroupsRequest,
        __Marshaller_google_cloud_compute_v1_NetworkEndpointGroupList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListNetworkEndpointsNetworkEndpointGroupsRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints> __Method_ListNetworkEndpoints = new grpc::Method<global::Google.Cloud.Compute.V1.ListNetworkEndpointsNetworkEndpointGroupsRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNetworkEndpoints",
        __Marshaller_google_cloud_compute_v1_ListNetworkEndpointsNetworkEndpointGroupsRequest,
        __Marshaller_google_cloud_compute_v1_NetworkEndpointGroupsListNetworkEndpoints);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_cloud_compute_v1_TestIamPermissionsNetworkEndpointGroupRequest,
        __Marshaller_google_cloud_compute_v1_TestPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[27]; }
    }

    /// <summary>Base class for server-side implementations of NetworkEndpointGroups</summary>
    [grpc::BindServiceMethod(typeof(NetworkEndpointGroups), "BindService")]
    public abstract partial class NetworkEndpointGroupsBase
    {
      /// <summary>
      /// Retrieves the list of network endpoint groups and sorts them by zone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NetworkEndpointGroupAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListNetworkEndpointGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Attach a list of network endpoints to the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> AttachNetworkEndpoints(global::Google.Cloud.Compute.V1.AttachNetworkEndpointsNetworkEndpointGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified network endpoint group. The network endpoints in the NEG and the VM instances they belong to are not terminated when the NEG is deleted. Note that the NEG cannot be deleted if there are backend services referencing it.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteNetworkEndpointGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Detach a list of network endpoints from the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> DetachNetworkEndpoints(global::Google.Cloud.Compute.V1.DetachNetworkEndpointsNetworkEndpointGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NetworkEndpointGroup> Get(global::Google.Cloud.Compute.V1.GetNetworkEndpointGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a network endpoint group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertNetworkEndpointGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of network endpoint groups that are located in the specified project and zone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NetworkEndpointGroupList> List(global::Google.Cloud.Compute.V1.ListNetworkEndpointGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the network endpoints in the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints> ListNetworkEndpoints(global::Google.Cloud.Compute.V1.ListNetworkEndpointsNetworkEndpointGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsNetworkEndpointGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for NetworkEndpointGroups</summary>
    public partial class NetworkEndpointGroupsClient : grpc::ClientBase<NetworkEndpointGroupsClient>
    {
      /// <summary>Creates a new client for NetworkEndpointGroups</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NetworkEndpointGroupsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NetworkEndpointGroups that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NetworkEndpointGroupsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NetworkEndpointGroupsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NetworkEndpointGroupsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves the list of network endpoint groups and sorts them by zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkEndpointGroupAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListNetworkEndpointGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of network endpoint groups and sorts them by zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkEndpointGroupAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListNetworkEndpointGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of network endpoint groups and sorts them by zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkEndpointGroupAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListNetworkEndpointGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of network endpoint groups and sorts them by zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkEndpointGroupAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListNetworkEndpointGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Attach a list of network endpoints to the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AttachNetworkEndpoints(global::Google.Cloud.Compute.V1.AttachNetworkEndpointsNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AttachNetworkEndpoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Attach a list of network endpoints to the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AttachNetworkEndpoints(global::Google.Cloud.Compute.V1.AttachNetworkEndpointsNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AttachNetworkEndpoints, null, options, request);
      }
      /// <summary>
      /// Attach a list of network endpoints to the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AttachNetworkEndpointsAsync(global::Google.Cloud.Compute.V1.AttachNetworkEndpointsNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AttachNetworkEndpointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Attach a list of network endpoints to the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AttachNetworkEndpointsAsync(global::Google.Cloud.Compute.V1.AttachNetworkEndpointsNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AttachNetworkEndpoints, null, options, request);
      }
      /// <summary>
      /// Deletes the specified network endpoint group. The network endpoints in the NEG and the VM instances they belong to are not terminated when the NEG is deleted. Note that the NEG cannot be deleted if there are backend services referencing it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified network endpoint group. The network endpoints in the NEG and the VM instances they belong to are not terminated when the NEG is deleted. Note that the NEG cannot be deleted if there are backend services referencing it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified network endpoint group. The network endpoints in the NEG and the VM instances they belong to are not terminated when the NEG is deleted. Note that the NEG cannot be deleted if there are backend services referencing it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified network endpoint group. The network endpoints in the NEG and the VM instances they belong to are not terminated when the NEG is deleted. Note that the NEG cannot be deleted if there are backend services referencing it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Detach a list of network endpoints from the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DetachNetworkEndpoints(global::Google.Cloud.Compute.V1.DetachNetworkEndpointsNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DetachNetworkEndpoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Detach a list of network endpoints from the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DetachNetworkEndpoints(global::Google.Cloud.Compute.V1.DetachNetworkEndpointsNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DetachNetworkEndpoints, null, options, request);
      }
      /// <summary>
      /// Detach a list of network endpoints from the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DetachNetworkEndpointsAsync(global::Google.Cloud.Compute.V1.DetachNetworkEndpointsNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DetachNetworkEndpointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Detach a list of network endpoints from the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DetachNetworkEndpointsAsync(global::Google.Cloud.Compute.V1.DetachNetworkEndpointsNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DetachNetworkEndpoints, null, options, request);
      }
      /// <summary>
      /// Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkEndpointGroup Get(global::Google.Cloud.Compute.V1.GetNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkEndpointGroup Get(global::Google.Cloud.Compute.V1.GetNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkEndpointGroup> GetAsync(global::Google.Cloud.Compute.V1.GetNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkEndpointGroup> GetAsync(global::Google.Cloud.Compute.V1.GetNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a network endpoint group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a network endpoint group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a network endpoint group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a network endpoint group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of network endpoint groups that are located in the specified project and zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkEndpointGroupList List(global::Google.Cloud.Compute.V1.ListNetworkEndpointGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of network endpoint groups that are located in the specified project and zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkEndpointGroupList List(global::Google.Cloud.Compute.V1.ListNetworkEndpointGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of network endpoint groups that are located in the specified project and zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkEndpointGroupList> ListAsync(global::Google.Cloud.Compute.V1.ListNetworkEndpointGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of network endpoint groups that are located in the specified project and zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkEndpointGroupList> ListAsync(global::Google.Cloud.Compute.V1.ListNetworkEndpointGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Lists the network endpoints in the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints ListNetworkEndpoints(global::Google.Cloud.Compute.V1.ListNetworkEndpointsNetworkEndpointGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNetworkEndpoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the network endpoints in the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints ListNetworkEndpoints(global::Google.Cloud.Compute.V1.ListNetworkEndpointsNetworkEndpointGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNetworkEndpoints, null, options, request);
      }
      /// <summary>
      /// Lists the network endpoints in the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints> ListNetworkEndpointsAsync(global::Google.Cloud.Compute.V1.ListNetworkEndpointsNetworkEndpointGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNetworkEndpointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the network endpoints in the specified network endpoint group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints> ListNetworkEndpointsAsync(global::Google.Cloud.Compute.V1.ListNetworkEndpointsNetworkEndpointGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNetworkEndpoints, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NetworkEndpointGroupsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NetworkEndpointGroupsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NetworkEndpointGroupsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_AttachNetworkEndpoints, serviceImpl.AttachNetworkEndpoints)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_DetachNetworkEndpoints, serviceImpl.DetachNetworkEndpoints)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_ListNetworkEndpoints, serviceImpl.ListNetworkEndpoints)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NetworkEndpointGroupsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListNetworkEndpointGroupsRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroupAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_AttachNetworkEndpoints, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AttachNetworkEndpointsNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.AttachNetworkEndpoints));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_DetachNetworkEndpoints, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DetachNetworkEndpointsNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.DetachNetworkEndpoints));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroup>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListNetworkEndpointGroupsRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroupList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_ListNetworkEndpoints, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListNetworkEndpointsNetworkEndpointGroupsRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroupsListNetworkEndpoints>(serviceImpl.ListNetworkEndpoints));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.TestIamPermissionsNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
  /// <summary>
  /// The Networks API.
  /// </summary>
  public static partial class Networks
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.Networks";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AddPeeringNetworkRequest> __Marshaller_google_cloud_compute_v1_AddPeeringNetworkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AddPeeringNetworkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteNetworkRequest> __Marshaller_google_cloud_compute_v1_DeleteNetworkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteNetworkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetNetworkRequest> __Marshaller_google_cloud_compute_v1_GetNetworkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetNetworkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Network> __Marshaller_google_cloud_compute_v1_Network = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Network.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertNetworkRequest> __Marshaller_google_cloud_compute_v1_InsertNetworkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertNetworkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListNetworksRequest> __Marshaller_google_cloud_compute_v1_ListNetworksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListNetworksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NetworkList> __Marshaller_google_cloud_compute_v1_NetworkList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NetworkList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListPeeringRoutesNetworksRequest> __Marshaller_google_cloud_compute_v1_ListPeeringRoutesNetworksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListPeeringRoutesNetworksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ExchangedPeeringRoutesList> __Marshaller_google_cloud_compute_v1_ExchangedPeeringRoutesList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ExchangedPeeringRoutesList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchNetworkRequest> __Marshaller_google_cloud_compute_v1_PatchNetworkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchNetworkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RemovePeeringNetworkRequest> __Marshaller_google_cloud_compute_v1_RemovePeeringNetworkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RemovePeeringNetworkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SwitchToCustomModeNetworkRequest> __Marshaller_google_cloud_compute_v1_SwitchToCustomModeNetworkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SwitchToCustomModeNetworkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdatePeeringNetworkRequest> __Marshaller_google_cloud_compute_v1_UpdatePeeringNetworkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdatePeeringNetworkRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AddPeeringNetworkRequest, global::Google.Cloud.Compute.V1.Operation> __Method_AddPeering = new grpc::Method<global::Google.Cloud.Compute.V1.AddPeeringNetworkRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddPeering",
        __Marshaller_google_cloud_compute_v1_AddPeeringNetworkRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteNetworkRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteNetworkRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteNetworkRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetNetworkRequest, global::Google.Cloud.Compute.V1.Network> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetNetworkRequest, global::Google.Cloud.Compute.V1.Network>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetNetworkRequest,
        __Marshaller_google_cloud_compute_v1_Network);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertNetworkRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertNetworkRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertNetworkRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListNetworksRequest, global::Google.Cloud.Compute.V1.NetworkList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListNetworksRequest, global::Google.Cloud.Compute.V1.NetworkList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListNetworksRequest,
        __Marshaller_google_cloud_compute_v1_NetworkList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListPeeringRoutesNetworksRequest, global::Google.Cloud.Compute.V1.ExchangedPeeringRoutesList> __Method_ListPeeringRoutes = new grpc::Method<global::Google.Cloud.Compute.V1.ListPeeringRoutesNetworksRequest, global::Google.Cloud.Compute.V1.ExchangedPeeringRoutesList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPeeringRoutes",
        __Marshaller_google_cloud_compute_v1_ListPeeringRoutesNetworksRequest,
        __Marshaller_google_cloud_compute_v1_ExchangedPeeringRoutesList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchNetworkRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchNetworkRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchNetworkRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.RemovePeeringNetworkRequest, global::Google.Cloud.Compute.V1.Operation> __Method_RemovePeering = new grpc::Method<global::Google.Cloud.Compute.V1.RemovePeeringNetworkRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemovePeering",
        __Marshaller_google_cloud_compute_v1_RemovePeeringNetworkRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SwitchToCustomModeNetworkRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SwitchToCustomMode = new grpc::Method<global::Google.Cloud.Compute.V1.SwitchToCustomModeNetworkRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SwitchToCustomMode",
        __Marshaller_google_cloud_compute_v1_SwitchToCustomModeNetworkRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdatePeeringNetworkRequest, global::Google.Cloud.Compute.V1.Operation> __Method_UpdatePeering = new grpc::Method<global::Google.Cloud.Compute.V1.UpdatePeeringNetworkRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePeering",
        __Marshaller_google_cloud_compute_v1_UpdatePeeringNetworkRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[28]; }
    }

    /// <summary>Base class for server-side implementations of Networks</summary>
    [grpc::BindServiceMethod(typeof(Networks), "BindService")]
    public abstract partial class NetworksBase
    {
      /// <summary>
      /// Adds a peering to the specified network.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> AddPeering(global::Google.Cloud.Compute.V1.AddPeeringNetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified network.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteNetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified network. Gets a list of available networks by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Network> Get(global::Google.Cloud.Compute.V1.GetNetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a network in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertNetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of networks available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NetworkList> List(global::Google.Cloud.Compute.V1.ListNetworksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the peering routes exchanged over peering connection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.ExchangedPeeringRoutesList> ListPeeringRoutes(global::Google.Cloud.Compute.V1.ListPeeringRoutesNetworksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patches the specified network with the data included in the request. Only the following fields can be modified: routingConfig.routingMode.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchNetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes a peering from the specified network.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> RemovePeering(global::Google.Cloud.Compute.V1.RemovePeeringNetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Switches the network mode from auto subnet mode to custom subnet mode.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SwitchToCustomMode(global::Google.Cloud.Compute.V1.SwitchToCustomModeNetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified network peering with the data included in the request Only the following fields can be modified: NetworkPeering.export_custom_routes, and NetworkPeering.import_custom_routes
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> UpdatePeering(global::Google.Cloud.Compute.V1.UpdatePeeringNetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Networks</summary>
    public partial class NetworksClient : grpc::ClientBase<NetworksClient>
    {
      /// <summary>Creates a new client for Networks</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NetworksClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Networks that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NetworksClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NetworksClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NetworksClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Adds a peering to the specified network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddPeering(global::Google.Cloud.Compute.V1.AddPeeringNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddPeering(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a peering to the specified network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddPeering(global::Google.Cloud.Compute.V1.AddPeeringNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddPeering, null, options, request);
      }
      /// <summary>
      /// Adds a peering to the specified network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddPeeringAsync(global::Google.Cloud.Compute.V1.AddPeeringNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddPeeringAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a peering to the specified network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddPeeringAsync(global::Google.Cloud.Compute.V1.AddPeeringNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddPeering, null, options, request);
      }
      /// <summary>
      /// Deletes the specified network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified network. Gets a list of available networks by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Network Get(global::Google.Cloud.Compute.V1.GetNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified network. Gets a list of available networks by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Network Get(global::Google.Cloud.Compute.V1.GetNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified network. Gets a list of available networks by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Network> GetAsync(global::Google.Cloud.Compute.V1.GetNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified network. Gets a list of available networks by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Network> GetAsync(global::Google.Cloud.Compute.V1.GetNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a network in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a network in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a network in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a network in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of networks available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkList List(global::Google.Cloud.Compute.V1.ListNetworksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of networks available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkList List(global::Google.Cloud.Compute.V1.ListNetworksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of networks available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkList> ListAsync(global::Google.Cloud.Compute.V1.ListNetworksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of networks available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkList> ListAsync(global::Google.Cloud.Compute.V1.ListNetworksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Lists the peering routes exchanged over peering connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ExchangedPeeringRoutesList ListPeeringRoutes(global::Google.Cloud.Compute.V1.ListPeeringRoutesNetworksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPeeringRoutes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the peering routes exchanged over peering connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ExchangedPeeringRoutesList ListPeeringRoutes(global::Google.Cloud.Compute.V1.ListPeeringRoutesNetworksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPeeringRoutes, null, options, request);
      }
      /// <summary>
      /// Lists the peering routes exchanged over peering connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ExchangedPeeringRoutesList> ListPeeringRoutesAsync(global::Google.Cloud.Compute.V1.ListPeeringRoutesNetworksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPeeringRoutesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the peering routes exchanged over peering connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ExchangedPeeringRoutesList> ListPeeringRoutesAsync(global::Google.Cloud.Compute.V1.ListPeeringRoutesNetworksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPeeringRoutes, null, options, request);
      }
      /// <summary>
      /// Patches the specified network with the data included in the request. Only the following fields can be modified: routingConfig.routingMode.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified network with the data included in the request. Only the following fields can be modified: routingConfig.routingMode.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Patches the specified network with the data included in the request. Only the following fields can be modified: routingConfig.routingMode.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified network with the data included in the request. Only the following fields can be modified: routingConfig.routingMode.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Removes a peering from the specified network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RemovePeering(global::Google.Cloud.Compute.V1.RemovePeeringNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemovePeering(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a peering from the specified network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RemovePeering(global::Google.Cloud.Compute.V1.RemovePeeringNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemovePeering, null, options, request);
      }
      /// <summary>
      /// Removes a peering from the specified network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RemovePeeringAsync(global::Google.Cloud.Compute.V1.RemovePeeringNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemovePeeringAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a peering from the specified network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RemovePeeringAsync(global::Google.Cloud.Compute.V1.RemovePeeringNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemovePeering, null, options, request);
      }
      /// <summary>
      /// Switches the network mode from auto subnet mode to custom subnet mode.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SwitchToCustomMode(global::Google.Cloud.Compute.V1.SwitchToCustomModeNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SwitchToCustomMode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Switches the network mode from auto subnet mode to custom subnet mode.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SwitchToCustomMode(global::Google.Cloud.Compute.V1.SwitchToCustomModeNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SwitchToCustomMode, null, options, request);
      }
      /// <summary>
      /// Switches the network mode from auto subnet mode to custom subnet mode.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SwitchToCustomModeAsync(global::Google.Cloud.Compute.V1.SwitchToCustomModeNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SwitchToCustomModeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Switches the network mode from auto subnet mode to custom subnet mode.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SwitchToCustomModeAsync(global::Google.Cloud.Compute.V1.SwitchToCustomModeNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SwitchToCustomMode, null, options, request);
      }
      /// <summary>
      /// Updates the specified network peering with the data included in the request Only the following fields can be modified: NetworkPeering.export_custom_routes, and NetworkPeering.import_custom_routes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation UpdatePeering(global::Google.Cloud.Compute.V1.UpdatePeeringNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePeering(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified network peering with the data included in the request Only the following fields can be modified: NetworkPeering.export_custom_routes, and NetworkPeering.import_custom_routes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation UpdatePeering(global::Google.Cloud.Compute.V1.UpdatePeeringNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePeering, null, options, request);
      }
      /// <summary>
      /// Updates the specified network peering with the data included in the request Only the following fields can be modified: NetworkPeering.export_custom_routes, and NetworkPeering.import_custom_routes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdatePeeringAsync(global::Google.Cloud.Compute.V1.UpdatePeeringNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePeeringAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified network peering with the data included in the request Only the following fields can be modified: NetworkPeering.export_custom_routes, and NetworkPeering.import_custom_routes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdatePeeringAsync(global::Google.Cloud.Compute.V1.UpdatePeeringNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePeering, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NetworksClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NetworksClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NetworksBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddPeering, serviceImpl.AddPeering)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_ListPeeringRoutes, serviceImpl.ListPeeringRoutes)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_RemovePeering, serviceImpl.RemovePeering)
          .AddMethod(__Method_SwitchToCustomMode, serviceImpl.SwitchToCustomMode)
          .AddMethod(__Method_UpdatePeering, serviceImpl.UpdatePeering).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NetworksBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddPeering, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AddPeeringNetworkRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.AddPeering));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteNetworkRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetNetworkRequest, global::Google.Cloud.Compute.V1.Network>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertNetworkRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListNetworksRequest, global::Google.Cloud.Compute.V1.NetworkList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_ListPeeringRoutes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListPeeringRoutesNetworksRequest, global::Google.Cloud.Compute.V1.ExchangedPeeringRoutesList>(serviceImpl.ListPeeringRoutes));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchNetworkRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_RemovePeering, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.RemovePeeringNetworkRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.RemovePeering));
      serviceBinder.AddMethod(__Method_SwitchToCustomMode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SwitchToCustomModeNetworkRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SwitchToCustomMode));
      serviceBinder.AddMethod(__Method_UpdatePeering, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdatePeeringNetworkRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.UpdatePeering));
    }

  }
  /// <summary>
  /// The NodeGroups API.
  /// </summary>
  public static partial class NodeGroups
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.NodeGroups";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AddNodesNodeGroupRequest> __Marshaller_google_cloud_compute_v1_AddNodesNodeGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AddNodesNodeGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListNodeGroupsRequest> __Marshaller_google_cloud_compute_v1_AggregatedListNodeGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListNodeGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NodeGroupAggregatedList> __Marshaller_google_cloud_compute_v1_NodeGroupAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NodeGroupAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteNodeGroupRequest> __Marshaller_google_cloud_compute_v1_DeleteNodeGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteNodeGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteNodesNodeGroupRequest> __Marshaller_google_cloud_compute_v1_DeleteNodesNodeGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteNodesNodeGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetNodeGroupRequest> __Marshaller_google_cloud_compute_v1_GetNodeGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetNodeGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NodeGroup> __Marshaller_google_cloud_compute_v1_NodeGroup = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NodeGroup.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetIamPolicyNodeGroupRequest> __Marshaller_google_cloud_compute_v1_GetIamPolicyNodeGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetIamPolicyNodeGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Policy> __Marshaller_google_cloud_compute_v1_Policy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Policy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertNodeGroupRequest> __Marshaller_google_cloud_compute_v1_InsertNodeGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertNodeGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListNodeGroupsRequest> __Marshaller_google_cloud_compute_v1_ListNodeGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListNodeGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NodeGroupList> __Marshaller_google_cloud_compute_v1_NodeGroupList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NodeGroupList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListNodesNodeGroupsRequest> __Marshaller_google_cloud_compute_v1_ListNodesNodeGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListNodesNodeGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NodeGroupsListNodes> __Marshaller_google_cloud_compute_v1_NodeGroupsListNodes = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NodeGroupsListNodes.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchNodeGroupRequest> __Marshaller_google_cloud_compute_v1_PatchNodeGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchNodeGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetIamPolicyNodeGroupRequest> __Marshaller_google_cloud_compute_v1_SetIamPolicyNodeGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetIamPolicyNodeGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetNodeTemplateNodeGroupRequest> __Marshaller_google_cloud_compute_v1_SetNodeTemplateNodeGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetNodeTemplateNodeGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestIamPermissionsNodeGroupRequest> __Marshaller_google_cloud_compute_v1_TestIamPermissionsNodeGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestIamPermissionsNodeGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Marshaller_google_cloud_compute_v1_TestPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestPermissionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AddNodesNodeGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_AddNodes = new grpc::Method<global::Google.Cloud.Compute.V1.AddNodesNodeGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddNodes",
        __Marshaller_google_cloud_compute_v1_AddNodesNodeGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListNodeGroupsRequest, global::Google.Cloud.Compute.V1.NodeGroupAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListNodeGroupsRequest, global::Google.Cloud.Compute.V1.NodeGroupAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListNodeGroupsRequest,
        __Marshaller_google_cloud_compute_v1_NodeGroupAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteNodeGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteNodeGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteNodeGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteNodesNodeGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_DeleteNodes = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteNodesNodeGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteNodes",
        __Marshaller_google_cloud_compute_v1_DeleteNodesNodeGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetNodeGroupRequest, global::Google.Cloud.Compute.V1.NodeGroup> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetNodeGroupRequest, global::Google.Cloud.Compute.V1.NodeGroup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetNodeGroupRequest,
        __Marshaller_google_cloud_compute_v1_NodeGroup);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyNodeGroupRequest, global::Google.Cloud.Compute.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyNodeGroupRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_cloud_compute_v1_GetIamPolicyNodeGroupRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertNodeGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertNodeGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertNodeGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListNodeGroupsRequest, global::Google.Cloud.Compute.V1.NodeGroupList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListNodeGroupsRequest, global::Google.Cloud.Compute.V1.NodeGroupList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListNodeGroupsRequest,
        __Marshaller_google_cloud_compute_v1_NodeGroupList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListNodesNodeGroupsRequest, global::Google.Cloud.Compute.V1.NodeGroupsListNodes> __Method_ListNodes = new grpc::Method<global::Google.Cloud.Compute.V1.ListNodesNodeGroupsRequest, global::Google.Cloud.Compute.V1.NodeGroupsListNodes>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNodes",
        __Marshaller_google_cloud_compute_v1_ListNodesNodeGroupsRequest,
        __Marshaller_google_cloud_compute_v1_NodeGroupsListNodes);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchNodeGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchNodeGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchNodeGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyNodeGroupRequest, global::Google.Cloud.Compute.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyNodeGroupRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_cloud_compute_v1_SetIamPolicyNodeGroupRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetNodeTemplateNodeGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetNodeTemplate = new grpc::Method<global::Google.Cloud.Compute.V1.SetNodeTemplateNodeGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetNodeTemplate",
        __Marshaller_google_cloud_compute_v1_SetNodeTemplateNodeGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsNodeGroupRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsNodeGroupRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_cloud_compute_v1_TestIamPermissionsNodeGroupRequest,
        __Marshaller_google_cloud_compute_v1_TestPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[29]; }
    }

    /// <summary>Base class for server-side implementations of NodeGroups</summary>
    [grpc::BindServiceMethod(typeof(NodeGroups), "BindService")]
    public abstract partial class NodeGroupsBase
    {
      /// <summary>
      /// Adds specified number of nodes to the node group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> AddNodes(global::Google.Cloud.Compute.V1.AddNodesNodeGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves an aggregated list of node groups. Note: use nodeGroups.listNodes for more details about each group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NodeGroupAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListNodeGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified NodeGroup resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteNodeGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes specified nodes from the node group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> DeleteNodes(global::Google.Cloud.Compute.V1.DeleteNodesNodeGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified NodeGroup. Get a list of available NodeGroups by making a list() request. Note: the "nodes" field should not be used. Use nodeGroups.listNodes instead.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NodeGroup> Get(global::Google.Cloud.Compute.V1.GetNodeGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyNodeGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a NodeGroup resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertNodeGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of node groups available to the specified project. Note: use nodeGroups.listNodes for more details about each group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NodeGroupList> List(global::Google.Cloud.Compute.V1.ListNodeGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists nodes in the node group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NodeGroupsListNodes> ListNodes(global::Google.Cloud.Compute.V1.ListNodesNodeGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified node group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchNodeGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyNodeGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the node template of the node group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetNodeTemplate(global::Google.Cloud.Compute.V1.SetNodeTemplateNodeGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsNodeGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for NodeGroups</summary>
    public partial class NodeGroupsClient : grpc::ClientBase<NodeGroupsClient>
    {
      /// <summary>Creates a new client for NodeGroups</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NodeGroupsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NodeGroups that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NodeGroupsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NodeGroupsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NodeGroupsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Adds specified number of nodes to the node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddNodes(global::Google.Cloud.Compute.V1.AddNodesNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddNodes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds specified number of nodes to the node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddNodes(global::Google.Cloud.Compute.V1.AddNodesNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddNodes, null, options, request);
      }
      /// <summary>
      /// Adds specified number of nodes to the node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddNodesAsync(global::Google.Cloud.Compute.V1.AddNodesNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddNodesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds specified number of nodes to the node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddNodesAsync(global::Google.Cloud.Compute.V1.AddNodesNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddNodes, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of node groups. Note: use nodeGroups.listNodes for more details about each group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeGroupAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListNodeGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of node groups. Note: use nodeGroups.listNodes for more details about each group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeGroupAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListNodeGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of node groups. Note: use nodeGroups.listNodes for more details about each group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeGroupAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListNodeGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of node groups. Note: use nodeGroups.listNodes for more details about each group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeGroupAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListNodeGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified NodeGroup resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified NodeGroup resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified NodeGroup resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified NodeGroup resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes specified nodes from the node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DeleteNodes(global::Google.Cloud.Compute.V1.DeleteNodesNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNodes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes specified nodes from the node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DeleteNodes(global::Google.Cloud.Compute.V1.DeleteNodesNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteNodes, null, options, request);
      }
      /// <summary>
      /// Deletes specified nodes from the node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteNodesAsync(global::Google.Cloud.Compute.V1.DeleteNodesNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNodesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes specified nodes from the node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteNodesAsync(global::Google.Cloud.Compute.V1.DeleteNodesNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteNodes, null, options, request);
      }
      /// <summary>
      /// Returns the specified NodeGroup. Get a list of available NodeGroups by making a list() request. Note: the "nodes" field should not be used. Use nodeGroups.listNodes instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeGroup Get(global::Google.Cloud.Compute.V1.GetNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified NodeGroup. Get a list of available NodeGroups by making a list() request. Note: the "nodes" field should not be used. Use nodeGroups.listNodes instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeGroup Get(global::Google.Cloud.Compute.V1.GetNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified NodeGroup. Get a list of available NodeGroups by making a list() request. Note: the "nodes" field should not be used. Use nodeGroups.listNodes instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeGroup> GetAsync(global::Google.Cloud.Compute.V1.GetNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified NodeGroup. Get a list of available NodeGroups by making a list() request. Note: the "nodes" field should not be used. Use nodeGroups.listNodes instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeGroup> GetAsync(global::Google.Cloud.Compute.V1.GetNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Creates a NodeGroup resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a NodeGroup resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a NodeGroup resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a NodeGroup resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of node groups available to the specified project. Note: use nodeGroups.listNodes for more details about each group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeGroupList List(global::Google.Cloud.Compute.V1.ListNodeGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of node groups available to the specified project. Note: use nodeGroups.listNodes for more details about each group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeGroupList List(global::Google.Cloud.Compute.V1.ListNodeGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of node groups available to the specified project. Note: use nodeGroups.listNodes for more details about each group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeGroupList> ListAsync(global::Google.Cloud.Compute.V1.ListNodeGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of node groups available to the specified project. Note: use nodeGroups.listNodes for more details about each group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeGroupList> ListAsync(global::Google.Cloud.Compute.V1.ListNodeGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Lists nodes in the node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeGroupsListNodes ListNodes(global::Google.Cloud.Compute.V1.ListNodesNodeGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNodes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists nodes in the node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeGroupsListNodes ListNodes(global::Google.Cloud.Compute.V1.ListNodesNodeGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNodes, null, options, request);
      }
      /// <summary>
      /// Lists nodes in the node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeGroupsListNodes> ListNodesAsync(global::Google.Cloud.Compute.V1.ListNodesNodeGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNodesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists nodes in the node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeGroupsListNodes> ListNodesAsync(global::Google.Cloud.Compute.V1.ListNodesNodeGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNodes, null, options, request);
      }
      /// <summary>
      /// Updates the specified node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates the specified node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Updates the node template of the node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetNodeTemplate(global::Google.Cloud.Compute.V1.SetNodeTemplateNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetNodeTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the node template of the node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetNodeTemplate(global::Google.Cloud.Compute.V1.SetNodeTemplateNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetNodeTemplate, null, options, request);
      }
      /// <summary>
      /// Updates the node template of the node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetNodeTemplateAsync(global::Google.Cloud.Compute.V1.SetNodeTemplateNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetNodeTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the node template of the node group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetNodeTemplateAsync(global::Google.Cloud.Compute.V1.SetNodeTemplateNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetNodeTemplate, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsNodeGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsNodeGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NodeGroupsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NodeGroupsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NodeGroupsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddNodes, serviceImpl.AddNodes)
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_DeleteNodes, serviceImpl.DeleteNodes)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_ListNodes, serviceImpl.ListNodes)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_SetNodeTemplate, serviceImpl.SetNodeTemplate)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NodeGroupsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddNodes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AddNodesNodeGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.AddNodes));
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListNodeGroupsRequest, global::Google.Cloud.Compute.V1.NodeGroupAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteNodeGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_DeleteNodes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteNodesNodeGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.DeleteNodes));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetNodeGroupRequest, global::Google.Cloud.Compute.V1.NodeGroup>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetIamPolicyNodeGroupRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertNodeGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListNodeGroupsRequest, global::Google.Cloud.Compute.V1.NodeGroupList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_ListNodes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListNodesNodeGroupsRequest, global::Google.Cloud.Compute.V1.NodeGroupsListNodes>(serviceImpl.ListNodes));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchNodeGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetIamPolicyNodeGroupRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_SetNodeTemplate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetNodeTemplateNodeGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetNodeTemplate));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.TestIamPermissionsNodeGroupRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
  /// <summary>
  /// The NodeTemplates API.
  /// </summary>
  public static partial class NodeTemplates
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.NodeTemplates";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListNodeTemplatesRequest> __Marshaller_google_cloud_compute_v1_AggregatedListNodeTemplatesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListNodeTemplatesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NodeTemplateAggregatedList> __Marshaller_google_cloud_compute_v1_NodeTemplateAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NodeTemplateAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteNodeTemplateRequest> __Marshaller_google_cloud_compute_v1_DeleteNodeTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteNodeTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetNodeTemplateRequest> __Marshaller_google_cloud_compute_v1_GetNodeTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetNodeTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NodeTemplate> __Marshaller_google_cloud_compute_v1_NodeTemplate = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NodeTemplate.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetIamPolicyNodeTemplateRequest> __Marshaller_google_cloud_compute_v1_GetIamPolicyNodeTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetIamPolicyNodeTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Policy> __Marshaller_google_cloud_compute_v1_Policy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Policy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertNodeTemplateRequest> __Marshaller_google_cloud_compute_v1_InsertNodeTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertNodeTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListNodeTemplatesRequest> __Marshaller_google_cloud_compute_v1_ListNodeTemplatesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListNodeTemplatesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NodeTemplateList> __Marshaller_google_cloud_compute_v1_NodeTemplateList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NodeTemplateList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetIamPolicyNodeTemplateRequest> __Marshaller_google_cloud_compute_v1_SetIamPolicyNodeTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetIamPolicyNodeTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestIamPermissionsNodeTemplateRequest> __Marshaller_google_cloud_compute_v1_TestIamPermissionsNodeTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestIamPermissionsNodeTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Marshaller_google_cloud_compute_v1_TestPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestPermissionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListNodeTemplatesRequest, global::Google.Cloud.Compute.V1.NodeTemplateAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListNodeTemplatesRequest, global::Google.Cloud.Compute.V1.NodeTemplateAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListNodeTemplatesRequest,
        __Marshaller_google_cloud_compute_v1_NodeTemplateAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteNodeTemplateRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteNodeTemplateRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteNodeTemplateRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetNodeTemplateRequest, global::Google.Cloud.Compute.V1.NodeTemplate> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetNodeTemplateRequest, global::Google.Cloud.Compute.V1.NodeTemplate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetNodeTemplateRequest,
        __Marshaller_google_cloud_compute_v1_NodeTemplate);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyNodeTemplateRequest, global::Google.Cloud.Compute.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyNodeTemplateRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_cloud_compute_v1_GetIamPolicyNodeTemplateRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertNodeTemplateRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertNodeTemplateRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertNodeTemplateRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListNodeTemplatesRequest, global::Google.Cloud.Compute.V1.NodeTemplateList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListNodeTemplatesRequest, global::Google.Cloud.Compute.V1.NodeTemplateList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListNodeTemplatesRequest,
        __Marshaller_google_cloud_compute_v1_NodeTemplateList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyNodeTemplateRequest, global::Google.Cloud.Compute.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyNodeTemplateRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_cloud_compute_v1_SetIamPolicyNodeTemplateRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsNodeTemplateRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsNodeTemplateRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_cloud_compute_v1_TestIamPermissionsNodeTemplateRequest,
        __Marshaller_google_cloud_compute_v1_TestPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[30]; }
    }

    /// <summary>Base class for server-side implementations of NodeTemplates</summary>
    [grpc::BindServiceMethod(typeof(NodeTemplates), "BindService")]
    public abstract partial class NodeTemplatesBase
    {
      /// <summary>
      /// Retrieves an aggregated list of node templates.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NodeTemplateAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListNodeTemplatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified NodeTemplate resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteNodeTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified node template. Gets a list of available node templates by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NodeTemplate> Get(global::Google.Cloud.Compute.V1.GetNodeTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyNodeTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a NodeTemplate resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertNodeTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of node templates available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NodeTemplateList> List(global::Google.Cloud.Compute.V1.ListNodeTemplatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyNodeTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsNodeTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for NodeTemplates</summary>
    public partial class NodeTemplatesClient : grpc::ClientBase<NodeTemplatesClient>
    {
      /// <summary>Creates a new client for NodeTemplates</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NodeTemplatesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NodeTemplates that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NodeTemplatesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NodeTemplatesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NodeTemplatesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of node templates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeTemplateAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListNodeTemplatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of node templates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeTemplateAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListNodeTemplatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of node templates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeTemplateAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListNodeTemplatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of node templates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeTemplateAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListNodeTemplatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified NodeTemplate resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteNodeTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified NodeTemplate resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteNodeTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified NodeTemplate resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteNodeTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified NodeTemplate resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteNodeTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified node template. Gets a list of available node templates by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeTemplate Get(global::Google.Cloud.Compute.V1.GetNodeTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified node template. Gets a list of available node templates by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeTemplate Get(global::Google.Cloud.Compute.V1.GetNodeTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified node template. Gets a list of available node templates by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeTemplate> GetAsync(global::Google.Cloud.Compute.V1.GetNodeTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified node template. Gets a list of available node templates by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeTemplate> GetAsync(global::Google.Cloud.Compute.V1.GetNodeTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyNodeTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyNodeTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyNodeTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyNodeTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Creates a NodeTemplate resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertNodeTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a NodeTemplate resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertNodeTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a NodeTemplate resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertNodeTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a NodeTemplate resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertNodeTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of node templates available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeTemplateList List(global::Google.Cloud.Compute.V1.ListNodeTemplatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of node templates available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeTemplateList List(global::Google.Cloud.Compute.V1.ListNodeTemplatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of node templates available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeTemplateList> ListAsync(global::Google.Cloud.Compute.V1.ListNodeTemplatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of node templates available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeTemplateList> ListAsync(global::Google.Cloud.Compute.V1.ListNodeTemplatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyNodeTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyNodeTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyNodeTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyNodeTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsNodeTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsNodeTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsNodeTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsNodeTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NodeTemplatesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NodeTemplatesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NodeTemplatesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NodeTemplatesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListNodeTemplatesRequest, global::Google.Cloud.Compute.V1.NodeTemplateAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteNodeTemplateRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetNodeTemplateRequest, global::Google.Cloud.Compute.V1.NodeTemplate>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetIamPolicyNodeTemplateRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertNodeTemplateRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListNodeTemplatesRequest, global::Google.Cloud.Compute.V1.NodeTemplateList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetIamPolicyNodeTemplateRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.TestIamPermissionsNodeTemplateRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
  /// <summary>
  /// The NodeTypes API.
  /// </summary>
  public static partial class NodeTypes
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.NodeTypes";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListNodeTypesRequest> __Marshaller_google_cloud_compute_v1_AggregatedListNodeTypesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListNodeTypesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NodeTypeAggregatedList> __Marshaller_google_cloud_compute_v1_NodeTypeAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NodeTypeAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetNodeTypeRequest> __Marshaller_google_cloud_compute_v1_GetNodeTypeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetNodeTypeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NodeType> __Marshaller_google_cloud_compute_v1_NodeType = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NodeType.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListNodeTypesRequest> __Marshaller_google_cloud_compute_v1_ListNodeTypesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListNodeTypesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NodeTypeList> __Marshaller_google_cloud_compute_v1_NodeTypeList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NodeTypeList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListNodeTypesRequest, global::Google.Cloud.Compute.V1.NodeTypeAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListNodeTypesRequest, global::Google.Cloud.Compute.V1.NodeTypeAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListNodeTypesRequest,
        __Marshaller_google_cloud_compute_v1_NodeTypeAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetNodeTypeRequest, global::Google.Cloud.Compute.V1.NodeType> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetNodeTypeRequest, global::Google.Cloud.Compute.V1.NodeType>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetNodeTypeRequest,
        __Marshaller_google_cloud_compute_v1_NodeType);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListNodeTypesRequest, global::Google.Cloud.Compute.V1.NodeTypeList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListNodeTypesRequest, global::Google.Cloud.Compute.V1.NodeTypeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListNodeTypesRequest,
        __Marshaller_google_cloud_compute_v1_NodeTypeList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[31]; }
    }

    /// <summary>Base class for server-side implementations of NodeTypes</summary>
    [grpc::BindServiceMethod(typeof(NodeTypes), "BindService")]
    public abstract partial class NodeTypesBase
    {
      /// <summary>
      /// Retrieves an aggregated list of node types.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NodeTypeAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListNodeTypesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified node type. Gets a list of available node types by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NodeType> Get(global::Google.Cloud.Compute.V1.GetNodeTypeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of node types available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NodeTypeList> List(global::Google.Cloud.Compute.V1.ListNodeTypesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for NodeTypes</summary>
    public partial class NodeTypesClient : grpc::ClientBase<NodeTypesClient>
    {
      /// <summary>Creates a new client for NodeTypes</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NodeTypesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NodeTypes that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NodeTypesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NodeTypesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NodeTypesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of node types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeTypeAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListNodeTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of node types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeTypeAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListNodeTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of node types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeTypeAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListNodeTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of node types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeTypeAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListNodeTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Returns the specified node type. Gets a list of available node types by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeType Get(global::Google.Cloud.Compute.V1.GetNodeTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified node type. Gets a list of available node types by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeType Get(global::Google.Cloud.Compute.V1.GetNodeTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified node type. Gets a list of available node types by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeType> GetAsync(global::Google.Cloud.Compute.V1.GetNodeTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified node type. Gets a list of available node types by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeType> GetAsync(global::Google.Cloud.Compute.V1.GetNodeTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of node types available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeTypeList List(global::Google.Cloud.Compute.V1.ListNodeTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of node types available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NodeTypeList List(global::Google.Cloud.Compute.V1.ListNodeTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of node types available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeTypeList> ListAsync(global::Google.Cloud.Compute.V1.ListNodeTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of node types available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NodeTypeList> ListAsync(global::Google.Cloud.Compute.V1.ListNodeTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NodeTypesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NodeTypesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NodeTypesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NodeTypesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListNodeTypesRequest, global::Google.Cloud.Compute.V1.NodeTypeAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetNodeTypeRequest, global::Google.Cloud.Compute.V1.NodeType>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListNodeTypesRequest, global::Google.Cloud.Compute.V1.NodeTypeList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The PacketMirrorings API.
  /// </summary>
  public static partial class PacketMirrorings
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.PacketMirrorings";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListPacketMirroringsRequest> __Marshaller_google_cloud_compute_v1_AggregatedListPacketMirroringsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListPacketMirroringsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PacketMirroringAggregatedList> __Marshaller_google_cloud_compute_v1_PacketMirroringAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PacketMirroringAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeletePacketMirroringRequest> __Marshaller_google_cloud_compute_v1_DeletePacketMirroringRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeletePacketMirroringRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetPacketMirroringRequest> __Marshaller_google_cloud_compute_v1_GetPacketMirroringRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetPacketMirroringRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PacketMirroring> __Marshaller_google_cloud_compute_v1_PacketMirroring = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PacketMirroring.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertPacketMirroringRequest> __Marshaller_google_cloud_compute_v1_InsertPacketMirroringRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertPacketMirroringRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListPacketMirroringsRequest> __Marshaller_google_cloud_compute_v1_ListPacketMirroringsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListPacketMirroringsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PacketMirroringList> __Marshaller_google_cloud_compute_v1_PacketMirroringList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PacketMirroringList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchPacketMirroringRequest> __Marshaller_google_cloud_compute_v1_PatchPacketMirroringRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchPacketMirroringRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestIamPermissionsPacketMirroringRequest> __Marshaller_google_cloud_compute_v1_TestIamPermissionsPacketMirroringRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestIamPermissionsPacketMirroringRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Marshaller_google_cloud_compute_v1_TestPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestPermissionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListPacketMirroringsRequest, global::Google.Cloud.Compute.V1.PacketMirroringAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListPacketMirroringsRequest, global::Google.Cloud.Compute.V1.PacketMirroringAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListPacketMirroringsRequest,
        __Marshaller_google_cloud_compute_v1_PacketMirroringAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeletePacketMirroringRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeletePacketMirroringRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeletePacketMirroringRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetPacketMirroringRequest, global::Google.Cloud.Compute.V1.PacketMirroring> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetPacketMirroringRequest, global::Google.Cloud.Compute.V1.PacketMirroring>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetPacketMirroringRequest,
        __Marshaller_google_cloud_compute_v1_PacketMirroring);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertPacketMirroringRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertPacketMirroringRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertPacketMirroringRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListPacketMirroringsRequest, global::Google.Cloud.Compute.V1.PacketMirroringList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListPacketMirroringsRequest, global::Google.Cloud.Compute.V1.PacketMirroringList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListPacketMirroringsRequest,
        __Marshaller_google_cloud_compute_v1_PacketMirroringList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchPacketMirroringRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchPacketMirroringRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchPacketMirroringRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsPacketMirroringRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsPacketMirroringRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_cloud_compute_v1_TestIamPermissionsPacketMirroringRequest,
        __Marshaller_google_cloud_compute_v1_TestPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[32]; }
    }

    /// <summary>Base class for server-side implementations of PacketMirrorings</summary>
    [grpc::BindServiceMethod(typeof(PacketMirrorings), "BindService")]
    public abstract partial class PacketMirroringsBase
    {
      /// <summary>
      /// Retrieves an aggregated list of packetMirrorings.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.PacketMirroringAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListPacketMirroringsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified PacketMirroring resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeletePacketMirroringRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified PacketMirroring resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.PacketMirroring> Get(global::Google.Cloud.Compute.V1.GetPacketMirroringRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a PacketMirroring resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertPacketMirroringRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of PacketMirroring resources available to the specified project and region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.PacketMirroringList> List(global::Google.Cloud.Compute.V1.ListPacketMirroringsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patches the specified PacketMirroring resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchPacketMirroringRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsPacketMirroringRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PacketMirrorings</summary>
    public partial class PacketMirroringsClient : grpc::ClientBase<PacketMirroringsClient>
    {
      /// <summary>Creates a new client for PacketMirrorings</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PacketMirroringsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PacketMirrorings that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PacketMirroringsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PacketMirroringsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PacketMirroringsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of packetMirrorings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.PacketMirroringAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListPacketMirroringsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of packetMirrorings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.PacketMirroringAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListPacketMirroringsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of packetMirrorings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.PacketMirroringAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListPacketMirroringsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of packetMirrorings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.PacketMirroringAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListPacketMirroringsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified PacketMirroring resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeletePacketMirroringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified PacketMirroring resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeletePacketMirroringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified PacketMirroring resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeletePacketMirroringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified PacketMirroring resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeletePacketMirroringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified PacketMirroring resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.PacketMirroring Get(global::Google.Cloud.Compute.V1.GetPacketMirroringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified PacketMirroring resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.PacketMirroring Get(global::Google.Cloud.Compute.V1.GetPacketMirroringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified PacketMirroring resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.PacketMirroring> GetAsync(global::Google.Cloud.Compute.V1.GetPacketMirroringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified PacketMirroring resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.PacketMirroring> GetAsync(global::Google.Cloud.Compute.V1.GetPacketMirroringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a PacketMirroring resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertPacketMirroringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a PacketMirroring resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertPacketMirroringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a PacketMirroring resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertPacketMirroringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a PacketMirroring resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertPacketMirroringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of PacketMirroring resources available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.PacketMirroringList List(global::Google.Cloud.Compute.V1.ListPacketMirroringsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of PacketMirroring resources available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.PacketMirroringList List(global::Google.Cloud.Compute.V1.ListPacketMirroringsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of PacketMirroring resources available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.PacketMirroringList> ListAsync(global::Google.Cloud.Compute.V1.ListPacketMirroringsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of PacketMirroring resources available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.PacketMirroringList> ListAsync(global::Google.Cloud.Compute.V1.ListPacketMirroringsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Patches the specified PacketMirroring resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchPacketMirroringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified PacketMirroring resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchPacketMirroringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Patches the specified PacketMirroring resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchPacketMirroringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified PacketMirroring resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchPacketMirroringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsPacketMirroringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsPacketMirroringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsPacketMirroringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsPacketMirroringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PacketMirroringsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PacketMirroringsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PacketMirroringsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PacketMirroringsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListPacketMirroringsRequest, global::Google.Cloud.Compute.V1.PacketMirroringAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeletePacketMirroringRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetPacketMirroringRequest, global::Google.Cloud.Compute.V1.PacketMirroring>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertPacketMirroringRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListPacketMirroringsRequest, global::Google.Cloud.Compute.V1.PacketMirroringList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchPacketMirroringRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.TestIamPermissionsPacketMirroringRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
  /// <summary>
  /// The Projects API.
  /// </summary>
  public static partial class Projects
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.Projects";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DisableXpnHostProjectRequest> __Marshaller_google_cloud_compute_v1_DisableXpnHostProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DisableXpnHostProjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DisableXpnResourceProjectRequest> __Marshaller_google_cloud_compute_v1_DisableXpnResourceProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DisableXpnResourceProjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.EnableXpnHostProjectRequest> __Marshaller_google_cloud_compute_v1_EnableXpnHostProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.EnableXpnHostProjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.EnableXpnResourceProjectRequest> __Marshaller_google_cloud_compute_v1_EnableXpnResourceProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.EnableXpnResourceProjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetProjectRequest> __Marshaller_google_cloud_compute_v1_GetProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetProjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Project> __Marshaller_google_cloud_compute_v1_Project = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Project.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetXpnHostProjectRequest> __Marshaller_google_cloud_compute_v1_GetXpnHostProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetXpnHostProjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetXpnResourcesProjectsRequest> __Marshaller_google_cloud_compute_v1_GetXpnResourcesProjectsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetXpnResourcesProjectsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ProjectsGetXpnResources> __Marshaller_google_cloud_compute_v1_ProjectsGetXpnResources = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ProjectsGetXpnResources.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListXpnHostsProjectsRequest> __Marshaller_google_cloud_compute_v1_ListXpnHostsProjectsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListXpnHostsProjectsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.XpnHostList> __Marshaller_google_cloud_compute_v1_XpnHostList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.XpnHostList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.MoveDiskProjectRequest> __Marshaller_google_cloud_compute_v1_MoveDiskProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.MoveDiskProjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.MoveInstanceProjectRequest> __Marshaller_google_cloud_compute_v1_MoveInstanceProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.MoveInstanceProjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetCommonInstanceMetadataProjectRequest> __Marshaller_google_cloud_compute_v1_SetCommonInstanceMetadataProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetCommonInstanceMetadataProjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetDefaultNetworkTierProjectRequest> __Marshaller_google_cloud_compute_v1_SetDefaultNetworkTierProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetDefaultNetworkTierProjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetUsageExportBucketProjectRequest> __Marshaller_google_cloud_compute_v1_SetUsageExportBucketProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetUsageExportBucketProjectRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DisableXpnHostProjectRequest, global::Google.Cloud.Compute.V1.Operation> __Method_DisableXpnHost = new grpc::Method<global::Google.Cloud.Compute.V1.DisableXpnHostProjectRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DisableXpnHost",
        __Marshaller_google_cloud_compute_v1_DisableXpnHostProjectRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DisableXpnResourceProjectRequest, global::Google.Cloud.Compute.V1.Operation> __Method_DisableXpnResource = new grpc::Method<global::Google.Cloud.Compute.V1.DisableXpnResourceProjectRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DisableXpnResource",
        __Marshaller_google_cloud_compute_v1_DisableXpnResourceProjectRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.EnableXpnHostProjectRequest, global::Google.Cloud.Compute.V1.Operation> __Method_EnableXpnHost = new grpc::Method<global::Google.Cloud.Compute.V1.EnableXpnHostProjectRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EnableXpnHost",
        __Marshaller_google_cloud_compute_v1_EnableXpnHostProjectRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.EnableXpnResourceProjectRequest, global::Google.Cloud.Compute.V1.Operation> __Method_EnableXpnResource = new grpc::Method<global::Google.Cloud.Compute.V1.EnableXpnResourceProjectRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EnableXpnResource",
        __Marshaller_google_cloud_compute_v1_EnableXpnResourceProjectRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetProjectRequest, global::Google.Cloud.Compute.V1.Project> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetProjectRequest, global::Google.Cloud.Compute.V1.Project>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetProjectRequest,
        __Marshaller_google_cloud_compute_v1_Project);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetXpnHostProjectRequest, global::Google.Cloud.Compute.V1.Project> __Method_GetXpnHost = new grpc::Method<global::Google.Cloud.Compute.V1.GetXpnHostProjectRequest, global::Google.Cloud.Compute.V1.Project>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetXpnHost",
        __Marshaller_google_cloud_compute_v1_GetXpnHostProjectRequest,
        __Marshaller_google_cloud_compute_v1_Project);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetXpnResourcesProjectsRequest, global::Google.Cloud.Compute.V1.ProjectsGetXpnResources> __Method_GetXpnResources = new grpc::Method<global::Google.Cloud.Compute.V1.GetXpnResourcesProjectsRequest, global::Google.Cloud.Compute.V1.ProjectsGetXpnResources>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetXpnResources",
        __Marshaller_google_cloud_compute_v1_GetXpnResourcesProjectsRequest,
        __Marshaller_google_cloud_compute_v1_ProjectsGetXpnResources);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListXpnHostsProjectsRequest, global::Google.Cloud.Compute.V1.XpnHostList> __Method_ListXpnHosts = new grpc::Method<global::Google.Cloud.Compute.V1.ListXpnHostsProjectsRequest, global::Google.Cloud.Compute.V1.XpnHostList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListXpnHosts",
        __Marshaller_google_cloud_compute_v1_ListXpnHostsProjectsRequest,
        __Marshaller_google_cloud_compute_v1_XpnHostList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.MoveDiskProjectRequest, global::Google.Cloud.Compute.V1.Operation> __Method_MoveDisk = new grpc::Method<global::Google.Cloud.Compute.V1.MoveDiskProjectRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MoveDisk",
        __Marshaller_google_cloud_compute_v1_MoveDiskProjectRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.MoveInstanceProjectRequest, global::Google.Cloud.Compute.V1.Operation> __Method_MoveInstance = new grpc::Method<global::Google.Cloud.Compute.V1.MoveInstanceProjectRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MoveInstance",
        __Marshaller_google_cloud_compute_v1_MoveInstanceProjectRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetCommonInstanceMetadataProjectRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetCommonInstanceMetadata = new grpc::Method<global::Google.Cloud.Compute.V1.SetCommonInstanceMetadataProjectRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetCommonInstanceMetadata",
        __Marshaller_google_cloud_compute_v1_SetCommonInstanceMetadataProjectRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetDefaultNetworkTierProjectRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetDefaultNetworkTier = new grpc::Method<global::Google.Cloud.Compute.V1.SetDefaultNetworkTierProjectRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetDefaultNetworkTier",
        __Marshaller_google_cloud_compute_v1_SetDefaultNetworkTierProjectRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetUsageExportBucketProjectRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetUsageExportBucket = new grpc::Method<global::Google.Cloud.Compute.V1.SetUsageExportBucketProjectRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetUsageExportBucket",
        __Marshaller_google_cloud_compute_v1_SetUsageExportBucketProjectRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[33]; }
    }

    /// <summary>Base class for server-side implementations of Projects</summary>
    [grpc::BindServiceMethod(typeof(Projects), "BindService")]
    public abstract partial class ProjectsBase
    {
      /// <summary>
      /// Disable this project as a shared VPC host project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> DisableXpnHost(global::Google.Cloud.Compute.V1.DisableXpnHostProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Disable a service resource (also known as service project) associated with this host project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> DisableXpnResource(global::Google.Cloud.Compute.V1.DisableXpnResourceProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Enable this project as a shared VPC host project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> EnableXpnHost(global::Google.Cloud.Compute.V1.EnableXpnHostProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Enable service resource (a.k.a service project) for a host project, so that subnets in the host project can be used by instances in the service project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> EnableXpnResource(global::Google.Cloud.Compute.V1.EnableXpnResourceProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified Project resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Project> Get(global::Google.Cloud.Compute.V1.GetProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the shared VPC host project that this project links to. May be empty if no link exists.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Project> GetXpnHost(global::Google.Cloud.Compute.V1.GetXpnHostProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets service resources (a.k.a service project) associated with this host project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.ProjectsGetXpnResources> GetXpnResources(global::Google.Cloud.Compute.V1.GetXpnResourcesProjectsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all shared VPC host projects visible to the user in an organization.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.XpnHostList> ListXpnHosts(global::Google.Cloud.Compute.V1.ListXpnHostsProjectsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Moves a persistent disk from one zone to another.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> MoveDisk(global::Google.Cloud.Compute.V1.MoveDiskProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Moves an instance and its attached persistent disks from one zone to another.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> MoveInstance(global::Google.Cloud.Compute.V1.MoveInstanceProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets metadata common to all instances within the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetCommonInstanceMetadata(global::Google.Cloud.Compute.V1.SetCommonInstanceMetadataProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the default network tier of the project. The default network tier is used when an address/forwardingRule/instance is created without specifying the network tier field.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetDefaultNetworkTier(global::Google.Cloud.Compute.V1.SetDefaultNetworkTierProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Enables the usage export feature and sets the usage export bucket where reports are stored. If you provide an empty request body using this method, the usage export feature will be disabled.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetUsageExportBucket(global::Google.Cloud.Compute.V1.SetUsageExportBucketProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Projects</summary>
    public partial class ProjectsClient : grpc::ClientBase<ProjectsClient>
    {
      /// <summary>Creates a new client for Projects</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ProjectsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Projects that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ProjectsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ProjectsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ProjectsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Disable this project as a shared VPC host project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DisableXpnHost(global::Google.Cloud.Compute.V1.DisableXpnHostProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisableXpnHost(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disable this project as a shared VPC host project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DisableXpnHost(global::Google.Cloud.Compute.V1.DisableXpnHostProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DisableXpnHost, null, options, request);
      }
      /// <summary>
      /// Disable this project as a shared VPC host project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DisableXpnHostAsync(global::Google.Cloud.Compute.V1.DisableXpnHostProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisableXpnHostAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disable this project as a shared VPC host project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DisableXpnHostAsync(global::Google.Cloud.Compute.V1.DisableXpnHostProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DisableXpnHost, null, options, request);
      }
      /// <summary>
      /// Disable a service resource (also known as service project) associated with this host project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DisableXpnResource(global::Google.Cloud.Compute.V1.DisableXpnResourceProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisableXpnResource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disable a service resource (also known as service project) associated with this host project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DisableXpnResource(global::Google.Cloud.Compute.V1.DisableXpnResourceProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DisableXpnResource, null, options, request);
      }
      /// <summary>
      /// Disable a service resource (also known as service project) associated with this host project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DisableXpnResourceAsync(global::Google.Cloud.Compute.V1.DisableXpnResourceProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisableXpnResourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disable a service resource (also known as service project) associated with this host project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DisableXpnResourceAsync(global::Google.Cloud.Compute.V1.DisableXpnResourceProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DisableXpnResource, null, options, request);
      }
      /// <summary>
      /// Enable this project as a shared VPC host project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation EnableXpnHost(global::Google.Cloud.Compute.V1.EnableXpnHostProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableXpnHost(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enable this project as a shared VPC host project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation EnableXpnHost(global::Google.Cloud.Compute.V1.EnableXpnHostProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EnableXpnHost, null, options, request);
      }
      /// <summary>
      /// Enable this project as a shared VPC host project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> EnableXpnHostAsync(global::Google.Cloud.Compute.V1.EnableXpnHostProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableXpnHostAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enable this project as a shared VPC host project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> EnableXpnHostAsync(global::Google.Cloud.Compute.V1.EnableXpnHostProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EnableXpnHost, null, options, request);
      }
      /// <summary>
      /// Enable service resource (a.k.a service project) for a host project, so that subnets in the host project can be used by instances in the service project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation EnableXpnResource(global::Google.Cloud.Compute.V1.EnableXpnResourceProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableXpnResource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enable service resource (a.k.a service project) for a host project, so that subnets in the host project can be used by instances in the service project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation EnableXpnResource(global::Google.Cloud.Compute.V1.EnableXpnResourceProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EnableXpnResource, null, options, request);
      }
      /// <summary>
      /// Enable service resource (a.k.a service project) for a host project, so that subnets in the host project can be used by instances in the service project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> EnableXpnResourceAsync(global::Google.Cloud.Compute.V1.EnableXpnResourceProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableXpnResourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enable service resource (a.k.a service project) for a host project, so that subnets in the host project can be used by instances in the service project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> EnableXpnResourceAsync(global::Google.Cloud.Compute.V1.EnableXpnResourceProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EnableXpnResource, null, options, request);
      }
      /// <summary>
      /// Returns the specified Project resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Project Get(global::Google.Cloud.Compute.V1.GetProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified Project resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Project Get(global::Google.Cloud.Compute.V1.GetProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified Project resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Project> GetAsync(global::Google.Cloud.Compute.V1.GetProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified Project resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Project> GetAsync(global::Google.Cloud.Compute.V1.GetProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Gets the shared VPC host project that this project links to. May be empty if no link exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Project GetXpnHost(global::Google.Cloud.Compute.V1.GetXpnHostProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetXpnHost(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the shared VPC host project that this project links to. May be empty if no link exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Project GetXpnHost(global::Google.Cloud.Compute.V1.GetXpnHostProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetXpnHost, null, options, request);
      }
      /// <summary>
      /// Gets the shared VPC host project that this project links to. May be empty if no link exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Project> GetXpnHostAsync(global::Google.Cloud.Compute.V1.GetXpnHostProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetXpnHostAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the shared VPC host project that this project links to. May be empty if no link exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Project> GetXpnHostAsync(global::Google.Cloud.Compute.V1.GetXpnHostProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetXpnHost, null, options, request);
      }
      /// <summary>
      /// Gets service resources (a.k.a service project) associated with this host project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ProjectsGetXpnResources GetXpnResources(global::Google.Cloud.Compute.V1.GetXpnResourcesProjectsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetXpnResources(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets service resources (a.k.a service project) associated with this host project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ProjectsGetXpnResources GetXpnResources(global::Google.Cloud.Compute.V1.GetXpnResourcesProjectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetXpnResources, null, options, request);
      }
      /// <summary>
      /// Gets service resources (a.k.a service project) associated with this host project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ProjectsGetXpnResources> GetXpnResourcesAsync(global::Google.Cloud.Compute.V1.GetXpnResourcesProjectsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetXpnResourcesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets service resources (a.k.a service project) associated with this host project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ProjectsGetXpnResources> GetXpnResourcesAsync(global::Google.Cloud.Compute.V1.GetXpnResourcesProjectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetXpnResources, null, options, request);
      }
      /// <summary>
      /// Lists all shared VPC host projects visible to the user in an organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.XpnHostList ListXpnHosts(global::Google.Cloud.Compute.V1.ListXpnHostsProjectsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListXpnHosts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all shared VPC host projects visible to the user in an organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.XpnHostList ListXpnHosts(global::Google.Cloud.Compute.V1.ListXpnHostsProjectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListXpnHosts, null, options, request);
      }
      /// <summary>
      /// Lists all shared VPC host projects visible to the user in an organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.XpnHostList> ListXpnHostsAsync(global::Google.Cloud.Compute.V1.ListXpnHostsProjectsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListXpnHostsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all shared VPC host projects visible to the user in an organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.XpnHostList> ListXpnHostsAsync(global::Google.Cloud.Compute.V1.ListXpnHostsProjectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListXpnHosts, null, options, request);
      }
      /// <summary>
      /// Moves a persistent disk from one zone to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation MoveDisk(global::Google.Cloud.Compute.V1.MoveDiskProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveDisk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Moves a persistent disk from one zone to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation MoveDisk(global::Google.Cloud.Compute.V1.MoveDiskProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MoveDisk, null, options, request);
      }
      /// <summary>
      /// Moves a persistent disk from one zone to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> MoveDiskAsync(global::Google.Cloud.Compute.V1.MoveDiskProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveDiskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Moves a persistent disk from one zone to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> MoveDiskAsync(global::Google.Cloud.Compute.V1.MoveDiskProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MoveDisk, null, options, request);
      }
      /// <summary>
      /// Moves an instance and its attached persistent disks from one zone to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation MoveInstance(global::Google.Cloud.Compute.V1.MoveInstanceProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveInstance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Moves an instance and its attached persistent disks from one zone to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation MoveInstance(global::Google.Cloud.Compute.V1.MoveInstanceProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MoveInstance, null, options, request);
      }
      /// <summary>
      /// Moves an instance and its attached persistent disks from one zone to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> MoveInstanceAsync(global::Google.Cloud.Compute.V1.MoveInstanceProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveInstanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Moves an instance and its attached persistent disks from one zone to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> MoveInstanceAsync(global::Google.Cloud.Compute.V1.MoveInstanceProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MoveInstance, null, options, request);
      }
      /// <summary>
      /// Sets metadata common to all instances within the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetCommonInstanceMetadata(global::Google.Cloud.Compute.V1.SetCommonInstanceMetadataProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetCommonInstanceMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets metadata common to all instances within the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetCommonInstanceMetadata(global::Google.Cloud.Compute.V1.SetCommonInstanceMetadataProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetCommonInstanceMetadata, null, options, request);
      }
      /// <summary>
      /// Sets metadata common to all instances within the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetCommonInstanceMetadataAsync(global::Google.Cloud.Compute.V1.SetCommonInstanceMetadataProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetCommonInstanceMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets metadata common to all instances within the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetCommonInstanceMetadataAsync(global::Google.Cloud.Compute.V1.SetCommonInstanceMetadataProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetCommonInstanceMetadata, null, options, request);
      }
      /// <summary>
      /// Sets the default network tier of the project. The default network tier is used when an address/forwardingRule/instance is created without specifying the network tier field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetDefaultNetworkTier(global::Google.Cloud.Compute.V1.SetDefaultNetworkTierProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetDefaultNetworkTier(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the default network tier of the project. The default network tier is used when an address/forwardingRule/instance is created without specifying the network tier field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetDefaultNetworkTier(global::Google.Cloud.Compute.V1.SetDefaultNetworkTierProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetDefaultNetworkTier, null, options, request);
      }
      /// <summary>
      /// Sets the default network tier of the project. The default network tier is used when an address/forwardingRule/instance is created without specifying the network tier field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetDefaultNetworkTierAsync(global::Google.Cloud.Compute.V1.SetDefaultNetworkTierProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetDefaultNetworkTierAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the default network tier of the project. The default network tier is used when an address/forwardingRule/instance is created without specifying the network tier field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetDefaultNetworkTierAsync(global::Google.Cloud.Compute.V1.SetDefaultNetworkTierProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetDefaultNetworkTier, null, options, request);
      }
      /// <summary>
      /// Enables the usage export feature and sets the usage export bucket where reports are stored. If you provide an empty request body using this method, the usage export feature will be disabled.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetUsageExportBucket(global::Google.Cloud.Compute.V1.SetUsageExportBucketProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetUsageExportBucket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enables the usage export feature and sets the usage export bucket where reports are stored. If you provide an empty request body using this method, the usage export feature will be disabled.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetUsageExportBucket(global::Google.Cloud.Compute.V1.SetUsageExportBucketProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetUsageExportBucket, null, options, request);
      }
      /// <summary>
      /// Enables the usage export feature and sets the usage export bucket where reports are stored. If you provide an empty request body using this method, the usage export feature will be disabled.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetUsageExportBucketAsync(global::Google.Cloud.Compute.V1.SetUsageExportBucketProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetUsageExportBucketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enables the usage export feature and sets the usage export bucket where reports are stored. If you provide an empty request body using this method, the usage export feature will be disabled.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetUsageExportBucketAsync(global::Google.Cloud.Compute.V1.SetUsageExportBucketProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetUsageExportBucket, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ProjectsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ProjectsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ProjectsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DisableXpnHost, serviceImpl.DisableXpnHost)
          .AddMethod(__Method_DisableXpnResource, serviceImpl.DisableXpnResource)
          .AddMethod(__Method_EnableXpnHost, serviceImpl.EnableXpnHost)
          .AddMethod(__Method_EnableXpnResource, serviceImpl.EnableXpnResource)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetXpnHost, serviceImpl.GetXpnHost)
          .AddMethod(__Method_GetXpnResources, serviceImpl.GetXpnResources)
          .AddMethod(__Method_ListXpnHosts, serviceImpl.ListXpnHosts)
          .AddMethod(__Method_MoveDisk, serviceImpl.MoveDisk)
          .AddMethod(__Method_MoveInstance, serviceImpl.MoveInstance)
          .AddMethod(__Method_SetCommonInstanceMetadata, serviceImpl.SetCommonInstanceMetadata)
          .AddMethod(__Method_SetDefaultNetworkTier, serviceImpl.SetDefaultNetworkTier)
          .AddMethod(__Method_SetUsageExportBucket, serviceImpl.SetUsageExportBucket).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ProjectsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_DisableXpnHost, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DisableXpnHostProjectRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.DisableXpnHost));
      serviceBinder.AddMethod(__Method_DisableXpnResource, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DisableXpnResourceProjectRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.DisableXpnResource));
      serviceBinder.AddMethod(__Method_EnableXpnHost, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.EnableXpnHostProjectRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.EnableXpnHost));
      serviceBinder.AddMethod(__Method_EnableXpnResource, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.EnableXpnResourceProjectRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.EnableXpnResource));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetProjectRequest, global::Google.Cloud.Compute.V1.Project>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetXpnHost, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetXpnHostProjectRequest, global::Google.Cloud.Compute.V1.Project>(serviceImpl.GetXpnHost));
      serviceBinder.AddMethod(__Method_GetXpnResources, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetXpnResourcesProjectsRequest, global::Google.Cloud.Compute.V1.ProjectsGetXpnResources>(serviceImpl.GetXpnResources));
      serviceBinder.AddMethod(__Method_ListXpnHosts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListXpnHostsProjectsRequest, global::Google.Cloud.Compute.V1.XpnHostList>(serviceImpl.ListXpnHosts));
      serviceBinder.AddMethod(__Method_MoveDisk, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.MoveDiskProjectRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.MoveDisk));
      serviceBinder.AddMethod(__Method_MoveInstance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.MoveInstanceProjectRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.MoveInstance));
      serviceBinder.AddMethod(__Method_SetCommonInstanceMetadata, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetCommonInstanceMetadataProjectRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetCommonInstanceMetadata));
      serviceBinder.AddMethod(__Method_SetDefaultNetworkTier, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetDefaultNetworkTierProjectRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetDefaultNetworkTier));
      serviceBinder.AddMethod(__Method_SetUsageExportBucket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetUsageExportBucketProjectRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetUsageExportBucket));
    }

  }
  /// <summary>
  /// The RegionAutoscalers API.
  /// </summary>
  public static partial class RegionAutoscalers
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.RegionAutoscalers";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteRegionAutoscalerRequest> __Marshaller_google_cloud_compute_v1_DeleteRegionAutoscalerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteRegionAutoscalerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRegionAutoscalerRequest> __Marshaller_google_cloud_compute_v1_GetRegionAutoscalerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRegionAutoscalerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Autoscaler> __Marshaller_google_cloud_compute_v1_Autoscaler = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Autoscaler.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertRegionAutoscalerRequest> __Marshaller_google_cloud_compute_v1_InsertRegionAutoscalerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertRegionAutoscalerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRegionAutoscalersRequest> __Marshaller_google_cloud_compute_v1_ListRegionAutoscalersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRegionAutoscalersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RegionAutoscalerList> __Marshaller_google_cloud_compute_v1_RegionAutoscalerList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RegionAutoscalerList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchRegionAutoscalerRequest> __Marshaller_google_cloud_compute_v1_PatchRegionAutoscalerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchRegionAutoscalerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdateRegionAutoscalerRequest> __Marshaller_google_cloud_compute_v1_UpdateRegionAutoscalerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdateRegionAutoscalerRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteRegionAutoscalerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRegionAutoscalerRequest, global::Google.Cloud.Compute.V1.Autoscaler> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRegionAutoscalerRequest, global::Google.Cloud.Compute.V1.Autoscaler>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRegionAutoscalerRequest,
        __Marshaller_google_cloud_compute_v1_Autoscaler);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertRegionAutoscalerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRegionAutoscalersRequest, global::Google.Cloud.Compute.V1.RegionAutoscalerList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRegionAutoscalersRequest, global::Google.Cloud.Compute.V1.RegionAutoscalerList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRegionAutoscalersRequest,
        __Marshaller_google_cloud_compute_v1_RegionAutoscalerList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchRegionAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchRegionAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchRegionAutoscalerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdateRegionAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Update = new grpc::Method<global::Google.Cloud.Compute.V1.UpdateRegionAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_google_cloud_compute_v1_UpdateRegionAutoscalerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[34]; }
    }

    /// <summary>Base class for server-side implementations of RegionAutoscalers</summary>
    [grpc::BindServiceMethod(typeof(RegionAutoscalers), "BindService")]
    public abstract partial class RegionAutoscalersBase
    {
      /// <summary>
      /// Deletes the specified autoscaler.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteRegionAutoscalerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified autoscaler.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Autoscaler> Get(global::Google.Cloud.Compute.V1.GetRegionAutoscalerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertRegionAutoscalerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of autoscalers contained within the specified region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.RegionAutoscalerList> List(global::Google.Cloud.Compute.V1.ListRegionAutoscalersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchRegionAutoscalerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Update(global::Google.Cloud.Compute.V1.UpdateRegionAutoscalerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegionAutoscalers</summary>
    public partial class RegionAutoscalersClient : grpc::ClientBase<RegionAutoscalersClient>
    {
      /// <summary>Creates a new client for RegionAutoscalers</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionAutoscalersClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegionAutoscalers that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionAutoscalersClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionAutoscalersClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionAutoscalersClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified autoscaler.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified autoscaler.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified autoscaler.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified autoscaler.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified autoscaler.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Autoscaler Get(global::Google.Cloud.Compute.V1.GetRegionAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified autoscaler.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Autoscaler Get(global::Google.Cloud.Compute.V1.GetRegionAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified autoscaler.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Autoscaler> GetAsync(global::Google.Cloud.Compute.V1.GetRegionAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified autoscaler.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Autoscaler> GetAsync(global::Google.Cloud.Compute.V1.GetRegionAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of autoscalers contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RegionAutoscalerList List(global::Google.Cloud.Compute.V1.ListRegionAutoscalersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of autoscalers contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RegionAutoscalerList List(global::Google.Cloud.Compute.V1.ListRegionAutoscalersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of autoscalers contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RegionAutoscalerList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionAutoscalersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of autoscalers contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RegionAutoscalerList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionAutoscalersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchRegionAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchRegionAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchRegionAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchRegionAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateRegionAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateRegionAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateRegionAutoscalerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an autoscaler in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateRegionAutoscalerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionAutoscalersClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionAutoscalersClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegionAutoscalersBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_Update, serviceImpl.Update).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegionAutoscalersBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteRegionAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRegionAutoscalerRequest, global::Google.Cloud.Compute.V1.Autoscaler>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertRegionAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRegionAutoscalersRequest, global::Google.Cloud.Compute.V1.RegionAutoscalerList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchRegionAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdateRegionAutoscalerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Update));
    }

  }
  /// <summary>
  /// The RegionBackendServices API.
  /// </summary>
  public static partial class RegionBackendServices
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.RegionBackendServices";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteRegionBackendServiceRequest> __Marshaller_google_cloud_compute_v1_DeleteRegionBackendServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteRegionBackendServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRegionBackendServiceRequest> __Marshaller_google_cloud_compute_v1_GetRegionBackendServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRegionBackendServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.BackendService> __Marshaller_google_cloud_compute_v1_BackendService = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.BackendService.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetHealthRegionBackendServiceRequest> __Marshaller_google_cloud_compute_v1_GetHealthRegionBackendServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetHealthRegionBackendServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.BackendServiceGroupHealth> __Marshaller_google_cloud_compute_v1_BackendServiceGroupHealth = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.BackendServiceGroupHealth.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertRegionBackendServiceRequest> __Marshaller_google_cloud_compute_v1_InsertRegionBackendServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertRegionBackendServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRegionBackendServicesRequest> __Marshaller_google_cloud_compute_v1_ListRegionBackendServicesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRegionBackendServicesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.BackendServiceList> __Marshaller_google_cloud_compute_v1_BackendServiceList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.BackendServiceList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchRegionBackendServiceRequest> __Marshaller_google_cloud_compute_v1_PatchRegionBackendServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchRegionBackendServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdateRegionBackendServiceRequest> __Marshaller_google_cloud_compute_v1_UpdateRegionBackendServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdateRegionBackendServiceRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteRegionBackendServiceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRegionBackendServiceRequest, global::Google.Cloud.Compute.V1.BackendService> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRegionBackendServiceRequest, global::Google.Cloud.Compute.V1.BackendService>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRegionBackendServiceRequest,
        __Marshaller_google_cloud_compute_v1_BackendService);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetHealthRegionBackendServiceRequest, global::Google.Cloud.Compute.V1.BackendServiceGroupHealth> __Method_GetHealth = new grpc::Method<global::Google.Cloud.Compute.V1.GetHealthRegionBackendServiceRequest, global::Google.Cloud.Compute.V1.BackendServiceGroupHealth>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHealth",
        __Marshaller_google_cloud_compute_v1_GetHealthRegionBackendServiceRequest,
        __Marshaller_google_cloud_compute_v1_BackendServiceGroupHealth);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertRegionBackendServiceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRegionBackendServicesRequest, global::Google.Cloud.Compute.V1.BackendServiceList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRegionBackendServicesRequest, global::Google.Cloud.Compute.V1.BackendServiceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRegionBackendServicesRequest,
        __Marshaller_google_cloud_compute_v1_BackendServiceList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchRegionBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchRegionBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchRegionBackendServiceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdateRegionBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Update = new grpc::Method<global::Google.Cloud.Compute.V1.UpdateRegionBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_google_cloud_compute_v1_UpdateRegionBackendServiceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[35]; }
    }

    /// <summary>Base class for server-side implementations of RegionBackendServices</summary>
    [grpc::BindServiceMethod(typeof(RegionBackendServices), "BindService")]
    public abstract partial class RegionBackendServicesBase
    {
      /// <summary>
      /// Deletes the specified regional BackendService resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteRegionBackendServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified regional BackendService resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.BackendService> Get(global::Google.Cloud.Compute.V1.GetRegionBackendServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the most recent health check results for this regional BackendService.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.BackendServiceGroupHealth> GetHealth(global::Google.Cloud.Compute.V1.GetHealthRegionBackendServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a regional BackendService resource in the specified project using the data included in the request. For more information, see  Backend services overview.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertRegionBackendServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of regional BackendService resources available to the specified project in the given region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.BackendServiceList> List(global::Google.Cloud.Compute.V1.ListRegionBackendServicesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified regional BackendService resource with the data included in the request. For more information, see  Understanding backend services This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchRegionBackendServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified regional BackendService resource with the data included in the request. For more information, see  Backend services overview.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Update(global::Google.Cloud.Compute.V1.UpdateRegionBackendServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegionBackendServices</summary>
    public partial class RegionBackendServicesClient : grpc::ClientBase<RegionBackendServicesClient>
    {
      /// <summary>Creates a new client for RegionBackendServices</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionBackendServicesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegionBackendServices that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionBackendServicesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionBackendServicesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionBackendServicesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified regional BackendService resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified regional BackendService resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified regional BackendService resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified regional BackendService resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified regional BackendService resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.BackendService Get(global::Google.Cloud.Compute.V1.GetRegionBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified regional BackendService resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.BackendService Get(global::Google.Cloud.Compute.V1.GetRegionBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified regional BackendService resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.BackendService> GetAsync(global::Google.Cloud.Compute.V1.GetRegionBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified regional BackendService resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.BackendService> GetAsync(global::Google.Cloud.Compute.V1.GetRegionBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Gets the most recent health check results for this regional BackendService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.BackendServiceGroupHealth GetHealth(global::Google.Cloud.Compute.V1.GetHealthRegionBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHealth(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the most recent health check results for this regional BackendService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.BackendServiceGroupHealth GetHealth(global::Google.Cloud.Compute.V1.GetHealthRegionBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHealth, null, options, request);
      }
      /// <summary>
      /// Gets the most recent health check results for this regional BackendService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.BackendServiceGroupHealth> GetHealthAsync(global::Google.Cloud.Compute.V1.GetHealthRegionBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHealthAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the most recent health check results for this regional BackendService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.BackendServiceGroupHealth> GetHealthAsync(global::Google.Cloud.Compute.V1.GetHealthRegionBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHealth, null, options, request);
      }
      /// <summary>
      /// Creates a regional BackendService resource in the specified project using the data included in the request. For more information, see  Backend services overview.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a regional BackendService resource in the specified project using the data included in the request. For more information, see  Backend services overview.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a regional BackendService resource in the specified project using the data included in the request. For more information, see  Backend services overview.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a regional BackendService resource in the specified project using the data included in the request. For more information, see  Backend services overview.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of regional BackendService resources available to the specified project in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.BackendServiceList List(global::Google.Cloud.Compute.V1.ListRegionBackendServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of regional BackendService resources available to the specified project in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.BackendServiceList List(global::Google.Cloud.Compute.V1.ListRegionBackendServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of regional BackendService resources available to the specified project in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.BackendServiceList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionBackendServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of regional BackendService resources available to the specified project in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.BackendServiceList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionBackendServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Updates the specified regional BackendService resource with the data included in the request. For more information, see  Understanding backend services This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchRegionBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified regional BackendService resource with the data included in the request. For more information, see  Understanding backend services This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchRegionBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates the specified regional BackendService resource with the data included in the request. For more information, see  Understanding backend services This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchRegionBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified regional BackendService resource with the data included in the request. For more information, see  Understanding backend services This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchRegionBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates the specified regional BackendService resource with the data included in the request. For more information, see  Backend services overview.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateRegionBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified regional BackendService resource with the data included in the request. For more information, see  Backend services overview.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateRegionBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Updates the specified regional BackendService resource with the data included in the request. For more information, see  Backend services overview.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateRegionBackendServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified regional BackendService resource with the data included in the request. For more information, see  Backend services overview.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateRegionBackendServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionBackendServicesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionBackendServicesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegionBackendServicesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetHealth, serviceImpl.GetHealth)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_Update, serviceImpl.Update).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegionBackendServicesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteRegionBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRegionBackendServiceRequest, global::Google.Cloud.Compute.V1.BackendService>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetHealth, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetHealthRegionBackendServiceRequest, global::Google.Cloud.Compute.V1.BackendServiceGroupHealth>(serviceImpl.GetHealth));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertRegionBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRegionBackendServicesRequest, global::Google.Cloud.Compute.V1.BackendServiceList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchRegionBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdateRegionBackendServiceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Update));
    }

  }
  /// <summary>
  /// The RegionCommitments API.
  /// </summary>
  public static partial class RegionCommitments
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.RegionCommitments";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListRegionCommitmentsRequest> __Marshaller_google_cloud_compute_v1_AggregatedListRegionCommitmentsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListRegionCommitmentsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.CommitmentAggregatedList> __Marshaller_google_cloud_compute_v1_CommitmentAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.CommitmentAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRegionCommitmentRequest> __Marshaller_google_cloud_compute_v1_GetRegionCommitmentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRegionCommitmentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Commitment> __Marshaller_google_cloud_compute_v1_Commitment = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Commitment.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertRegionCommitmentRequest> __Marshaller_google_cloud_compute_v1_InsertRegionCommitmentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertRegionCommitmentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRegionCommitmentsRequest> __Marshaller_google_cloud_compute_v1_ListRegionCommitmentsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRegionCommitmentsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.CommitmentList> __Marshaller_google_cloud_compute_v1_CommitmentList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.CommitmentList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListRegionCommitmentsRequest, global::Google.Cloud.Compute.V1.CommitmentAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListRegionCommitmentsRequest, global::Google.Cloud.Compute.V1.CommitmentAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListRegionCommitmentsRequest,
        __Marshaller_google_cloud_compute_v1_CommitmentAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRegionCommitmentRequest, global::Google.Cloud.Compute.V1.Commitment> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRegionCommitmentRequest, global::Google.Cloud.Compute.V1.Commitment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRegionCommitmentRequest,
        __Marshaller_google_cloud_compute_v1_Commitment);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionCommitmentRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionCommitmentRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertRegionCommitmentRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRegionCommitmentsRequest, global::Google.Cloud.Compute.V1.CommitmentList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRegionCommitmentsRequest, global::Google.Cloud.Compute.V1.CommitmentList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRegionCommitmentsRequest,
        __Marshaller_google_cloud_compute_v1_CommitmentList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[36]; }
    }

    /// <summary>Base class for server-side implementations of RegionCommitments</summary>
    [grpc::BindServiceMethod(typeof(RegionCommitments), "BindService")]
    public abstract partial class RegionCommitmentsBase
    {
      /// <summary>
      /// Retrieves an aggregated list of commitments.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.CommitmentAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListRegionCommitmentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified commitment resource. Gets a list of available commitments by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Commitment> Get(global::Google.Cloud.Compute.V1.GetRegionCommitmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a commitment in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertRegionCommitmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of commitments contained within the specified region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.CommitmentList> List(global::Google.Cloud.Compute.V1.ListRegionCommitmentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegionCommitments</summary>
    public partial class RegionCommitmentsClient : grpc::ClientBase<RegionCommitmentsClient>
    {
      /// <summary>Creates a new client for RegionCommitments</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionCommitmentsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegionCommitments that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionCommitmentsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionCommitmentsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionCommitmentsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of commitments.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.CommitmentAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListRegionCommitmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of commitments.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.CommitmentAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListRegionCommitmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of commitments.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.CommitmentAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListRegionCommitmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of commitments.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.CommitmentAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListRegionCommitmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Returns the specified commitment resource. Gets a list of available commitments by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Commitment Get(global::Google.Cloud.Compute.V1.GetRegionCommitmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified commitment resource. Gets a list of available commitments by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Commitment Get(global::Google.Cloud.Compute.V1.GetRegionCommitmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified commitment resource. Gets a list of available commitments by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Commitment> GetAsync(global::Google.Cloud.Compute.V1.GetRegionCommitmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified commitment resource. Gets a list of available commitments by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Commitment> GetAsync(global::Google.Cloud.Compute.V1.GetRegionCommitmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a commitment in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionCommitmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a commitment in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionCommitmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a commitment in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionCommitmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a commitment in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionCommitmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of commitments contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.CommitmentList List(global::Google.Cloud.Compute.V1.ListRegionCommitmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of commitments contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.CommitmentList List(global::Google.Cloud.Compute.V1.ListRegionCommitmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of commitments contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.CommitmentList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionCommitmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of commitments contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.CommitmentList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionCommitmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionCommitmentsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionCommitmentsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegionCommitmentsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegionCommitmentsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListRegionCommitmentsRequest, global::Google.Cloud.Compute.V1.CommitmentAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRegionCommitmentRequest, global::Google.Cloud.Compute.V1.Commitment>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertRegionCommitmentRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRegionCommitmentsRequest, global::Google.Cloud.Compute.V1.CommitmentList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The RegionDiskTypes API.
  /// </summary>
  public static partial class RegionDiskTypes
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.RegionDiskTypes";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRegionDiskTypeRequest> __Marshaller_google_cloud_compute_v1_GetRegionDiskTypeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRegionDiskTypeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DiskType> __Marshaller_google_cloud_compute_v1_DiskType = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DiskType.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRegionDiskTypesRequest> __Marshaller_google_cloud_compute_v1_ListRegionDiskTypesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRegionDiskTypesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RegionDiskTypeList> __Marshaller_google_cloud_compute_v1_RegionDiskTypeList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RegionDiskTypeList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRegionDiskTypeRequest, global::Google.Cloud.Compute.V1.DiskType> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRegionDiskTypeRequest, global::Google.Cloud.Compute.V1.DiskType>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRegionDiskTypeRequest,
        __Marshaller_google_cloud_compute_v1_DiskType);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRegionDiskTypesRequest, global::Google.Cloud.Compute.V1.RegionDiskTypeList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRegionDiskTypesRequest, global::Google.Cloud.Compute.V1.RegionDiskTypeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRegionDiskTypesRequest,
        __Marshaller_google_cloud_compute_v1_RegionDiskTypeList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[37]; }
    }

    /// <summary>Base class for server-side implementations of RegionDiskTypes</summary>
    [grpc::BindServiceMethod(typeof(RegionDiskTypes), "BindService")]
    public abstract partial class RegionDiskTypesBase
    {
      /// <summary>
      /// Returns the specified regional disk type. Gets a list of available disk types by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.DiskType> Get(global::Google.Cloud.Compute.V1.GetRegionDiskTypeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of regional disk types available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.RegionDiskTypeList> List(global::Google.Cloud.Compute.V1.ListRegionDiskTypesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegionDiskTypes</summary>
    public partial class RegionDiskTypesClient : grpc::ClientBase<RegionDiskTypesClient>
    {
      /// <summary>Creates a new client for RegionDiskTypes</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionDiskTypesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegionDiskTypes that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionDiskTypesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionDiskTypesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionDiskTypesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns the specified regional disk type. Gets a list of available disk types by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DiskType Get(global::Google.Cloud.Compute.V1.GetRegionDiskTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified regional disk type. Gets a list of available disk types by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DiskType Get(global::Google.Cloud.Compute.V1.GetRegionDiskTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified regional disk type. Gets a list of available disk types by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DiskType> GetAsync(global::Google.Cloud.Compute.V1.GetRegionDiskTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified regional disk type. Gets a list of available disk types by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DiskType> GetAsync(global::Google.Cloud.Compute.V1.GetRegionDiskTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of regional disk types available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RegionDiskTypeList List(global::Google.Cloud.Compute.V1.ListRegionDiskTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of regional disk types available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RegionDiskTypeList List(global::Google.Cloud.Compute.V1.ListRegionDiskTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of regional disk types available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RegionDiskTypeList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionDiskTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of regional disk types available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RegionDiskTypeList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionDiskTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionDiskTypesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionDiskTypesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegionDiskTypesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegionDiskTypesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRegionDiskTypeRequest, global::Google.Cloud.Compute.V1.DiskType>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRegionDiskTypesRequest, global::Google.Cloud.Compute.V1.RegionDiskTypeList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The RegionDisks API.
  /// </summary>
  public static partial class RegionDisks
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.RegionDisks";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AddResourcePoliciesRegionDiskRequest> __Marshaller_google_cloud_compute_v1_AddResourcePoliciesRegionDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AddResourcePoliciesRegionDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.CreateSnapshotRegionDiskRequest> __Marshaller_google_cloud_compute_v1_CreateSnapshotRegionDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.CreateSnapshotRegionDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteRegionDiskRequest> __Marshaller_google_cloud_compute_v1_DeleteRegionDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteRegionDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRegionDiskRequest> __Marshaller_google_cloud_compute_v1_GetRegionDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRegionDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Disk> __Marshaller_google_cloud_compute_v1_Disk = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Disk.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetIamPolicyRegionDiskRequest> __Marshaller_google_cloud_compute_v1_GetIamPolicyRegionDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetIamPolicyRegionDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Policy> __Marshaller_google_cloud_compute_v1_Policy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Policy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertRegionDiskRequest> __Marshaller_google_cloud_compute_v1_InsertRegionDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertRegionDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRegionDisksRequest> __Marshaller_google_cloud_compute_v1_ListRegionDisksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRegionDisksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DiskList> __Marshaller_google_cloud_compute_v1_DiskList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DiskList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RemoveResourcePoliciesRegionDiskRequest> __Marshaller_google_cloud_compute_v1_RemoveResourcePoliciesRegionDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RemoveResourcePoliciesRegionDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ResizeRegionDiskRequest> __Marshaller_google_cloud_compute_v1_ResizeRegionDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ResizeRegionDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetIamPolicyRegionDiskRequest> __Marshaller_google_cloud_compute_v1_SetIamPolicyRegionDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetIamPolicyRegionDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetLabelsRegionDiskRequest> __Marshaller_google_cloud_compute_v1_SetLabelsRegionDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetLabelsRegionDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestIamPermissionsRegionDiskRequest> __Marshaller_google_cloud_compute_v1_TestIamPermissionsRegionDiskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestIamPermissionsRegionDiskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Marshaller_google_cloud_compute_v1_TestPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestPermissionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AddResourcePoliciesRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation> __Method_AddResourcePolicies = new grpc::Method<global::Google.Cloud.Compute.V1.AddResourcePoliciesRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddResourcePolicies",
        __Marshaller_google_cloud_compute_v1_AddResourcePoliciesRegionDiskRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.CreateSnapshotRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation> __Method_CreateSnapshot = new grpc::Method<global::Google.Cloud.Compute.V1.CreateSnapshotRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSnapshot",
        __Marshaller_google_cloud_compute_v1_CreateSnapshotRegionDiskRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteRegionDiskRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRegionDiskRequest, global::Google.Cloud.Compute.V1.Disk> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRegionDiskRequest, global::Google.Cloud.Compute.V1.Disk>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRegionDiskRequest,
        __Marshaller_google_cloud_compute_v1_Disk);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyRegionDiskRequest, global::Google.Cloud.Compute.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyRegionDiskRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_cloud_compute_v1_GetIamPolicyRegionDiskRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertRegionDiskRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRegionDisksRequest, global::Google.Cloud.Compute.V1.DiskList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRegionDisksRequest, global::Google.Cloud.Compute.V1.DiskList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRegionDisksRequest,
        __Marshaller_google_cloud_compute_v1_DiskList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.RemoveResourcePoliciesRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation> __Method_RemoveResourcePolicies = new grpc::Method<global::Google.Cloud.Compute.V1.RemoveResourcePoliciesRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveResourcePolicies",
        __Marshaller_google_cloud_compute_v1_RemoveResourcePoliciesRegionDiskRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ResizeRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Resize = new grpc::Method<global::Google.Cloud.Compute.V1.ResizeRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Resize",
        __Marshaller_google_cloud_compute_v1_ResizeRegionDiskRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyRegionDiskRequest, global::Google.Cloud.Compute.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyRegionDiskRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_cloud_compute_v1_SetIamPolicyRegionDiskRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetLabelsRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetLabels = new grpc::Method<global::Google.Cloud.Compute.V1.SetLabelsRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetLabels",
        __Marshaller_google_cloud_compute_v1_SetLabelsRegionDiskRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsRegionDiskRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsRegionDiskRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_cloud_compute_v1_TestIamPermissionsRegionDiskRequest,
        __Marshaller_google_cloud_compute_v1_TestPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[38]; }
    }

    /// <summary>Base class for server-side implementations of RegionDisks</summary>
    [grpc::BindServiceMethod(typeof(RegionDisks), "BindService")]
    public abstract partial class RegionDisksBase
    {
      /// <summary>
      /// Adds existing resource policies to a regional disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> AddResourcePolicies(global::Google.Cloud.Compute.V1.AddResourcePoliciesRegionDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a snapshot of this regional disk.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> CreateSnapshot(global::Google.Cloud.Compute.V1.CreateSnapshotRegionDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified regional persistent disk. Deleting a regional disk removes all the replicas of its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteRegionDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a specified regional persistent disk.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Disk> Get(global::Google.Cloud.Compute.V1.GetRegionDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyRegionDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a persistent regional disk in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertRegionDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of persistent disks contained within the specified region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.DiskList> List(global::Google.Cloud.Compute.V1.ListRegionDisksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes resource policies from a regional disk.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> RemoveResourcePolicies(global::Google.Cloud.Compute.V1.RemoveResourcePoliciesRegionDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Resizes the specified regional persistent disk.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Resize(global::Google.Cloud.Compute.V1.ResizeRegionDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyRegionDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the labels on the target regional disk.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetLabels(global::Google.Cloud.Compute.V1.SetLabelsRegionDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsRegionDiskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegionDisks</summary>
    public partial class RegionDisksClient : grpc::ClientBase<RegionDisksClient>
    {
      /// <summary>Creates a new client for RegionDisks</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionDisksClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegionDisks that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionDisksClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionDisksClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionDisksClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Adds existing resource policies to a regional disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddResourcePolicies(global::Google.Cloud.Compute.V1.AddResourcePoliciesRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddResourcePolicies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds existing resource policies to a regional disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddResourcePolicies(global::Google.Cloud.Compute.V1.AddResourcePoliciesRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddResourcePolicies, null, options, request);
      }
      /// <summary>
      /// Adds existing resource policies to a regional disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddResourcePoliciesAsync(global::Google.Cloud.Compute.V1.AddResourcePoliciesRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddResourcePoliciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds existing resource policies to a regional disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddResourcePoliciesAsync(global::Google.Cloud.Compute.V1.AddResourcePoliciesRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddResourcePolicies, null, options, request);
      }
      /// <summary>
      /// Creates a snapshot of this regional disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation CreateSnapshot(global::Google.Cloud.Compute.V1.CreateSnapshotRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a snapshot of this regional disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation CreateSnapshot(global::Google.Cloud.Compute.V1.CreateSnapshotRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSnapshot, null, options, request);
      }
      /// <summary>
      /// Creates a snapshot of this regional disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> CreateSnapshotAsync(global::Google.Cloud.Compute.V1.CreateSnapshotRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a snapshot of this regional disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> CreateSnapshotAsync(global::Google.Cloud.Compute.V1.CreateSnapshotRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSnapshot, null, options, request);
      }
      /// <summary>
      /// Deletes the specified regional persistent disk. Deleting a regional disk removes all the replicas of its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified regional persistent disk. Deleting a regional disk removes all the replicas of its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified regional persistent disk. Deleting a regional disk removes all the replicas of its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified regional persistent disk. Deleting a regional disk removes all the replicas of its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns a specified regional persistent disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Disk Get(global::Google.Cloud.Compute.V1.GetRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a specified regional persistent disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Disk Get(global::Google.Cloud.Compute.V1.GetRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns a specified regional persistent disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Disk> GetAsync(global::Google.Cloud.Compute.V1.GetRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a specified regional persistent disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Disk> GetAsync(global::Google.Cloud.Compute.V1.GetRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Creates a persistent regional disk in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a persistent regional disk in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a persistent regional disk in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a persistent regional disk in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of persistent disks contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DiskList List(global::Google.Cloud.Compute.V1.ListRegionDisksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of persistent disks contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DiskList List(global::Google.Cloud.Compute.V1.ListRegionDisksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of persistent disks contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DiskList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionDisksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of persistent disks contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DiskList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionDisksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Removes resource policies from a regional disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RemoveResourcePolicies(global::Google.Cloud.Compute.V1.RemoveResourcePoliciesRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveResourcePolicies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes resource policies from a regional disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RemoveResourcePolicies(global::Google.Cloud.Compute.V1.RemoveResourcePoliciesRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveResourcePolicies, null, options, request);
      }
      /// <summary>
      /// Removes resource policies from a regional disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RemoveResourcePoliciesAsync(global::Google.Cloud.Compute.V1.RemoveResourcePoliciesRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveResourcePoliciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes resource policies from a regional disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RemoveResourcePoliciesAsync(global::Google.Cloud.Compute.V1.RemoveResourcePoliciesRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveResourcePolicies, null, options, request);
      }
      /// <summary>
      /// Resizes the specified regional persistent disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Resize(global::Google.Cloud.Compute.V1.ResizeRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Resize(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resizes the specified regional persistent disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Resize(global::Google.Cloud.Compute.V1.ResizeRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Resize, null, options, request);
      }
      /// <summary>
      /// Resizes the specified regional persistent disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> ResizeAsync(global::Google.Cloud.Compute.V1.ResizeRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResizeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resizes the specified regional persistent disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> ResizeAsync(global::Google.Cloud.Compute.V1.ResizeRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Resize, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the labels on the target regional disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetLabels(global::Google.Cloud.Compute.V1.SetLabelsRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLabels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the labels on the target regional disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetLabels(global::Google.Cloud.Compute.V1.SetLabelsRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetLabels, null, options, request);
      }
      /// <summary>
      /// Sets the labels on the target regional disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetLabelsAsync(global::Google.Cloud.Compute.V1.SetLabelsRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLabelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the labels on the target regional disk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetLabelsAsync(global::Google.Cloud.Compute.V1.SetLabelsRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetLabels, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsRegionDiskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsRegionDiskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionDisksClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionDisksClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegionDisksBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddResourcePolicies, serviceImpl.AddResourcePolicies)
          .AddMethod(__Method_CreateSnapshot, serviceImpl.CreateSnapshot)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_RemoveResourcePolicies, serviceImpl.RemoveResourcePolicies)
          .AddMethod(__Method_Resize, serviceImpl.Resize)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_SetLabels, serviceImpl.SetLabels)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegionDisksBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddResourcePolicies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AddResourcePoliciesRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.AddResourcePolicies));
      serviceBinder.AddMethod(__Method_CreateSnapshot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.CreateSnapshotRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.CreateSnapshot));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRegionDiskRequest, global::Google.Cloud.Compute.V1.Disk>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetIamPolicyRegionDiskRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRegionDisksRequest, global::Google.Cloud.Compute.V1.DiskList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_RemoveResourcePolicies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.RemoveResourcePoliciesRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.RemoveResourcePolicies));
      serviceBinder.AddMethod(__Method_Resize, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ResizeRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Resize));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetIamPolicyRegionDiskRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_SetLabels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetLabelsRegionDiskRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetLabels));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.TestIamPermissionsRegionDiskRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
  /// <summary>
  /// The RegionHealthCheckServices API.
  /// </summary>
  public static partial class RegionHealthCheckServices
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.RegionHealthCheckServices";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckServiceRequest> __Marshaller_google_cloud_compute_v1_DeleteRegionHealthCheckServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRegionHealthCheckServiceRequest> __Marshaller_google_cloud_compute_v1_GetRegionHealthCheckServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRegionHealthCheckServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.HealthCheckService> __Marshaller_google_cloud_compute_v1_HealthCheckService = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.HealthCheckService.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertRegionHealthCheckServiceRequest> __Marshaller_google_cloud_compute_v1_InsertRegionHealthCheckServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertRegionHealthCheckServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRegionHealthCheckServicesRequest> __Marshaller_google_cloud_compute_v1_ListRegionHealthCheckServicesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRegionHealthCheckServicesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.HealthCheckServicesList> __Marshaller_google_cloud_compute_v1_HealthCheckServicesList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.HealthCheckServicesList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchRegionHealthCheckServiceRequest> __Marshaller_google_cloud_compute_v1_PatchRegionHealthCheckServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchRegionHealthCheckServiceRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckServiceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckServiceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteRegionHealthCheckServiceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRegionHealthCheckServiceRequest, global::Google.Cloud.Compute.V1.HealthCheckService> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRegionHealthCheckServiceRequest, global::Google.Cloud.Compute.V1.HealthCheckService>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRegionHealthCheckServiceRequest,
        __Marshaller_google_cloud_compute_v1_HealthCheckService);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionHealthCheckServiceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionHealthCheckServiceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertRegionHealthCheckServiceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRegionHealthCheckServicesRequest, global::Google.Cloud.Compute.V1.HealthCheckServicesList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRegionHealthCheckServicesRequest, global::Google.Cloud.Compute.V1.HealthCheckServicesList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRegionHealthCheckServicesRequest,
        __Marshaller_google_cloud_compute_v1_HealthCheckServicesList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchRegionHealthCheckServiceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchRegionHealthCheckServiceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchRegionHealthCheckServiceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[39]; }
    }

    /// <summary>Base class for server-side implementations of RegionHealthCheckServices</summary>
    [grpc::BindServiceMethod(typeof(RegionHealthCheckServices), "BindService")]
    public abstract partial class RegionHealthCheckServicesBase
    {
      /// <summary>
      /// Deletes the specified regional HealthCheckService.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified regional HealthCheckService resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.HealthCheckService> Get(global::Google.Cloud.Compute.V1.GetRegionHealthCheckServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a regional HealthCheckService resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertRegionHealthCheckServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all the HealthCheckService resources that have been configured for the specified project in the given region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.HealthCheckServicesList> List(global::Google.Cloud.Compute.V1.ListRegionHealthCheckServicesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified regional HealthCheckService resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchRegionHealthCheckServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegionHealthCheckServices</summary>
    public partial class RegionHealthCheckServicesClient : grpc::ClientBase<RegionHealthCheckServicesClient>
    {
      /// <summary>Creates a new client for RegionHealthCheckServices</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionHealthCheckServicesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegionHealthCheckServices that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionHealthCheckServicesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionHealthCheckServicesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionHealthCheckServicesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified regional HealthCheckService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified regional HealthCheckService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified regional HealthCheckService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified regional HealthCheckService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified regional HealthCheckService resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.HealthCheckService Get(global::Google.Cloud.Compute.V1.GetRegionHealthCheckServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified regional HealthCheckService resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.HealthCheckService Get(global::Google.Cloud.Compute.V1.GetRegionHealthCheckServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified regional HealthCheckService resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.HealthCheckService> GetAsync(global::Google.Cloud.Compute.V1.GetRegionHealthCheckServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified regional HealthCheckService resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.HealthCheckService> GetAsync(global::Google.Cloud.Compute.V1.GetRegionHealthCheckServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a regional HealthCheckService resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionHealthCheckServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a regional HealthCheckService resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionHealthCheckServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a regional HealthCheckService resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionHealthCheckServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a regional HealthCheckService resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionHealthCheckServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Lists all the HealthCheckService resources that have been configured for the specified project in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.HealthCheckServicesList List(global::Google.Cloud.Compute.V1.ListRegionHealthCheckServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the HealthCheckService resources that have been configured for the specified project in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.HealthCheckServicesList List(global::Google.Cloud.Compute.V1.ListRegionHealthCheckServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Lists all the HealthCheckService resources that have been configured for the specified project in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.HealthCheckServicesList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionHealthCheckServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the HealthCheckService resources that have been configured for the specified project in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.HealthCheckServicesList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionHealthCheckServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Updates the specified regional HealthCheckService resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchRegionHealthCheckServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified regional HealthCheckService resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchRegionHealthCheckServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates the specified regional HealthCheckService resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchRegionHealthCheckServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified regional HealthCheckService resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchRegionHealthCheckServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionHealthCheckServicesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionHealthCheckServicesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegionHealthCheckServicesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegionHealthCheckServicesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckServiceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRegionHealthCheckServiceRequest, global::Google.Cloud.Compute.V1.HealthCheckService>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertRegionHealthCheckServiceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRegionHealthCheckServicesRequest, global::Google.Cloud.Compute.V1.HealthCheckServicesList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchRegionHealthCheckServiceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
    }

  }
  /// <summary>
  /// The RegionHealthChecks API.
  /// </summary>
  public static partial class RegionHealthChecks
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.RegionHealthChecks";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckRequest> __Marshaller_google_cloud_compute_v1_DeleteRegionHealthCheckRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRegionHealthCheckRequest> __Marshaller_google_cloud_compute_v1_GetRegionHealthCheckRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRegionHealthCheckRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.HealthCheck> __Marshaller_google_cloud_compute_v1_HealthCheck = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.HealthCheck.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertRegionHealthCheckRequest> __Marshaller_google_cloud_compute_v1_InsertRegionHealthCheckRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertRegionHealthCheckRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRegionHealthChecksRequest> __Marshaller_google_cloud_compute_v1_ListRegionHealthChecksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRegionHealthChecksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.HealthCheckList> __Marshaller_google_cloud_compute_v1_HealthCheckList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.HealthCheckList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchRegionHealthCheckRequest> __Marshaller_google_cloud_compute_v1_PatchRegionHealthCheckRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchRegionHealthCheckRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdateRegionHealthCheckRequest> __Marshaller_google_cloud_compute_v1_UpdateRegionHealthCheckRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdateRegionHealthCheckRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteRegionHealthCheckRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRegionHealthCheckRequest, global::Google.Cloud.Compute.V1.HealthCheck> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRegionHealthCheckRequest, global::Google.Cloud.Compute.V1.HealthCheck>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRegionHealthCheckRequest,
        __Marshaller_google_cloud_compute_v1_HealthCheck);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertRegionHealthCheckRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRegionHealthChecksRequest, global::Google.Cloud.Compute.V1.HealthCheckList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRegionHealthChecksRequest, global::Google.Cloud.Compute.V1.HealthCheckList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRegionHealthChecksRequest,
        __Marshaller_google_cloud_compute_v1_HealthCheckList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchRegionHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchRegionHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchRegionHealthCheckRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdateRegionHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Update = new grpc::Method<global::Google.Cloud.Compute.V1.UpdateRegionHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_google_cloud_compute_v1_UpdateRegionHealthCheckRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[40]; }
    }

    /// <summary>Base class for server-side implementations of RegionHealthChecks</summary>
    [grpc::BindServiceMethod(typeof(RegionHealthChecks), "BindService")]
    public abstract partial class RegionHealthChecksBase
    {
      /// <summary>
      /// Deletes the specified HealthCheck resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.HealthCheck> Get(global::Google.Cloud.Compute.V1.GetRegionHealthCheckRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertRegionHealthCheckRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of HealthCheck resources available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.HealthCheckList> List(global::Google.Cloud.Compute.V1.ListRegionHealthChecksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchRegionHealthCheckRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Update(global::Google.Cloud.Compute.V1.UpdateRegionHealthCheckRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegionHealthChecks</summary>
    public partial class RegionHealthChecksClient : grpc::ClientBase<RegionHealthChecksClient>
    {
      /// <summary>Creates a new client for RegionHealthChecks</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionHealthChecksClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegionHealthChecks that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionHealthChecksClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionHealthChecksClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionHealthChecksClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified HealthCheck resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified HealthCheck resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified HealthCheck resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified HealthCheck resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.HealthCheck Get(global::Google.Cloud.Compute.V1.GetRegionHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.HealthCheck Get(global::Google.Cloud.Compute.V1.GetRegionHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.HealthCheck> GetAsync(global::Google.Cloud.Compute.V1.GetRegionHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.HealthCheck> GetAsync(global::Google.Cloud.Compute.V1.GetRegionHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of HealthCheck resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.HealthCheckList List(global::Google.Cloud.Compute.V1.ListRegionHealthChecksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of HealthCheck resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.HealthCheckList List(global::Google.Cloud.Compute.V1.ListRegionHealthChecksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of HealthCheck resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.HealthCheckList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionHealthChecksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of HealthCheck resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.HealthCheckList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionHealthChecksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchRegionHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchRegionHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchRegionHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchRegionHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateRegionHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateRegionHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateRegionHealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a HealthCheck resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateRegionHealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionHealthChecksClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionHealthChecksClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegionHealthChecksBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_Update, serviceImpl.Update).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegionHealthChecksBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteRegionHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRegionHealthCheckRequest, global::Google.Cloud.Compute.V1.HealthCheck>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertRegionHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRegionHealthChecksRequest, global::Google.Cloud.Compute.V1.HealthCheckList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchRegionHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdateRegionHealthCheckRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Update));
    }

  }
  /// <summary>
  /// The RegionInstanceGroupManagers API.
  /// </summary>
  public static partial class RegionInstanceGroupManagers
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.RegionInstanceGroupManagers";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AbandonInstancesRegionInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_AbandonInstancesRegionInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AbandonInstancesRegionInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.CreateInstancesRegionInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_CreateInstancesRegionInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.CreateInstancesRegionInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteRegionInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_DeleteRegionInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteRegionInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteInstancesRegionInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_DeleteInstancesRegionInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteInstancesRegionInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsRegionInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_DeletePerInstanceConfigsRegionInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsRegionInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRegionInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_GetRegionInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRegionInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InstanceGroupManager> __Marshaller_google_cloud_compute_v1_InstanceGroupManager = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InstanceGroupManager.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertRegionInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_InsertRegionInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertRegionInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRegionInstanceGroupManagersRequest> __Marshaller_google_cloud_compute_v1_ListRegionInstanceGroupManagersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRegionInstanceGroupManagersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RegionInstanceGroupManagerList> __Marshaller_google_cloud_compute_v1_RegionInstanceGroupManagerList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RegionInstanceGroupManagerList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListErrorsRegionInstanceGroupManagersRequest> __Marshaller_google_cloud_compute_v1_ListErrorsRegionInstanceGroupManagersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListErrorsRegionInstanceGroupManagersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListErrorsResponse> __Marshaller_google_cloud_compute_v1_RegionInstanceGroupManagersListErrorsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListErrorsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListManagedInstancesRegionInstanceGroupManagersRequest> __Marshaller_google_cloud_compute_v1_ListManagedInstancesRegionInstanceGroupManagersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListManagedInstancesRegionInstanceGroupManagersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstancesResponse> __Marshaller_google_cloud_compute_v1_RegionInstanceGroupManagersListInstancesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstancesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListPerInstanceConfigsRegionInstanceGroupManagersRequest> __Marshaller_google_cloud_compute_v1_ListPerInstanceConfigsRegionInstanceGroupManagersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListPerInstanceConfigsRegionInstanceGroupManagersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstanceConfigsResp> __Marshaller_google_cloud_compute_v1_RegionInstanceGroupManagersListInstanceConfigsResp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstanceConfigsResp.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchRegionInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_PatchRegionInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchRegionInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsRegionInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_PatchPerInstanceConfigsRegionInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsRegionInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RecreateInstancesRegionInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_RecreateInstancesRegionInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RecreateInstancesRegionInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ResizeRegionInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_ResizeRegionInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ResizeRegionInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetInstanceTemplateRegionInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_SetInstanceTemplateRegionInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetInstanceTemplateRegionInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetTargetPoolsRegionInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_SetTargetPoolsRegionInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetTargetPoolsRegionInstanceGroupManagerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsRegionInstanceGroupManagerRequest> __Marshaller_google_cloud_compute_v1_UpdatePerInstanceConfigsRegionInstanceGroupManagerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsRegionInstanceGroupManagerRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AbandonInstancesRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_AbandonInstances = new grpc::Method<global::Google.Cloud.Compute.V1.AbandonInstancesRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AbandonInstances",
        __Marshaller_google_cloud_compute_v1_AbandonInstancesRegionInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_ApplyUpdatesToInstances = new grpc::Method<global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ApplyUpdatesToInstances",
        __Marshaller_google_cloud_compute_v1_ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.CreateInstancesRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_CreateInstances = new grpc::Method<global::Google.Cloud.Compute.V1.CreateInstancesRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateInstances",
        __Marshaller_google_cloud_compute_v1_CreateInstancesRegionInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteRegionInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteInstancesRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_DeleteInstances = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteInstancesRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteInstances",
        __Marshaller_google_cloud_compute_v1_DeleteInstancesRegionInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_DeletePerInstanceConfigs = new grpc::Method<global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePerInstanceConfigs",
        __Marshaller_google_cloud_compute_v1_DeletePerInstanceConfigsRegionInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.InstanceGroupManager> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.InstanceGroupManager>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRegionInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_InstanceGroupManager);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertRegionInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRegionInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.RegionInstanceGroupManagerList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRegionInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.RegionInstanceGroupManagerList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRegionInstanceGroupManagersRequest,
        __Marshaller_google_cloud_compute_v1_RegionInstanceGroupManagerList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListErrorsRegionInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListErrorsResponse> __Method_ListErrors = new grpc::Method<global::Google.Cloud.Compute.V1.ListErrorsRegionInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListErrorsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListErrors",
        __Marshaller_google_cloud_compute_v1_ListErrorsRegionInstanceGroupManagersRequest,
        __Marshaller_google_cloud_compute_v1_RegionInstanceGroupManagersListErrorsResponse);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListManagedInstancesRegionInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstancesResponse> __Method_ListManagedInstances = new grpc::Method<global::Google.Cloud.Compute.V1.ListManagedInstancesRegionInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstancesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListManagedInstances",
        __Marshaller_google_cloud_compute_v1_ListManagedInstancesRegionInstanceGroupManagersRequest,
        __Marshaller_google_cloud_compute_v1_RegionInstanceGroupManagersListInstancesResponse);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListPerInstanceConfigsRegionInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstanceConfigsResp> __Method_ListPerInstanceConfigs = new grpc::Method<global::Google.Cloud.Compute.V1.ListPerInstanceConfigsRegionInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstanceConfigsResp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPerInstanceConfigs",
        __Marshaller_google_cloud_compute_v1_ListPerInstanceConfigsRegionInstanceGroupManagersRequest,
        __Marshaller_google_cloud_compute_v1_RegionInstanceGroupManagersListInstanceConfigsResp);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchRegionInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_PatchPerInstanceConfigs = new grpc::Method<global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchPerInstanceConfigs",
        __Marshaller_google_cloud_compute_v1_PatchPerInstanceConfigsRegionInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.RecreateInstancesRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_RecreateInstances = new grpc::Method<global::Google.Cloud.Compute.V1.RecreateInstancesRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RecreateInstances",
        __Marshaller_google_cloud_compute_v1_RecreateInstancesRegionInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ResizeRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Resize = new grpc::Method<global::Google.Cloud.Compute.V1.ResizeRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Resize",
        __Marshaller_google_cloud_compute_v1_ResizeRegionInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetInstanceTemplateRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetInstanceTemplate = new grpc::Method<global::Google.Cloud.Compute.V1.SetInstanceTemplateRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetInstanceTemplate",
        __Marshaller_google_cloud_compute_v1_SetInstanceTemplateRegionInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetTargetPoolsRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetTargetPools = new grpc::Method<global::Google.Cloud.Compute.V1.SetTargetPoolsRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTargetPools",
        __Marshaller_google_cloud_compute_v1_SetTargetPoolsRegionInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation> __Method_UpdatePerInstanceConfigs = new grpc::Method<global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePerInstanceConfigs",
        __Marshaller_google_cloud_compute_v1_UpdatePerInstanceConfigsRegionInstanceGroupManagerRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[41]; }
    }

    /// <summary>Base class for server-side implementations of RegionInstanceGroupManagers</summary>
    [grpc::BindServiceMethod(typeof(RegionInstanceGroupManagers), "BindService")]
    public abstract partial class RegionInstanceGroupManagersBase
    {
      /// <summary>
      /// Flags the specified instances to be immediately removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> AbandonInstances(global::Google.Cloud.Compute.V1.AbandonInstancesRegionInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Apply updates to selected instances the managed instance group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> ApplyUpdatesToInstances(global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates instances with per-instance configs in this regional managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> CreateInstances(global::Google.Cloud.Compute.V1.CreateInstancesRegionInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified managed instance group and all of the instances in that group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteRegionInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Flags the specified instances in the managed instance group to be immediately deleted. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. The deleteInstances operation is marked DONE if the deleteInstances request is successful. The underlying actions take additional time. You must separately verify the status of the deleting action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> DeleteInstances(global::Google.Cloud.Compute.V1.DeleteInstancesRegionInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes selected per-instance configs for the managed instance group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> DeletePerInstanceConfigs(global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsRegionInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns all of the details about the specified managed instance group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InstanceGroupManager> Get(global::Google.Cloud.Compute.V1.GetRegionInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method.
      ///
      /// A regional managed instance group can contain up to 2000 instances.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertRegionInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of managed instance groups that are contained within the specified region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.RegionInstanceGroupManagerList> List(global::Google.Cloud.Compute.V1.ListRegionInstanceGroupManagersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all errors thrown by actions on instances for a given regional managed instance group. The filter and orderBy query parameters are not supported.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListErrorsResponse> ListErrors(global::Google.Cloud.Compute.V1.ListErrorsRegionInstanceGroupManagersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the instances in the managed instance group and instances that are scheduled to be created. The list includes any current actions that the group has scheduled for its instances. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstancesResponse> ListManagedInstances(global::Google.Cloud.Compute.V1.ListManagedInstancesRegionInstanceGroupManagersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all of the per-instance configs defined for the managed instance group. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstanceConfigsResp> ListPerInstanceConfigs(global::Google.Cloud.Compute.V1.ListPerInstanceConfigsRegionInstanceGroupManagersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listmanagedinstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchRegionInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Inserts or patches per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> PatchPerInstanceConfigs(global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsRegionInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Flags the specified instances in the managed instance group to be immediately recreated. The instances are deleted and recreated using the current instance template for the managed instance group. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of the recreating action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> RecreateInstances(global::Google.Cloud.Compute.V1.RecreateInstancesRegionInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Changes the intended size of the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes one or more instances.
      ///
      /// The resize operation is marked DONE if the resize request is successful. The underlying actions take additional time. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Resize(global::Google.Cloud.Compute.V1.ResizeRegionInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the instance template to use when creating new instances or recreating instances in this group. Existing instances are not affected.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetInstanceTemplate(global::Google.Cloud.Compute.V1.SetInstanceTemplateRegionInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Modifies the target pools to which all new instances in this group are assigned. Existing instances in the group are not affected.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetTargetPools(global::Google.Cloud.Compute.V1.SetTargetPoolsRegionInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Inserts or updates per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> UpdatePerInstanceConfigs(global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsRegionInstanceGroupManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegionInstanceGroupManagers</summary>
    public partial class RegionInstanceGroupManagersClient : grpc::ClientBase<RegionInstanceGroupManagersClient>
    {
      /// <summary>Creates a new client for RegionInstanceGroupManagers</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionInstanceGroupManagersClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegionInstanceGroupManagers that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionInstanceGroupManagersClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionInstanceGroupManagersClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionInstanceGroupManagersClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Flags the specified instances to be immediately removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AbandonInstances(global::Google.Cloud.Compute.V1.AbandonInstancesRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AbandonInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Flags the specified instances to be immediately removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AbandonInstances(global::Google.Cloud.Compute.V1.AbandonInstancesRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AbandonInstances, null, options, request);
      }
      /// <summary>
      /// Flags the specified instances to be immediately removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AbandonInstancesAsync(global::Google.Cloud.Compute.V1.AbandonInstancesRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AbandonInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Flags the specified instances to be immediately removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AbandonInstancesAsync(global::Google.Cloud.Compute.V1.AbandonInstancesRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AbandonInstances, null, options, request);
      }
      /// <summary>
      /// Apply updates to selected instances the managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation ApplyUpdatesToInstances(global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ApplyUpdatesToInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Apply updates to selected instances the managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation ApplyUpdatesToInstances(global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ApplyUpdatesToInstances, null, options, request);
      }
      /// <summary>
      /// Apply updates to selected instances the managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> ApplyUpdatesToInstancesAsync(global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ApplyUpdatesToInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Apply updates to selected instances the managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> ApplyUpdatesToInstancesAsync(global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ApplyUpdatesToInstances, null, options, request);
      }
      /// <summary>
      /// Creates instances with per-instance configs in this regional managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation CreateInstances(global::Google.Cloud.Compute.V1.CreateInstancesRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates instances with per-instance configs in this regional managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation CreateInstances(global::Google.Cloud.Compute.V1.CreateInstancesRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateInstances, null, options, request);
      }
      /// <summary>
      /// Creates instances with per-instance configs in this regional managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> CreateInstancesAsync(global::Google.Cloud.Compute.V1.CreateInstancesRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates instances with per-instance configs in this regional managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> CreateInstancesAsync(global::Google.Cloud.Compute.V1.CreateInstancesRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateInstances, null, options, request);
      }
      /// <summary>
      /// Deletes the specified managed instance group and all of the instances in that group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified managed instance group and all of the instances in that group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified managed instance group and all of the instances in that group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified managed instance group and all of the instances in that group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Flags the specified instances in the managed instance group to be immediately deleted. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. The deleteInstances operation is marked DONE if the deleteInstances request is successful. The underlying actions take additional time. You must separately verify the status of the deleting action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DeleteInstances(global::Google.Cloud.Compute.V1.DeleteInstancesRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Flags the specified instances in the managed instance group to be immediately deleted. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. The deleteInstances operation is marked DONE if the deleteInstances request is successful. The underlying actions take additional time. You must separately verify the status of the deleting action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DeleteInstances(global::Google.Cloud.Compute.V1.DeleteInstancesRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteInstances, null, options, request);
      }
      /// <summary>
      /// Flags the specified instances in the managed instance group to be immediately deleted. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. The deleteInstances operation is marked DONE if the deleteInstances request is successful. The underlying actions take additional time. You must separately verify the status of the deleting action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteInstancesAsync(global::Google.Cloud.Compute.V1.DeleteInstancesRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Flags the specified instances in the managed instance group to be immediately deleted. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. The deleteInstances operation is marked DONE if the deleteInstances request is successful. The underlying actions take additional time. You must separately verify the status of the deleting action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteInstancesAsync(global::Google.Cloud.Compute.V1.DeleteInstancesRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteInstances, null, options, request);
      }
      /// <summary>
      /// Deletes selected per-instance configs for the managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DeletePerInstanceConfigs(global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePerInstanceConfigs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes selected per-instance configs for the managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation DeletePerInstanceConfigs(global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePerInstanceConfigs, null, options, request);
      }
      /// <summary>
      /// Deletes selected per-instance configs for the managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeletePerInstanceConfigsAsync(global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePerInstanceConfigsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes selected per-instance configs for the managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeletePerInstanceConfigsAsync(global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePerInstanceConfigs, null, options, request);
      }
      /// <summary>
      /// Returns all of the details about the specified managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupManager Get(global::Google.Cloud.Compute.V1.GetRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns all of the details about the specified managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroupManager Get(global::Google.Cloud.Compute.V1.GetRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns all of the details about the specified managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupManager> GetAsync(global::Google.Cloud.Compute.V1.GetRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns all of the details about the specified managed instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroupManager> GetAsync(global::Google.Cloud.Compute.V1.GetRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method.
      ///
      /// A regional managed instance group can contain up to 2000 instances.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method.
      ///
      /// A regional managed instance group can contain up to 2000 instances.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method.
      ///
      /// A regional managed instance group can contain up to 2000 instances.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method.
      ///
      /// A regional managed instance group can contain up to 2000 instances.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of managed instance groups that are contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RegionInstanceGroupManagerList List(global::Google.Cloud.Compute.V1.ListRegionInstanceGroupManagersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of managed instance groups that are contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RegionInstanceGroupManagerList List(global::Google.Cloud.Compute.V1.ListRegionInstanceGroupManagersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of managed instance groups that are contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RegionInstanceGroupManagerList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionInstanceGroupManagersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of managed instance groups that are contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RegionInstanceGroupManagerList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionInstanceGroupManagersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Lists all errors thrown by actions on instances for a given regional managed instance group. The filter and orderBy query parameters are not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListErrorsResponse ListErrors(global::Google.Cloud.Compute.V1.ListErrorsRegionInstanceGroupManagersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListErrors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all errors thrown by actions on instances for a given regional managed instance group. The filter and orderBy query parameters are not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListErrorsResponse ListErrors(global::Google.Cloud.Compute.V1.ListErrorsRegionInstanceGroupManagersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListErrors, null, options, request);
      }
      /// <summary>
      /// Lists all errors thrown by actions on instances for a given regional managed instance group. The filter and orderBy query parameters are not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListErrorsResponse> ListErrorsAsync(global::Google.Cloud.Compute.V1.ListErrorsRegionInstanceGroupManagersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListErrorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all errors thrown by actions on instances for a given regional managed instance group. The filter and orderBy query parameters are not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListErrorsResponse> ListErrorsAsync(global::Google.Cloud.Compute.V1.ListErrorsRegionInstanceGroupManagersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListErrors, null, options, request);
      }
      /// <summary>
      /// Lists the instances in the managed instance group and instances that are scheduled to be created. The list includes any current actions that the group has scheduled for its instances. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstancesResponse ListManagedInstances(global::Google.Cloud.Compute.V1.ListManagedInstancesRegionInstanceGroupManagersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListManagedInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the instances in the managed instance group and instances that are scheduled to be created. The list includes any current actions that the group has scheduled for its instances. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstancesResponse ListManagedInstances(global::Google.Cloud.Compute.V1.ListManagedInstancesRegionInstanceGroupManagersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListManagedInstances, null, options, request);
      }
      /// <summary>
      /// Lists the instances in the managed instance group and instances that are scheduled to be created. The list includes any current actions that the group has scheduled for its instances. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstancesResponse> ListManagedInstancesAsync(global::Google.Cloud.Compute.V1.ListManagedInstancesRegionInstanceGroupManagersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListManagedInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the instances in the managed instance group and instances that are scheduled to be created. The list includes any current actions that the group has scheduled for its instances. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstancesResponse> ListManagedInstancesAsync(global::Google.Cloud.Compute.V1.ListManagedInstancesRegionInstanceGroupManagersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListManagedInstances, null, options, request);
      }
      /// <summary>
      /// Lists all of the per-instance configs defined for the managed instance group. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstanceConfigsResp ListPerInstanceConfigs(global::Google.Cloud.Compute.V1.ListPerInstanceConfigsRegionInstanceGroupManagersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPerInstanceConfigs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all of the per-instance configs defined for the managed instance group. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstanceConfigsResp ListPerInstanceConfigs(global::Google.Cloud.Compute.V1.ListPerInstanceConfigsRegionInstanceGroupManagersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPerInstanceConfigs, null, options, request);
      }
      /// <summary>
      /// Lists all of the per-instance configs defined for the managed instance group. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstanceConfigsResp> ListPerInstanceConfigsAsync(global::Google.Cloud.Compute.V1.ListPerInstanceConfigsRegionInstanceGroupManagersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPerInstanceConfigsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all of the per-instance configs defined for the managed instance group. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstanceConfigsResp> ListPerInstanceConfigsAsync(global::Google.Cloud.Compute.V1.ListPerInstanceConfigsRegionInstanceGroupManagersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPerInstanceConfigs, null, options, request);
      }
      /// <summary>
      /// Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listmanagedinstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listmanagedinstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listmanagedinstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listmanagedinstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Inserts or patches per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation PatchPerInstanceConfigs(global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchPerInstanceConfigs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts or patches per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation PatchPerInstanceConfigs(global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchPerInstanceConfigs, null, options, request);
      }
      /// <summary>
      /// Inserts or patches per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchPerInstanceConfigsAsync(global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchPerInstanceConfigsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts or patches per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchPerInstanceConfigsAsync(global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchPerInstanceConfigs, null, options, request);
      }
      /// <summary>
      /// Flags the specified instances in the managed instance group to be immediately recreated. The instances are deleted and recreated using the current instance template for the managed instance group. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of the recreating action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RecreateInstances(global::Google.Cloud.Compute.V1.RecreateInstancesRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecreateInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Flags the specified instances in the managed instance group to be immediately recreated. The instances are deleted and recreated using the current instance template for the managed instance group. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of the recreating action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RecreateInstances(global::Google.Cloud.Compute.V1.RecreateInstancesRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RecreateInstances, null, options, request);
      }
      /// <summary>
      /// Flags the specified instances in the managed instance group to be immediately recreated. The instances are deleted and recreated using the current instance template for the managed instance group. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of the recreating action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RecreateInstancesAsync(global::Google.Cloud.Compute.V1.RecreateInstancesRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecreateInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Flags the specified instances in the managed instance group to be immediately recreated. The instances are deleted and recreated using the current instance template for the managed instance group. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of the recreating action with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      ///
      /// You can specify a maximum of 1000 instances with this method per request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RecreateInstancesAsync(global::Google.Cloud.Compute.V1.RecreateInstancesRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RecreateInstances, null, options, request);
      }
      /// <summary>
      /// Changes the intended size of the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes one or more instances.
      ///
      /// The resize operation is marked DONE if the resize request is successful. The underlying actions take additional time. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Resize(global::Google.Cloud.Compute.V1.ResizeRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Resize(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the intended size of the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes one or more instances.
      ///
      /// The resize operation is marked DONE if the resize request is successful. The underlying actions take additional time. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Resize(global::Google.Cloud.Compute.V1.ResizeRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Resize, null, options, request);
      }
      /// <summary>
      /// Changes the intended size of the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes one or more instances.
      ///
      /// The resize operation is marked DONE if the resize request is successful. The underlying actions take additional time. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> ResizeAsync(global::Google.Cloud.Compute.V1.ResizeRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResizeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the intended size of the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes one or more instances.
      ///
      /// The resize operation is marked DONE if the resize request is successful. The underlying actions take additional time. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method.
      ///
      /// If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> ResizeAsync(global::Google.Cloud.Compute.V1.ResizeRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Resize, null, options, request);
      }
      /// <summary>
      /// Sets the instance template to use when creating new instances or recreating instances in this group. Existing instances are not affected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetInstanceTemplate(global::Google.Cloud.Compute.V1.SetInstanceTemplateRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetInstanceTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the instance template to use when creating new instances or recreating instances in this group. Existing instances are not affected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetInstanceTemplate(global::Google.Cloud.Compute.V1.SetInstanceTemplateRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetInstanceTemplate, null, options, request);
      }
      /// <summary>
      /// Sets the instance template to use when creating new instances or recreating instances in this group. Existing instances are not affected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetInstanceTemplateAsync(global::Google.Cloud.Compute.V1.SetInstanceTemplateRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetInstanceTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the instance template to use when creating new instances or recreating instances in this group. Existing instances are not affected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetInstanceTemplateAsync(global::Google.Cloud.Compute.V1.SetInstanceTemplateRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetInstanceTemplate, null, options, request);
      }
      /// <summary>
      /// Modifies the target pools to which all new instances in this group are assigned. Existing instances in the group are not affected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetTargetPools(global::Google.Cloud.Compute.V1.SetTargetPoolsRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTargetPools(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies the target pools to which all new instances in this group are assigned. Existing instances in the group are not affected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetTargetPools(global::Google.Cloud.Compute.V1.SetTargetPoolsRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTargetPools, null, options, request);
      }
      /// <summary>
      /// Modifies the target pools to which all new instances in this group are assigned. Existing instances in the group are not affected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetTargetPoolsAsync(global::Google.Cloud.Compute.V1.SetTargetPoolsRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTargetPoolsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies the target pools to which all new instances in this group are assigned. Existing instances in the group are not affected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetTargetPoolsAsync(global::Google.Cloud.Compute.V1.SetTargetPoolsRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTargetPools, null, options, request);
      }
      /// <summary>
      /// Inserts or updates per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation UpdatePerInstanceConfigs(global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePerInstanceConfigs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts or updates per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation UpdatePerInstanceConfigs(global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePerInstanceConfigs, null, options, request);
      }
      /// <summary>
      /// Inserts or updates per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdatePerInstanceConfigsAsync(global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsRegionInstanceGroupManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePerInstanceConfigsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts or updates per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdatePerInstanceConfigsAsync(global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsRegionInstanceGroupManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePerInstanceConfigs, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionInstanceGroupManagersClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionInstanceGroupManagersClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegionInstanceGroupManagersBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AbandonInstances, serviceImpl.AbandonInstances)
          .AddMethod(__Method_ApplyUpdatesToInstances, serviceImpl.ApplyUpdatesToInstances)
          .AddMethod(__Method_CreateInstances, serviceImpl.CreateInstances)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_DeleteInstances, serviceImpl.DeleteInstances)
          .AddMethod(__Method_DeletePerInstanceConfigs, serviceImpl.DeletePerInstanceConfigs)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_ListErrors, serviceImpl.ListErrors)
          .AddMethod(__Method_ListManagedInstances, serviceImpl.ListManagedInstances)
          .AddMethod(__Method_ListPerInstanceConfigs, serviceImpl.ListPerInstanceConfigs)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_PatchPerInstanceConfigs, serviceImpl.PatchPerInstanceConfigs)
          .AddMethod(__Method_RecreateInstances, serviceImpl.RecreateInstances)
          .AddMethod(__Method_Resize, serviceImpl.Resize)
          .AddMethod(__Method_SetInstanceTemplate, serviceImpl.SetInstanceTemplate)
          .AddMethod(__Method_SetTargetPools, serviceImpl.SetTargetPools)
          .AddMethod(__Method_UpdatePerInstanceConfigs, serviceImpl.UpdatePerInstanceConfigs).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegionInstanceGroupManagersBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AbandonInstances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AbandonInstancesRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.AbandonInstances));
      serviceBinder.AddMethod(__Method_ApplyUpdatesToInstances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.ApplyUpdatesToInstances));
      serviceBinder.AddMethod(__Method_CreateInstances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.CreateInstancesRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.CreateInstances));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_DeleteInstances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteInstancesRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.DeleteInstances));
      serviceBinder.AddMethod(__Method_DeletePerInstanceConfigs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeletePerInstanceConfigsRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.DeletePerInstanceConfigs));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.InstanceGroupManager>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRegionInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.RegionInstanceGroupManagerList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_ListErrors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListErrorsRegionInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListErrorsResponse>(serviceImpl.ListErrors));
      serviceBinder.AddMethod(__Method_ListManagedInstances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListManagedInstancesRegionInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstancesResponse>(serviceImpl.ListManagedInstances));
      serviceBinder.AddMethod(__Method_ListPerInstanceConfigs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListPerInstanceConfigsRegionInstanceGroupManagersRequest, global::Google.Cloud.Compute.V1.RegionInstanceGroupManagersListInstanceConfigsResp>(serviceImpl.ListPerInstanceConfigs));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_PatchPerInstanceConfigs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchPerInstanceConfigsRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.PatchPerInstanceConfigs));
      serviceBinder.AddMethod(__Method_RecreateInstances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.RecreateInstancesRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.RecreateInstances));
      serviceBinder.AddMethod(__Method_Resize, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ResizeRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Resize));
      serviceBinder.AddMethod(__Method_SetInstanceTemplate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetInstanceTemplateRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetInstanceTemplate));
      serviceBinder.AddMethod(__Method_SetTargetPools, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetTargetPoolsRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetTargetPools));
      serviceBinder.AddMethod(__Method_UpdatePerInstanceConfigs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdatePerInstanceConfigsRegionInstanceGroupManagerRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.UpdatePerInstanceConfigs));
    }

  }
  /// <summary>
  /// The RegionInstanceGroups API.
  /// </summary>
  public static partial class RegionInstanceGroups
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.RegionInstanceGroups";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRegionInstanceGroupRequest> __Marshaller_google_cloud_compute_v1_GetRegionInstanceGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRegionInstanceGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InstanceGroup> __Marshaller_google_cloud_compute_v1_InstanceGroup = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InstanceGroup.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRegionInstanceGroupsRequest> __Marshaller_google_cloud_compute_v1_ListRegionInstanceGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRegionInstanceGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RegionInstanceGroupList> __Marshaller_google_cloud_compute_v1_RegionInstanceGroupList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RegionInstanceGroupList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListInstancesRegionInstanceGroupsRequest> __Marshaller_google_cloud_compute_v1_ListInstancesRegionInstanceGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListInstancesRegionInstanceGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RegionInstanceGroupsListInstances> __Marshaller_google_cloud_compute_v1_RegionInstanceGroupsListInstances = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RegionInstanceGroupsListInstances.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetNamedPortsRegionInstanceGroupRequest> __Marshaller_google_cloud_compute_v1_SetNamedPortsRegionInstanceGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetNamedPortsRegionInstanceGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRegionInstanceGroupRequest, global::Google.Cloud.Compute.V1.InstanceGroup> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRegionInstanceGroupRequest, global::Google.Cloud.Compute.V1.InstanceGroup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRegionInstanceGroupRequest,
        __Marshaller_google_cloud_compute_v1_InstanceGroup);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRegionInstanceGroupsRequest, global::Google.Cloud.Compute.V1.RegionInstanceGroupList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRegionInstanceGroupsRequest, global::Google.Cloud.Compute.V1.RegionInstanceGroupList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRegionInstanceGroupsRequest,
        __Marshaller_google_cloud_compute_v1_RegionInstanceGroupList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListInstancesRegionInstanceGroupsRequest, global::Google.Cloud.Compute.V1.RegionInstanceGroupsListInstances> __Method_ListInstances = new grpc::Method<global::Google.Cloud.Compute.V1.ListInstancesRegionInstanceGroupsRequest, global::Google.Cloud.Compute.V1.RegionInstanceGroupsListInstances>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListInstances",
        __Marshaller_google_cloud_compute_v1_ListInstancesRegionInstanceGroupsRequest,
        __Marshaller_google_cloud_compute_v1_RegionInstanceGroupsListInstances);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetNamedPortsRegionInstanceGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetNamedPorts = new grpc::Method<global::Google.Cloud.Compute.V1.SetNamedPortsRegionInstanceGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetNamedPorts",
        __Marshaller_google_cloud_compute_v1_SetNamedPortsRegionInstanceGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[42]; }
    }

    /// <summary>Base class for server-side implementations of RegionInstanceGroups</summary>
    [grpc::BindServiceMethod(typeof(RegionInstanceGroups), "BindService")]
    public abstract partial class RegionInstanceGroupsBase
    {
      /// <summary>
      /// Returns the specified instance group resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.InstanceGroup> Get(global::Google.Cloud.Compute.V1.GetRegionInstanceGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of instance group resources contained within the specified region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.RegionInstanceGroupList> List(global::Google.Cloud.Compute.V1.ListRegionInstanceGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the instances in the specified instance group and displays information about the named ports. Depending on the specified options, this method can list all instances or only the instances that are running. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.RegionInstanceGroupsListInstances> ListInstances(global::Google.Cloud.Compute.V1.ListInstancesRegionInstanceGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the named ports for the specified regional instance group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetNamedPorts(global::Google.Cloud.Compute.V1.SetNamedPortsRegionInstanceGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegionInstanceGroups</summary>
    public partial class RegionInstanceGroupsClient : grpc::ClientBase<RegionInstanceGroupsClient>
    {
      /// <summary>Creates a new client for RegionInstanceGroups</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionInstanceGroupsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegionInstanceGroups that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionInstanceGroupsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionInstanceGroupsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionInstanceGroupsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns the specified instance group resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroup Get(global::Google.Cloud.Compute.V1.GetRegionInstanceGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified instance group resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.InstanceGroup Get(global::Google.Cloud.Compute.V1.GetRegionInstanceGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified instance group resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroup> GetAsync(global::Google.Cloud.Compute.V1.GetRegionInstanceGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified instance group resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.InstanceGroup> GetAsync(global::Google.Cloud.Compute.V1.GetRegionInstanceGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of instance group resources contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RegionInstanceGroupList List(global::Google.Cloud.Compute.V1.ListRegionInstanceGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of instance group resources contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RegionInstanceGroupList List(global::Google.Cloud.Compute.V1.ListRegionInstanceGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of instance group resources contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RegionInstanceGroupList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionInstanceGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of instance group resources contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RegionInstanceGroupList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionInstanceGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Lists the instances in the specified instance group and displays information about the named ports. Depending on the specified options, this method can list all instances or only the instances that are running. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RegionInstanceGroupsListInstances ListInstances(global::Google.Cloud.Compute.V1.ListInstancesRegionInstanceGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the instances in the specified instance group and displays information about the named ports. Depending on the specified options, this method can list all instances or only the instances that are running. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RegionInstanceGroupsListInstances ListInstances(global::Google.Cloud.Compute.V1.ListInstancesRegionInstanceGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListInstances, null, options, request);
      }
      /// <summary>
      /// Lists the instances in the specified instance group and displays information about the named ports. Depending on the specified options, this method can list all instances or only the instances that are running. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RegionInstanceGroupsListInstances> ListInstancesAsync(global::Google.Cloud.Compute.V1.ListInstancesRegionInstanceGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the instances in the specified instance group and displays information about the named ports. Depending on the specified options, this method can list all instances or only the instances that are running. The orderBy query parameter is not supported.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RegionInstanceGroupsListInstances> ListInstancesAsync(global::Google.Cloud.Compute.V1.ListInstancesRegionInstanceGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListInstances, null, options, request);
      }
      /// <summary>
      /// Sets the named ports for the specified regional instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetNamedPorts(global::Google.Cloud.Compute.V1.SetNamedPortsRegionInstanceGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetNamedPorts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the named ports for the specified regional instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetNamedPorts(global::Google.Cloud.Compute.V1.SetNamedPortsRegionInstanceGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetNamedPorts, null, options, request);
      }
      /// <summary>
      /// Sets the named ports for the specified regional instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetNamedPortsAsync(global::Google.Cloud.Compute.V1.SetNamedPortsRegionInstanceGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetNamedPortsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the named ports for the specified regional instance group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetNamedPortsAsync(global::Google.Cloud.Compute.V1.SetNamedPortsRegionInstanceGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetNamedPorts, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionInstanceGroupsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionInstanceGroupsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegionInstanceGroupsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_ListInstances, serviceImpl.ListInstances)
          .AddMethod(__Method_SetNamedPorts, serviceImpl.SetNamedPorts).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegionInstanceGroupsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRegionInstanceGroupRequest, global::Google.Cloud.Compute.V1.InstanceGroup>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRegionInstanceGroupsRequest, global::Google.Cloud.Compute.V1.RegionInstanceGroupList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_ListInstances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListInstancesRegionInstanceGroupsRequest, global::Google.Cloud.Compute.V1.RegionInstanceGroupsListInstances>(serviceImpl.ListInstances));
      serviceBinder.AddMethod(__Method_SetNamedPorts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetNamedPortsRegionInstanceGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetNamedPorts));
    }

  }
  /// <summary>
  /// The RegionNetworkEndpointGroups API.
  /// </summary>
  public static partial class RegionNetworkEndpointGroups
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.RegionNetworkEndpointGroups";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteRegionNetworkEndpointGroupRequest> __Marshaller_google_cloud_compute_v1_DeleteRegionNetworkEndpointGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteRegionNetworkEndpointGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRegionNetworkEndpointGroupRequest> __Marshaller_google_cloud_compute_v1_GetRegionNetworkEndpointGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRegionNetworkEndpointGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NetworkEndpointGroup> __Marshaller_google_cloud_compute_v1_NetworkEndpointGroup = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NetworkEndpointGroup.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertRegionNetworkEndpointGroupRequest> __Marshaller_google_cloud_compute_v1_InsertRegionNetworkEndpointGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertRegionNetworkEndpointGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRegionNetworkEndpointGroupsRequest> __Marshaller_google_cloud_compute_v1_ListRegionNetworkEndpointGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRegionNetworkEndpointGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NetworkEndpointGroupList> __Marshaller_google_cloud_compute_v1_NetworkEndpointGroupList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NetworkEndpointGroupList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteRegionNetworkEndpointGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRegionNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroup> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRegionNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRegionNetworkEndpointGroupRequest,
        __Marshaller_google_cloud_compute_v1_NetworkEndpointGroup);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertRegionNetworkEndpointGroupRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRegionNetworkEndpointGroupsRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroupList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRegionNetworkEndpointGroupsRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroupList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRegionNetworkEndpointGroupsRequest,
        __Marshaller_google_cloud_compute_v1_NetworkEndpointGroupList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[43]; }
    }

    /// <summary>Base class for server-side implementations of RegionNetworkEndpointGroups</summary>
    [grpc::BindServiceMethod(typeof(RegionNetworkEndpointGroups), "BindService")]
    public abstract partial class RegionNetworkEndpointGroupsBase
    {
      /// <summary>
      /// Deletes the specified network endpoint group. Note that the NEG cannot be deleted if it is configured as a backend of a backend service.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteRegionNetworkEndpointGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NetworkEndpointGroup> Get(global::Google.Cloud.Compute.V1.GetRegionNetworkEndpointGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a network endpoint group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertRegionNetworkEndpointGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of regional network endpoint groups available to the specified project in the given region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NetworkEndpointGroupList> List(global::Google.Cloud.Compute.V1.ListRegionNetworkEndpointGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegionNetworkEndpointGroups</summary>
    public partial class RegionNetworkEndpointGroupsClient : grpc::ClientBase<RegionNetworkEndpointGroupsClient>
    {
      /// <summary>Creates a new client for RegionNetworkEndpointGroups</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionNetworkEndpointGroupsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegionNetworkEndpointGroups that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionNetworkEndpointGroupsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionNetworkEndpointGroupsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionNetworkEndpointGroupsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified network endpoint group. Note that the NEG cannot be deleted if it is configured as a backend of a backend service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified network endpoint group. Note that the NEG cannot be deleted if it is configured as a backend of a backend service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified network endpoint group. Note that the NEG cannot be deleted if it is configured as a backend of a backend service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified network endpoint group. Note that the NEG cannot be deleted if it is configured as a backend of a backend service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkEndpointGroup Get(global::Google.Cloud.Compute.V1.GetRegionNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkEndpointGroup Get(global::Google.Cloud.Compute.V1.GetRegionNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkEndpointGroup> GetAsync(global::Google.Cloud.Compute.V1.GetRegionNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkEndpointGroup> GetAsync(global::Google.Cloud.Compute.V1.GetRegionNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a network endpoint group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a network endpoint group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a network endpoint group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionNetworkEndpointGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a network endpoint group in the specified project using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionNetworkEndpointGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of regional network endpoint groups available to the specified project in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkEndpointGroupList List(global::Google.Cloud.Compute.V1.ListRegionNetworkEndpointGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of regional network endpoint groups available to the specified project in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NetworkEndpointGroupList List(global::Google.Cloud.Compute.V1.ListRegionNetworkEndpointGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of regional network endpoint groups available to the specified project in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkEndpointGroupList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionNetworkEndpointGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of regional network endpoint groups available to the specified project in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NetworkEndpointGroupList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionNetworkEndpointGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionNetworkEndpointGroupsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionNetworkEndpointGroupsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegionNetworkEndpointGroupsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegionNetworkEndpointGroupsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteRegionNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRegionNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroup>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertRegionNetworkEndpointGroupRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRegionNetworkEndpointGroupsRequest, global::Google.Cloud.Compute.V1.NetworkEndpointGroupList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The RegionNotificationEndpoints API.
  /// </summary>
  public static partial class RegionNotificationEndpoints
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.RegionNotificationEndpoints";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteRegionNotificationEndpointRequest> __Marshaller_google_cloud_compute_v1_DeleteRegionNotificationEndpointRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteRegionNotificationEndpointRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRegionNotificationEndpointRequest> __Marshaller_google_cloud_compute_v1_GetRegionNotificationEndpointRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRegionNotificationEndpointRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NotificationEndpoint> __Marshaller_google_cloud_compute_v1_NotificationEndpoint = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NotificationEndpoint.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertRegionNotificationEndpointRequest> __Marshaller_google_cloud_compute_v1_InsertRegionNotificationEndpointRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertRegionNotificationEndpointRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRegionNotificationEndpointsRequest> __Marshaller_google_cloud_compute_v1_ListRegionNotificationEndpointsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRegionNotificationEndpointsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.NotificationEndpointList> __Marshaller_google_cloud_compute_v1_NotificationEndpointList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.NotificationEndpointList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionNotificationEndpointRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionNotificationEndpointRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteRegionNotificationEndpointRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRegionNotificationEndpointRequest, global::Google.Cloud.Compute.V1.NotificationEndpoint> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRegionNotificationEndpointRequest, global::Google.Cloud.Compute.V1.NotificationEndpoint>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRegionNotificationEndpointRequest,
        __Marshaller_google_cloud_compute_v1_NotificationEndpoint);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionNotificationEndpointRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionNotificationEndpointRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertRegionNotificationEndpointRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRegionNotificationEndpointsRequest, global::Google.Cloud.Compute.V1.NotificationEndpointList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRegionNotificationEndpointsRequest, global::Google.Cloud.Compute.V1.NotificationEndpointList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRegionNotificationEndpointsRequest,
        __Marshaller_google_cloud_compute_v1_NotificationEndpointList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[44]; }
    }

    /// <summary>Base class for server-side implementations of RegionNotificationEndpoints</summary>
    [grpc::BindServiceMethod(typeof(RegionNotificationEndpoints), "BindService")]
    public abstract partial class RegionNotificationEndpointsBase
    {
      /// <summary>
      /// Deletes the specified NotificationEndpoint in the given region
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteRegionNotificationEndpointRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified NotificationEndpoint resource in the given region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NotificationEndpoint> Get(global::Google.Cloud.Compute.V1.GetRegionNotificationEndpointRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a NotificationEndpoint in the specified project in the given region using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertRegionNotificationEndpointRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the NotificationEndpoints for a project in the given region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.NotificationEndpointList> List(global::Google.Cloud.Compute.V1.ListRegionNotificationEndpointsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegionNotificationEndpoints</summary>
    public partial class RegionNotificationEndpointsClient : grpc::ClientBase<RegionNotificationEndpointsClient>
    {
      /// <summary>Creates a new client for RegionNotificationEndpoints</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionNotificationEndpointsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegionNotificationEndpoints that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionNotificationEndpointsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionNotificationEndpointsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionNotificationEndpointsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified NotificationEndpoint in the given region
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionNotificationEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified NotificationEndpoint in the given region
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionNotificationEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified NotificationEndpoint in the given region
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionNotificationEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified NotificationEndpoint in the given region
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionNotificationEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified NotificationEndpoint resource in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NotificationEndpoint Get(global::Google.Cloud.Compute.V1.GetRegionNotificationEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified NotificationEndpoint resource in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NotificationEndpoint Get(global::Google.Cloud.Compute.V1.GetRegionNotificationEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified NotificationEndpoint resource in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NotificationEndpoint> GetAsync(global::Google.Cloud.Compute.V1.GetRegionNotificationEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified NotificationEndpoint resource in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NotificationEndpoint> GetAsync(global::Google.Cloud.Compute.V1.GetRegionNotificationEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Create a NotificationEndpoint in the specified project in the given region using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionNotificationEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a NotificationEndpoint in the specified project in the given region using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionNotificationEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Create a NotificationEndpoint in the specified project in the given region using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionNotificationEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a NotificationEndpoint in the specified project in the given region using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionNotificationEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Lists the NotificationEndpoints for a project in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NotificationEndpointList List(global::Google.Cloud.Compute.V1.ListRegionNotificationEndpointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the NotificationEndpoints for a project in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.NotificationEndpointList List(global::Google.Cloud.Compute.V1.ListRegionNotificationEndpointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Lists the NotificationEndpoints for a project in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NotificationEndpointList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionNotificationEndpointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the NotificationEndpoints for a project in the given region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.NotificationEndpointList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionNotificationEndpointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionNotificationEndpointsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionNotificationEndpointsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegionNotificationEndpointsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegionNotificationEndpointsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteRegionNotificationEndpointRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRegionNotificationEndpointRequest, global::Google.Cloud.Compute.V1.NotificationEndpoint>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertRegionNotificationEndpointRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRegionNotificationEndpointsRequest, global::Google.Cloud.Compute.V1.NotificationEndpointList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The RegionOperations API.
  /// </summary>
  public static partial class RegionOperations
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.RegionOperations";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteRegionOperationRequest> __Marshaller_google_cloud_compute_v1_DeleteRegionOperationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteRegionOperationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteRegionOperationResponse> __Marshaller_google_cloud_compute_v1_DeleteRegionOperationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteRegionOperationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRegionOperationRequest> __Marshaller_google_cloud_compute_v1_GetRegionOperationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRegionOperationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRegionOperationsRequest> __Marshaller_google_cloud_compute_v1_ListRegionOperationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRegionOperationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.OperationList> __Marshaller_google_cloud_compute_v1_OperationList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.OperationList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.WaitRegionOperationRequest> __Marshaller_google_cloud_compute_v1_WaitRegionOperationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.WaitRegionOperationRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionOperationRequest, global::Google.Cloud.Compute.V1.DeleteRegionOperationResponse> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionOperationRequest, global::Google.Cloud.Compute.V1.DeleteRegionOperationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteRegionOperationRequest,
        __Marshaller_google_cloud_compute_v1_DeleteRegionOperationResponse);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRegionOperationRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRegionOperationRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRegionOperationRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRegionOperationsRequest, global::Google.Cloud.Compute.V1.OperationList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRegionOperationsRequest, global::Google.Cloud.Compute.V1.OperationList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRegionOperationsRequest,
        __Marshaller_google_cloud_compute_v1_OperationList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.WaitRegionOperationRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Wait = new grpc::Method<global::Google.Cloud.Compute.V1.WaitRegionOperationRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Wait",
        __Marshaller_google_cloud_compute_v1_WaitRegionOperationRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[45]; }
    }

    /// <summary>Base class for server-side implementations of RegionOperations</summary>
    [grpc::BindServiceMethod(typeof(RegionOperations), "BindService")]
    public abstract partial class RegionOperationsBase
    {
      /// <summary>
      /// Deletes the specified region-specific Operations resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.DeleteRegionOperationResponse> Delete(global::Google.Cloud.Compute.V1.DeleteRegionOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the specified region-specific Operations resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Get(global::Google.Cloud.Compute.V1.GetRegionOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.OperationList> List(global::Google.Cloud.Compute.V1.ListRegionOperationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
      ///
      /// This method is called on a best-effort basis. Specifically:
      /// - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
      /// - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Wait(global::Google.Cloud.Compute.V1.WaitRegionOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegionOperations</summary>
    public partial class RegionOperationsClient : grpc::ClientBase<RegionOperationsClient>
    {
      /// <summary>Creates a new client for RegionOperations</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionOperationsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegionOperations that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionOperationsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionOperationsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionOperationsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified region-specific Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DeleteRegionOperationResponse Delete(global::Google.Cloud.Compute.V1.DeleteRegionOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified region-specific Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DeleteRegionOperationResponse Delete(global::Google.Cloud.Compute.V1.DeleteRegionOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified region-specific Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DeleteRegionOperationResponse> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified region-specific Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DeleteRegionOperationResponse> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Retrieves the specified region-specific Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Get(global::Google.Cloud.Compute.V1.GetRegionOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the specified region-specific Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Get(global::Google.Cloud.Compute.V1.GetRegionOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves the specified region-specific Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> GetAsync(global::Google.Cloud.Compute.V1.GetRegionOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the specified region-specific Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> GetAsync(global::Google.Cloud.Compute.V1.GetRegionOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.OperationList List(global::Google.Cloud.Compute.V1.ListRegionOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.OperationList List(global::Google.Cloud.Compute.V1.ListRegionOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.OperationList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.OperationList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
      ///
      /// This method is called on a best-effort basis. Specifically:
      /// - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
      /// - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Wait(global::Google.Cloud.Compute.V1.WaitRegionOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Wait(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
      ///
      /// This method is called on a best-effort basis. Specifically:
      /// - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
      /// - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Wait(global::Google.Cloud.Compute.V1.WaitRegionOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Wait, null, options, request);
      }
      /// <summary>
      /// Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
      ///
      /// This method is called on a best-effort basis. Specifically:
      /// - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
      /// - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> WaitAsync(global::Google.Cloud.Compute.V1.WaitRegionOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WaitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
      ///
      /// This method is called on a best-effort basis. Specifically:
      /// - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
      /// - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> WaitAsync(global::Google.Cloud.Compute.V1.WaitRegionOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Wait, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionOperationsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionOperationsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegionOperationsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Wait, serviceImpl.Wait).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegionOperationsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteRegionOperationRequest, global::Google.Cloud.Compute.V1.DeleteRegionOperationResponse>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRegionOperationRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRegionOperationsRequest, global::Google.Cloud.Compute.V1.OperationList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Wait, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.WaitRegionOperationRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Wait));
    }

  }
  /// <summary>
  /// The RegionSslCertificates API.
  /// </summary>
  public static partial class RegionSslCertificates
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.RegionSslCertificates";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteRegionSslCertificateRequest> __Marshaller_google_cloud_compute_v1_DeleteRegionSslCertificateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteRegionSslCertificateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRegionSslCertificateRequest> __Marshaller_google_cloud_compute_v1_GetRegionSslCertificateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRegionSslCertificateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SslCertificate> __Marshaller_google_cloud_compute_v1_SslCertificate = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SslCertificate.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertRegionSslCertificateRequest> __Marshaller_google_cloud_compute_v1_InsertRegionSslCertificateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertRegionSslCertificateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRegionSslCertificatesRequest> __Marshaller_google_cloud_compute_v1_ListRegionSslCertificatesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRegionSslCertificatesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SslCertificateList> __Marshaller_google_cloud_compute_v1_SslCertificateList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SslCertificateList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionSslCertificateRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionSslCertificateRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteRegionSslCertificateRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRegionSslCertificateRequest, global::Google.Cloud.Compute.V1.SslCertificate> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRegionSslCertificateRequest, global::Google.Cloud.Compute.V1.SslCertificate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRegionSslCertificateRequest,
        __Marshaller_google_cloud_compute_v1_SslCertificate);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionSslCertificateRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionSslCertificateRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertRegionSslCertificateRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRegionSslCertificatesRequest, global::Google.Cloud.Compute.V1.SslCertificateList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRegionSslCertificatesRequest, global::Google.Cloud.Compute.V1.SslCertificateList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRegionSslCertificatesRequest,
        __Marshaller_google_cloud_compute_v1_SslCertificateList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[46]; }
    }

    /// <summary>Base class for server-side implementations of RegionSslCertificates</summary>
    [grpc::BindServiceMethod(typeof(RegionSslCertificates), "BindService")]
    public abstract partial class RegionSslCertificatesBase
    {
      /// <summary>
      /// Deletes the specified SslCertificate resource in the region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteRegionSslCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified SslCertificate resource in the specified region. Get a list of available SSL certificates by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.SslCertificate> Get(global::Google.Cloud.Compute.V1.GetRegionSslCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a SslCertificate resource in the specified project and region using the data included in the request
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertRegionSslCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of SslCertificate resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.SslCertificateList> List(global::Google.Cloud.Compute.V1.ListRegionSslCertificatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegionSslCertificates</summary>
    public partial class RegionSslCertificatesClient : grpc::ClientBase<RegionSslCertificatesClient>
    {
      /// <summary>Creates a new client for RegionSslCertificates</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionSslCertificatesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegionSslCertificates that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionSslCertificatesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionSslCertificatesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionSslCertificatesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified SslCertificate resource in the region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionSslCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified SslCertificate resource in the region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionSslCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified SslCertificate resource in the region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionSslCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified SslCertificate resource in the region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionSslCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified SslCertificate resource in the specified region. Get a list of available SSL certificates by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SslCertificate Get(global::Google.Cloud.Compute.V1.GetRegionSslCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified SslCertificate resource in the specified region. Get a list of available SSL certificates by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SslCertificate Get(global::Google.Cloud.Compute.V1.GetRegionSslCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified SslCertificate resource in the specified region. Get a list of available SSL certificates by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SslCertificate> GetAsync(global::Google.Cloud.Compute.V1.GetRegionSslCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified SslCertificate resource in the specified region. Get a list of available SSL certificates by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SslCertificate> GetAsync(global::Google.Cloud.Compute.V1.GetRegionSslCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a SslCertificate resource in the specified project and region using the data included in the request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionSslCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a SslCertificate resource in the specified project and region using the data included in the request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionSslCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a SslCertificate resource in the specified project and region using the data included in the request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionSslCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a SslCertificate resource in the specified project and region using the data included in the request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionSslCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of SslCertificate resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SslCertificateList List(global::Google.Cloud.Compute.V1.ListRegionSslCertificatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of SslCertificate resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SslCertificateList List(global::Google.Cloud.Compute.V1.ListRegionSslCertificatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of SslCertificate resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SslCertificateList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionSslCertificatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of SslCertificate resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SslCertificateList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionSslCertificatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionSslCertificatesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionSslCertificatesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegionSslCertificatesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegionSslCertificatesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteRegionSslCertificateRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRegionSslCertificateRequest, global::Google.Cloud.Compute.V1.SslCertificate>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertRegionSslCertificateRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRegionSslCertificatesRequest, global::Google.Cloud.Compute.V1.SslCertificateList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The RegionTargetHttpProxies API.
  /// </summary>
  public static partial class RegionTargetHttpProxies
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.RegionTargetHttpProxies";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpProxyRequest> __Marshaller_google_cloud_compute_v1_DeleteRegionTargetHttpProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRegionTargetHttpProxyRequest> __Marshaller_google_cloud_compute_v1_GetRegionTargetHttpProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRegionTargetHttpProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetHttpProxy> __Marshaller_google_cloud_compute_v1_TargetHttpProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetHttpProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertRegionTargetHttpProxyRequest> __Marshaller_google_cloud_compute_v1_InsertRegionTargetHttpProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertRegionTargetHttpProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRegionTargetHttpProxiesRequest> __Marshaller_google_cloud_compute_v1_ListRegionTargetHttpProxiesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRegionTargetHttpProxiesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetHttpProxyList> __Marshaller_google_cloud_compute_v1_TargetHttpProxyList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetHttpProxyList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpProxyRequest> __Marshaller_google_cloud_compute_v1_SetUrlMapRegionTargetHttpProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpProxyRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteRegionTargetHttpProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRegionTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.TargetHttpProxy> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRegionTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.TargetHttpProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRegionTargetHttpProxyRequest,
        __Marshaller_google_cloud_compute_v1_TargetHttpProxy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertRegionTargetHttpProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRegionTargetHttpProxiesRequest, global::Google.Cloud.Compute.V1.TargetHttpProxyList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRegionTargetHttpProxiesRequest, global::Google.Cloud.Compute.V1.TargetHttpProxyList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRegionTargetHttpProxiesRequest,
        __Marshaller_google_cloud_compute_v1_TargetHttpProxyList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetUrlMap = new grpc::Method<global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetUrlMap",
        __Marshaller_google_cloud_compute_v1_SetUrlMapRegionTargetHttpProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[47]; }
    }

    /// <summary>Base class for server-side implementations of RegionTargetHttpProxies</summary>
    [grpc::BindServiceMethod(typeof(RegionTargetHttpProxies), "BindService")]
    public abstract partial class RegionTargetHttpProxiesBase
    {
      /// <summary>
      /// Deletes the specified TargetHttpProxy resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified TargetHttpProxy resource in the specified region. Gets a list of available target HTTP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetHttpProxy> Get(global::Google.Cloud.Compute.V1.GetRegionTargetHttpProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a TargetHttpProxy resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertRegionTargetHttpProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of TargetHttpProxy resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetHttpProxyList> List(global::Google.Cloud.Compute.V1.ListRegionTargetHttpProxiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Changes the URL map for TargetHttpProxy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetUrlMap(global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegionTargetHttpProxies</summary>
    public partial class RegionTargetHttpProxiesClient : grpc::ClientBase<RegionTargetHttpProxiesClient>
    {
      /// <summary>Creates a new client for RegionTargetHttpProxies</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionTargetHttpProxiesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegionTargetHttpProxies that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionTargetHttpProxiesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionTargetHttpProxiesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionTargetHttpProxiesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified TargetHttpProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified TargetHttpProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified TargetHttpProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified TargetHttpProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified TargetHttpProxy resource in the specified region. Gets a list of available target HTTP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpProxy Get(global::Google.Cloud.Compute.V1.GetRegionTargetHttpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified TargetHttpProxy resource in the specified region. Gets a list of available target HTTP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpProxy Get(global::Google.Cloud.Compute.V1.GetRegionTargetHttpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified TargetHttpProxy resource in the specified region. Gets a list of available target HTTP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpProxy> GetAsync(global::Google.Cloud.Compute.V1.GetRegionTargetHttpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified TargetHttpProxy resource in the specified region. Gets a list of available target HTTP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpProxy> GetAsync(global::Google.Cloud.Compute.V1.GetRegionTargetHttpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a TargetHttpProxy resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionTargetHttpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TargetHttpProxy resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionTargetHttpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a TargetHttpProxy resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionTargetHttpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TargetHttpProxy resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionTargetHttpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of TargetHttpProxy resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpProxyList List(global::Google.Cloud.Compute.V1.ListRegionTargetHttpProxiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of TargetHttpProxy resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpProxyList List(global::Google.Cloud.Compute.V1.ListRegionTargetHttpProxiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of TargetHttpProxy resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpProxyList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionTargetHttpProxiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of TargetHttpProxy resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpProxyList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionTargetHttpProxiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Changes the URL map for TargetHttpProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetUrlMap(global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetUrlMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the URL map for TargetHttpProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetUrlMap(global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetUrlMap, null, options, request);
      }
      /// <summary>
      /// Changes the URL map for TargetHttpProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetUrlMapAsync(global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetUrlMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the URL map for TargetHttpProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetUrlMapAsync(global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetUrlMap, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionTargetHttpProxiesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionTargetHttpProxiesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegionTargetHttpProxiesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_SetUrlMap, serviceImpl.SetUrlMap).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegionTargetHttpProxiesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRegionTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.TargetHttpProxy>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertRegionTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRegionTargetHttpProxiesRequest, global::Google.Cloud.Compute.V1.TargetHttpProxyList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_SetUrlMap, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetUrlMap));
    }

  }
  /// <summary>
  /// The RegionTargetHttpsProxies API.
  /// </summary>
  public static partial class RegionTargetHttpsProxies
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.RegionTargetHttpsProxies";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpsProxyRequest> __Marshaller_google_cloud_compute_v1_DeleteRegionTargetHttpsProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpsProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRegionTargetHttpsProxyRequest> __Marshaller_google_cloud_compute_v1_GetRegionTargetHttpsProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRegionTargetHttpsProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetHttpsProxy> __Marshaller_google_cloud_compute_v1_TargetHttpsProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetHttpsProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertRegionTargetHttpsProxyRequest> __Marshaller_google_cloud_compute_v1_InsertRegionTargetHttpsProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertRegionTargetHttpsProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRegionTargetHttpsProxiesRequest> __Marshaller_google_cloud_compute_v1_ListRegionTargetHttpsProxiesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRegionTargetHttpsProxiesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetHttpsProxyList> __Marshaller_google_cloud_compute_v1_TargetHttpsProxyList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetHttpsProxyList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetSslCertificatesRegionTargetHttpsProxyRequest> __Marshaller_google_cloud_compute_v1_SetSslCertificatesRegionTargetHttpsProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetSslCertificatesRegionTargetHttpsProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpsProxyRequest> __Marshaller_google_cloud_compute_v1_SetUrlMapRegionTargetHttpsProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpsProxyRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteRegionTargetHttpsProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRegionTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.TargetHttpsProxy> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRegionTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.TargetHttpsProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRegionTargetHttpsProxyRequest,
        __Marshaller_google_cloud_compute_v1_TargetHttpsProxy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertRegionTargetHttpsProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRegionTargetHttpsProxiesRequest, global::Google.Cloud.Compute.V1.TargetHttpsProxyList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRegionTargetHttpsProxiesRequest, global::Google.Cloud.Compute.V1.TargetHttpsProxyList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRegionTargetHttpsProxiesRequest,
        __Marshaller_google_cloud_compute_v1_TargetHttpsProxyList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetSslCertificatesRegionTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetSslCertificates = new grpc::Method<global::Google.Cloud.Compute.V1.SetSslCertificatesRegionTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetSslCertificates",
        __Marshaller_google_cloud_compute_v1_SetSslCertificatesRegionTargetHttpsProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetUrlMap = new grpc::Method<global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetUrlMap",
        __Marshaller_google_cloud_compute_v1_SetUrlMapRegionTargetHttpsProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[48]; }
    }

    /// <summary>Base class for server-side implementations of RegionTargetHttpsProxies</summary>
    [grpc::BindServiceMethod(typeof(RegionTargetHttpsProxies), "BindService")]
    public abstract partial class RegionTargetHttpsProxiesBase
    {
      /// <summary>
      /// Deletes the specified TargetHttpsProxy resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpsProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified TargetHttpsProxy resource in the specified region. Gets a list of available target HTTP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetHttpsProxy> Get(global::Google.Cloud.Compute.V1.GetRegionTargetHttpsProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a TargetHttpsProxy resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertRegionTargetHttpsProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of TargetHttpsProxy resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetHttpsProxyList> List(global::Google.Cloud.Compute.V1.ListRegionTargetHttpsProxiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Replaces SslCertificates for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetSslCertificates(global::Google.Cloud.Compute.V1.SetSslCertificatesRegionTargetHttpsProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Changes the URL map for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetUrlMap(global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpsProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegionTargetHttpsProxies</summary>
    public partial class RegionTargetHttpsProxiesClient : grpc::ClientBase<RegionTargetHttpsProxiesClient>
    {
      /// <summary>Creates a new client for RegionTargetHttpsProxies</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionTargetHttpsProxiesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegionTargetHttpsProxies that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionTargetHttpsProxiesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionTargetHttpsProxiesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionTargetHttpsProxiesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified TargetHttpsProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified TargetHttpsProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified TargetHttpsProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified TargetHttpsProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified TargetHttpsProxy resource in the specified region. Gets a list of available target HTTP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpsProxy Get(global::Google.Cloud.Compute.V1.GetRegionTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified TargetHttpsProxy resource in the specified region. Gets a list of available target HTTP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpsProxy Get(global::Google.Cloud.Compute.V1.GetRegionTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified TargetHttpsProxy resource in the specified region. Gets a list of available target HTTP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpsProxy> GetAsync(global::Google.Cloud.Compute.V1.GetRegionTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified TargetHttpsProxy resource in the specified region. Gets a list of available target HTTP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpsProxy> GetAsync(global::Google.Cloud.Compute.V1.GetRegionTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a TargetHttpsProxy resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TargetHttpsProxy resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a TargetHttpsProxy resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TargetHttpsProxy resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of TargetHttpsProxy resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpsProxyList List(global::Google.Cloud.Compute.V1.ListRegionTargetHttpsProxiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of TargetHttpsProxy resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpsProxyList List(global::Google.Cloud.Compute.V1.ListRegionTargetHttpsProxiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of TargetHttpsProxy resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpsProxyList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionTargetHttpsProxiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of TargetHttpsProxy resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpsProxyList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionTargetHttpsProxiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Replaces SslCertificates for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetSslCertificates(global::Google.Cloud.Compute.V1.SetSslCertificatesRegionTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSslCertificates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Replaces SslCertificates for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetSslCertificates(global::Google.Cloud.Compute.V1.SetSslCertificatesRegionTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSslCertificates, null, options, request);
      }
      /// <summary>
      /// Replaces SslCertificates for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetSslCertificatesAsync(global::Google.Cloud.Compute.V1.SetSslCertificatesRegionTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSslCertificatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Replaces SslCertificates for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetSslCertificatesAsync(global::Google.Cloud.Compute.V1.SetSslCertificatesRegionTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSslCertificates, null, options, request);
      }
      /// <summary>
      /// Changes the URL map for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetUrlMap(global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetUrlMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the URL map for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetUrlMap(global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetUrlMap, null, options, request);
      }
      /// <summary>
      /// Changes the URL map for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetUrlMapAsync(global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetUrlMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the URL map for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetUrlMapAsync(global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetUrlMap, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionTargetHttpsProxiesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionTargetHttpsProxiesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegionTargetHttpsProxiesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_SetSslCertificates, serviceImpl.SetSslCertificates)
          .AddMethod(__Method_SetUrlMap, serviceImpl.SetUrlMap).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegionTargetHttpsProxiesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteRegionTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRegionTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.TargetHttpsProxy>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertRegionTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRegionTargetHttpsProxiesRequest, global::Google.Cloud.Compute.V1.TargetHttpsProxyList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_SetSslCertificates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetSslCertificatesRegionTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetSslCertificates));
      serviceBinder.AddMethod(__Method_SetUrlMap, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetUrlMapRegionTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetUrlMap));
    }

  }
  /// <summary>
  /// The RegionUrlMaps API.
  /// </summary>
  public static partial class RegionUrlMaps
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.RegionUrlMaps";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteRegionUrlMapRequest> __Marshaller_google_cloud_compute_v1_DeleteRegionUrlMapRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteRegionUrlMapRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRegionUrlMapRequest> __Marshaller_google_cloud_compute_v1_GetRegionUrlMapRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRegionUrlMapRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UrlMap> __Marshaller_google_cloud_compute_v1_UrlMap = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UrlMap.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertRegionUrlMapRequest> __Marshaller_google_cloud_compute_v1_InsertRegionUrlMapRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertRegionUrlMapRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRegionUrlMapsRequest> __Marshaller_google_cloud_compute_v1_ListRegionUrlMapsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRegionUrlMapsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UrlMapList> __Marshaller_google_cloud_compute_v1_UrlMapList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UrlMapList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchRegionUrlMapRequest> __Marshaller_google_cloud_compute_v1_PatchRegionUrlMapRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchRegionUrlMapRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdateRegionUrlMapRequest> __Marshaller_google_cloud_compute_v1_UpdateRegionUrlMapRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdateRegionUrlMapRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ValidateRegionUrlMapRequest> __Marshaller_google_cloud_compute_v1_ValidateRegionUrlMapRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ValidateRegionUrlMapRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UrlMapsValidateResponse> __Marshaller_google_cloud_compute_v1_UrlMapsValidateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UrlMapsValidateResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionUrlMapRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteRegionUrlMapRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteRegionUrlMapRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRegionUrlMapRequest, global::Google.Cloud.Compute.V1.UrlMap> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRegionUrlMapRequest, global::Google.Cloud.Compute.V1.UrlMap>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRegionUrlMapRequest,
        __Marshaller_google_cloud_compute_v1_UrlMap);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionUrlMapRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertRegionUrlMapRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertRegionUrlMapRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRegionUrlMapsRequest, global::Google.Cloud.Compute.V1.UrlMapList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRegionUrlMapsRequest, global::Google.Cloud.Compute.V1.UrlMapList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRegionUrlMapsRequest,
        __Marshaller_google_cloud_compute_v1_UrlMapList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchRegionUrlMapRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchRegionUrlMapRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchRegionUrlMapRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdateRegionUrlMapRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Update = new grpc::Method<global::Google.Cloud.Compute.V1.UpdateRegionUrlMapRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_google_cloud_compute_v1_UpdateRegionUrlMapRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ValidateRegionUrlMapRequest, global::Google.Cloud.Compute.V1.UrlMapsValidateResponse> __Method_Validate = new grpc::Method<global::Google.Cloud.Compute.V1.ValidateRegionUrlMapRequest, global::Google.Cloud.Compute.V1.UrlMapsValidateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Validate",
        __Marshaller_google_cloud_compute_v1_ValidateRegionUrlMapRequest,
        __Marshaller_google_cloud_compute_v1_UrlMapsValidateResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[49]; }
    }

    /// <summary>Base class for server-side implementations of RegionUrlMaps</summary>
    [grpc::BindServiceMethod(typeof(RegionUrlMaps), "BindService")]
    public abstract partial class RegionUrlMapsBase
    {
      /// <summary>
      /// Deletes the specified UrlMap resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteRegionUrlMapRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.UrlMap> Get(global::Google.Cloud.Compute.V1.GetRegionUrlMapRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a UrlMap resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertRegionUrlMapRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of UrlMap resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.UrlMapList> List(global::Google.Cloud.Compute.V1.ListRegionUrlMapsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchRegionUrlMapRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified UrlMap resource with the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Update(global::Google.Cloud.Compute.V1.UpdateRegionUrlMapRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.UrlMapsValidateResponse> Validate(global::Google.Cloud.Compute.V1.ValidateRegionUrlMapRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegionUrlMaps</summary>
    public partial class RegionUrlMapsClient : grpc::ClientBase<RegionUrlMapsClient>
    {
      /// <summary>Creates a new client for RegionUrlMaps</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionUrlMapsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegionUrlMaps that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionUrlMapsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionUrlMapsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionUrlMapsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified UrlMap resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified UrlMap resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRegionUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified UrlMap resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified UrlMap resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRegionUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.UrlMap Get(global::Google.Cloud.Compute.V1.GetRegionUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.UrlMap Get(global::Google.Cloud.Compute.V1.GetRegionUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.UrlMap> GetAsync(global::Google.Cloud.Compute.V1.GetRegionUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.UrlMap> GetAsync(global::Google.Cloud.Compute.V1.GetRegionUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a UrlMap resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a UrlMap resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRegionUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a UrlMap resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a UrlMap resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRegionUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of UrlMap resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.UrlMapList List(global::Google.Cloud.Compute.V1.ListRegionUrlMapsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of UrlMap resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.UrlMapList List(global::Google.Cloud.Compute.V1.ListRegionUrlMapsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of UrlMap resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.UrlMapList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionUrlMapsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of UrlMap resources available to the specified project in the specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.UrlMapList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionUrlMapsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchRegionUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchRegionUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchRegionUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchRegionUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates the specified UrlMap resource with the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateRegionUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified UrlMap resource with the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateRegionUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Updates the specified UrlMap resource with the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateRegionUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified UrlMap resource with the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateRegionUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.UrlMapsValidateResponse Validate(global::Google.Cloud.Compute.V1.ValidateRegionUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Validate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.UrlMapsValidateResponse Validate(global::Google.Cloud.Compute.V1.ValidateRegionUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Validate, null, options, request);
      }
      /// <summary>
      /// Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.UrlMapsValidateResponse> ValidateAsync(global::Google.Cloud.Compute.V1.ValidateRegionUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.UrlMapsValidateResponse> ValidateAsync(global::Google.Cloud.Compute.V1.ValidateRegionUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Validate, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionUrlMapsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionUrlMapsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegionUrlMapsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_Validate, serviceImpl.Validate).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegionUrlMapsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteRegionUrlMapRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRegionUrlMapRequest, global::Google.Cloud.Compute.V1.UrlMap>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertRegionUrlMapRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRegionUrlMapsRequest, global::Google.Cloud.Compute.V1.UrlMapList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchRegionUrlMapRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdateRegionUrlMapRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Update));
      serviceBinder.AddMethod(__Method_Validate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ValidateRegionUrlMapRequest, global::Google.Cloud.Compute.V1.UrlMapsValidateResponse>(serviceImpl.Validate));
    }

  }
  /// <summary>
  /// The Regions API.
  /// </summary>
  public static partial class Regions
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.Regions";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRegionRequest> __Marshaller_google_cloud_compute_v1_GetRegionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRegionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Region> __Marshaller_google_cloud_compute_v1_Region = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Region.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRegionsRequest> __Marshaller_google_cloud_compute_v1_ListRegionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRegionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RegionList> __Marshaller_google_cloud_compute_v1_RegionList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RegionList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRegionRequest, global::Google.Cloud.Compute.V1.Region> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRegionRequest, global::Google.Cloud.Compute.V1.Region>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRegionRequest,
        __Marshaller_google_cloud_compute_v1_Region);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRegionsRequest, global::Google.Cloud.Compute.V1.RegionList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRegionsRequest, global::Google.Cloud.Compute.V1.RegionList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRegionsRequest,
        __Marshaller_google_cloud_compute_v1_RegionList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[50]; }
    }

    /// <summary>Base class for server-side implementations of Regions</summary>
    [grpc::BindServiceMethod(typeof(Regions), "BindService")]
    public abstract partial class RegionsBase
    {
      /// <summary>
      /// Returns the specified Region resource. Gets a list of available regions by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Region> Get(global::Google.Cloud.Compute.V1.GetRegionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of region resources available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.RegionList> List(global::Google.Cloud.Compute.V1.ListRegionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Regions</summary>
    public partial class RegionsClient : grpc::ClientBase<RegionsClient>
    {
      /// <summary>Creates a new client for Regions</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Regions that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns the specified Region resource. Gets a list of available regions by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Region Get(global::Google.Cloud.Compute.V1.GetRegionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified Region resource. Gets a list of available regions by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Region Get(global::Google.Cloud.Compute.V1.GetRegionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified Region resource. Gets a list of available regions by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Region> GetAsync(global::Google.Cloud.Compute.V1.GetRegionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified Region resource. Gets a list of available regions by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Region> GetAsync(global::Google.Cloud.Compute.V1.GetRegionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of region resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RegionList List(global::Google.Cloud.Compute.V1.ListRegionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of region resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RegionList List(global::Google.Cloud.Compute.V1.ListRegionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of region resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RegionList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of region resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RegionList> ListAsync(global::Google.Cloud.Compute.V1.ListRegionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegionsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegionsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRegionRequest, global::Google.Cloud.Compute.V1.Region>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRegionsRequest, global::Google.Cloud.Compute.V1.RegionList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The Reservations API.
  /// </summary>
  public static partial class Reservations
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.Reservations";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListReservationsRequest> __Marshaller_google_cloud_compute_v1_AggregatedListReservationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListReservationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ReservationAggregatedList> __Marshaller_google_cloud_compute_v1_ReservationAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ReservationAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteReservationRequest> __Marshaller_google_cloud_compute_v1_DeleteReservationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteReservationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetReservationRequest> __Marshaller_google_cloud_compute_v1_GetReservationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetReservationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Reservation> __Marshaller_google_cloud_compute_v1_Reservation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Reservation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetIamPolicyReservationRequest> __Marshaller_google_cloud_compute_v1_GetIamPolicyReservationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetIamPolicyReservationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Policy> __Marshaller_google_cloud_compute_v1_Policy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Policy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertReservationRequest> __Marshaller_google_cloud_compute_v1_InsertReservationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertReservationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListReservationsRequest> __Marshaller_google_cloud_compute_v1_ListReservationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListReservationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ReservationList> __Marshaller_google_cloud_compute_v1_ReservationList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ReservationList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ResizeReservationRequest> __Marshaller_google_cloud_compute_v1_ResizeReservationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ResizeReservationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetIamPolicyReservationRequest> __Marshaller_google_cloud_compute_v1_SetIamPolicyReservationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetIamPolicyReservationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestIamPermissionsReservationRequest> __Marshaller_google_cloud_compute_v1_TestIamPermissionsReservationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestIamPermissionsReservationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Marshaller_google_cloud_compute_v1_TestPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestPermissionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListReservationsRequest, global::Google.Cloud.Compute.V1.ReservationAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListReservationsRequest, global::Google.Cloud.Compute.V1.ReservationAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListReservationsRequest,
        __Marshaller_google_cloud_compute_v1_ReservationAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteReservationRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteReservationRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteReservationRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetReservationRequest, global::Google.Cloud.Compute.V1.Reservation> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetReservationRequest, global::Google.Cloud.Compute.V1.Reservation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetReservationRequest,
        __Marshaller_google_cloud_compute_v1_Reservation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyReservationRequest, global::Google.Cloud.Compute.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyReservationRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_cloud_compute_v1_GetIamPolicyReservationRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertReservationRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertReservationRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertReservationRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListReservationsRequest, global::Google.Cloud.Compute.V1.ReservationList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListReservationsRequest, global::Google.Cloud.Compute.V1.ReservationList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListReservationsRequest,
        __Marshaller_google_cloud_compute_v1_ReservationList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ResizeReservationRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Resize = new grpc::Method<global::Google.Cloud.Compute.V1.ResizeReservationRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Resize",
        __Marshaller_google_cloud_compute_v1_ResizeReservationRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyReservationRequest, global::Google.Cloud.Compute.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyReservationRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_cloud_compute_v1_SetIamPolicyReservationRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsReservationRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsReservationRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_cloud_compute_v1_TestIamPermissionsReservationRequest,
        __Marshaller_google_cloud_compute_v1_TestPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[51]; }
    }

    /// <summary>Base class for server-side implementations of Reservations</summary>
    [grpc::BindServiceMethod(typeof(Reservations), "BindService")]
    public abstract partial class ReservationsBase
    {
      /// <summary>
      /// Retrieves an aggregated list of reservations.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.ReservationAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListReservationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified reservation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteReservationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves information about the specified reservation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Reservation> Get(global::Google.Cloud.Compute.V1.GetReservationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyReservationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new reservation. For more information, read Reserving zonal resources.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertReservationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// A list of all the reservations that have been configured for the specified project in specified zone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.ReservationList> List(global::Google.Cloud.Compute.V1.ListReservationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Resizes the reservation (applicable to standalone reservations only). For more information, read Modifying reservations.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Resize(global::Google.Cloud.Compute.V1.ResizeReservationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyReservationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsReservationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Reservations</summary>
    public partial class ReservationsClient : grpc::ClientBase<ReservationsClient>
    {
      /// <summary>Creates a new client for Reservations</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ReservationsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Reservations that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ReservationsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ReservationsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ReservationsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of reservations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ReservationAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListReservationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of reservations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ReservationAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListReservationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of reservations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ReservationAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListReservationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of reservations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ReservationAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListReservationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified reservation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified reservation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified reservation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified reservation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Retrieves information about the specified reservation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Reservation Get(global::Google.Cloud.Compute.V1.GetReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves information about the specified reservation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Reservation Get(global::Google.Cloud.Compute.V1.GetReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves information about the specified reservation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Reservation> GetAsync(global::Google.Cloud.Compute.V1.GetReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves information about the specified reservation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Reservation> GetAsync(global::Google.Cloud.Compute.V1.GetReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Creates a new reservation. For more information, read Reserving zonal resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new reservation. For more information, read Reserving zonal resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a new reservation. For more information, read Reserving zonal resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new reservation. For more information, read Reserving zonal resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// A list of all the reservations that have been configured for the specified project in specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ReservationList List(global::Google.Cloud.Compute.V1.ListReservationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// A list of all the reservations that have been configured for the specified project in specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ReservationList List(global::Google.Cloud.Compute.V1.ListReservationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// A list of all the reservations that have been configured for the specified project in specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ReservationList> ListAsync(global::Google.Cloud.Compute.V1.ListReservationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// A list of all the reservations that have been configured for the specified project in specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ReservationList> ListAsync(global::Google.Cloud.Compute.V1.ListReservationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Resizes the reservation (applicable to standalone reservations only). For more information, read Modifying reservations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Resize(global::Google.Cloud.Compute.V1.ResizeReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Resize(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resizes the reservation (applicable to standalone reservations only). For more information, read Modifying reservations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Resize(global::Google.Cloud.Compute.V1.ResizeReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Resize, null, options, request);
      }
      /// <summary>
      /// Resizes the reservation (applicable to standalone reservations only). For more information, read Modifying reservations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> ResizeAsync(global::Google.Cloud.Compute.V1.ResizeReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResizeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resizes the reservation (applicable to standalone reservations only). For more information, read Modifying reservations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> ResizeAsync(global::Google.Cloud.Compute.V1.ResizeReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Resize, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ReservationsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ReservationsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ReservationsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Resize, serviceImpl.Resize)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ReservationsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListReservationsRequest, global::Google.Cloud.Compute.V1.ReservationAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteReservationRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetReservationRequest, global::Google.Cloud.Compute.V1.Reservation>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetIamPolicyReservationRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertReservationRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListReservationsRequest, global::Google.Cloud.Compute.V1.ReservationList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Resize, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ResizeReservationRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Resize));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetIamPolicyReservationRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.TestIamPermissionsReservationRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
  /// <summary>
  /// The ResourcePolicies API.
  /// </summary>
  public static partial class ResourcePolicies
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.ResourcePolicies";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListResourcePoliciesRequest> __Marshaller_google_cloud_compute_v1_AggregatedListResourcePoliciesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListResourcePoliciesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ResourcePolicyAggregatedList> __Marshaller_google_cloud_compute_v1_ResourcePolicyAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ResourcePolicyAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteResourcePolicyRequest> __Marshaller_google_cloud_compute_v1_DeleteResourcePolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteResourcePolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetResourcePolicyRequest> __Marshaller_google_cloud_compute_v1_GetResourcePolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetResourcePolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ResourcePolicy> __Marshaller_google_cloud_compute_v1_ResourcePolicy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ResourcePolicy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetIamPolicyResourcePolicyRequest> __Marshaller_google_cloud_compute_v1_GetIamPolicyResourcePolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetIamPolicyResourcePolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Policy> __Marshaller_google_cloud_compute_v1_Policy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Policy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertResourcePolicyRequest> __Marshaller_google_cloud_compute_v1_InsertResourcePolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertResourcePolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListResourcePoliciesRequest> __Marshaller_google_cloud_compute_v1_ListResourcePoliciesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListResourcePoliciesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ResourcePolicyList> __Marshaller_google_cloud_compute_v1_ResourcePolicyList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ResourcePolicyList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetIamPolicyResourcePolicyRequest> __Marshaller_google_cloud_compute_v1_SetIamPolicyResourcePolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetIamPolicyResourcePolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestIamPermissionsResourcePolicyRequest> __Marshaller_google_cloud_compute_v1_TestIamPermissionsResourcePolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestIamPermissionsResourcePolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Marshaller_google_cloud_compute_v1_TestPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestPermissionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListResourcePoliciesRequest, global::Google.Cloud.Compute.V1.ResourcePolicyAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListResourcePoliciesRequest, global::Google.Cloud.Compute.V1.ResourcePolicyAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListResourcePoliciesRequest,
        __Marshaller_google_cloud_compute_v1_ResourcePolicyAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteResourcePolicyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteResourcePolicyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteResourcePolicyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetResourcePolicyRequest, global::Google.Cloud.Compute.V1.ResourcePolicy> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetResourcePolicyRequest, global::Google.Cloud.Compute.V1.ResourcePolicy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetResourcePolicyRequest,
        __Marshaller_google_cloud_compute_v1_ResourcePolicy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyResourcePolicyRequest, global::Google.Cloud.Compute.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicyResourcePolicyRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_cloud_compute_v1_GetIamPolicyResourcePolicyRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertResourcePolicyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertResourcePolicyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertResourcePolicyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListResourcePoliciesRequest, global::Google.Cloud.Compute.V1.ResourcePolicyList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListResourcePoliciesRequest, global::Google.Cloud.Compute.V1.ResourcePolicyList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListResourcePoliciesRequest,
        __Marshaller_google_cloud_compute_v1_ResourcePolicyList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyResourcePolicyRequest, global::Google.Cloud.Compute.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicyResourcePolicyRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_cloud_compute_v1_SetIamPolicyResourcePolicyRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsResourcePolicyRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsResourcePolicyRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_cloud_compute_v1_TestIamPermissionsResourcePolicyRequest,
        __Marshaller_google_cloud_compute_v1_TestPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[52]; }
    }

    /// <summary>Base class for server-side implementations of ResourcePolicies</summary>
    [grpc::BindServiceMethod(typeof(ResourcePolicies), "BindService")]
    public abstract partial class ResourcePoliciesBase
    {
      /// <summary>
      /// Retrieves an aggregated list of resource policies.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.ResourcePolicyAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListResourcePoliciesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified resource policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteResourcePolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves all information of the specified resource policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.ResourcePolicy> Get(global::Google.Cloud.Compute.V1.GetResourcePolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyResourcePolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new resource policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertResourcePolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// A list all the resource policies that have been configured for the specified project in specified region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.ResourcePolicyList> List(global::Google.Cloud.Compute.V1.ListResourcePoliciesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyResourcePolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsResourcePolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ResourcePolicies</summary>
    public partial class ResourcePoliciesClient : grpc::ClientBase<ResourcePoliciesClient>
    {
      /// <summary>Creates a new client for ResourcePolicies</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ResourcePoliciesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ResourcePolicies that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ResourcePoliciesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ResourcePoliciesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ResourcePoliciesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of resource policies.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ResourcePolicyAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListResourcePoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of resource policies.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ResourcePolicyAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListResourcePoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of resource policies.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ResourcePolicyAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListResourcePoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of resource policies.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ResourcePolicyAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListResourcePoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified resource policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteResourcePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified resource policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteResourcePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified resource policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteResourcePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified resource policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteResourcePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Retrieves all information of the specified resource policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ResourcePolicy Get(global::Google.Cloud.Compute.V1.GetResourcePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all information of the specified resource policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ResourcePolicy Get(global::Google.Cloud.Compute.V1.GetResourcePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves all information of the specified resource policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ResourcePolicy> GetAsync(global::Google.Cloud.Compute.V1.GetResourcePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all information of the specified resource policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ResourcePolicy> GetAsync(global::Google.Cloud.Compute.V1.GetResourcePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyResourcePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicyResourcePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyResourcePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicyResourcePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Creates a new resource policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertResourcePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new resource policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertResourcePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a new resource policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertResourcePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new resource policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertResourcePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// A list all the resource policies that have been configured for the specified project in specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ResourcePolicyList List(global::Google.Cloud.Compute.V1.ListResourcePoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// A list all the resource policies that have been configured for the specified project in specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ResourcePolicyList List(global::Google.Cloud.Compute.V1.ListResourcePoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// A list all the resource policies that have been configured for the specified project in specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ResourcePolicyList> ListAsync(global::Google.Cloud.Compute.V1.ListResourcePoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// A list all the resource policies that have been configured for the specified project in specified region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ResourcePolicyList> ListAsync(global::Google.Cloud.Compute.V1.ListResourcePoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyResourcePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicyResourcePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyResourcePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicyResourcePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsResourcePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsResourcePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsResourcePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsResourcePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ResourcePoliciesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ResourcePoliciesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ResourcePoliciesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ResourcePoliciesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListResourcePoliciesRequest, global::Google.Cloud.Compute.V1.ResourcePolicyAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteResourcePolicyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetResourcePolicyRequest, global::Google.Cloud.Compute.V1.ResourcePolicy>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetIamPolicyResourcePolicyRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertResourcePolicyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListResourcePoliciesRequest, global::Google.Cloud.Compute.V1.ResourcePolicyList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetIamPolicyResourcePolicyRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.TestIamPermissionsResourcePolicyRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
  /// <summary>
  /// The Routers API.
  /// </summary>
  public static partial class Routers
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.Routers";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListRoutersRequest> __Marshaller_google_cloud_compute_v1_AggregatedListRoutersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListRoutersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RouterAggregatedList> __Marshaller_google_cloud_compute_v1_RouterAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RouterAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteRouterRequest> __Marshaller_google_cloud_compute_v1_DeleteRouterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteRouterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRouterRequest> __Marshaller_google_cloud_compute_v1_GetRouterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRouterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Router> __Marshaller_google_cloud_compute_v1_Router = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Router.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetNatMappingInfoRoutersRequest> __Marshaller_google_cloud_compute_v1_GetNatMappingInfoRoutersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetNatMappingInfoRoutersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.VmEndpointNatMappingsList> __Marshaller_google_cloud_compute_v1_VmEndpointNatMappingsList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.VmEndpointNatMappingsList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRouterStatusRouterRequest> __Marshaller_google_cloud_compute_v1_GetRouterStatusRouterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRouterStatusRouterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RouterStatusResponse> __Marshaller_google_cloud_compute_v1_RouterStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RouterStatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertRouterRequest> __Marshaller_google_cloud_compute_v1_InsertRouterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertRouterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRoutersRequest> __Marshaller_google_cloud_compute_v1_ListRoutersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRoutersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RouterList> __Marshaller_google_cloud_compute_v1_RouterList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RouterList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchRouterRequest> __Marshaller_google_cloud_compute_v1_PatchRouterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchRouterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PreviewRouterRequest> __Marshaller_google_cloud_compute_v1_PreviewRouterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PreviewRouterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RoutersPreviewResponse> __Marshaller_google_cloud_compute_v1_RoutersPreviewResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RoutersPreviewResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdateRouterRequest> __Marshaller_google_cloud_compute_v1_UpdateRouterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdateRouterRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListRoutersRequest, global::Google.Cloud.Compute.V1.RouterAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListRoutersRequest, global::Google.Cloud.Compute.V1.RouterAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListRoutersRequest,
        __Marshaller_google_cloud_compute_v1_RouterAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteRouterRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteRouterRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteRouterRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRouterRequest, global::Google.Cloud.Compute.V1.Router> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRouterRequest, global::Google.Cloud.Compute.V1.Router>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRouterRequest,
        __Marshaller_google_cloud_compute_v1_Router);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetNatMappingInfoRoutersRequest, global::Google.Cloud.Compute.V1.VmEndpointNatMappingsList> __Method_GetNatMappingInfo = new grpc::Method<global::Google.Cloud.Compute.V1.GetNatMappingInfoRoutersRequest, global::Google.Cloud.Compute.V1.VmEndpointNatMappingsList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNatMappingInfo",
        __Marshaller_google_cloud_compute_v1_GetNatMappingInfoRoutersRequest,
        __Marshaller_google_cloud_compute_v1_VmEndpointNatMappingsList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRouterStatusRouterRequest, global::Google.Cloud.Compute.V1.RouterStatusResponse> __Method_GetRouterStatus = new grpc::Method<global::Google.Cloud.Compute.V1.GetRouterStatusRouterRequest, global::Google.Cloud.Compute.V1.RouterStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRouterStatus",
        __Marshaller_google_cloud_compute_v1_GetRouterStatusRouterRequest,
        __Marshaller_google_cloud_compute_v1_RouterStatusResponse);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertRouterRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertRouterRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertRouterRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRoutersRequest, global::Google.Cloud.Compute.V1.RouterList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRoutersRequest, global::Google.Cloud.Compute.V1.RouterList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRoutersRequest,
        __Marshaller_google_cloud_compute_v1_RouterList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchRouterRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchRouterRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchRouterRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PreviewRouterRequest, global::Google.Cloud.Compute.V1.RoutersPreviewResponse> __Method_Preview = new grpc::Method<global::Google.Cloud.Compute.V1.PreviewRouterRequest, global::Google.Cloud.Compute.V1.RoutersPreviewResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Preview",
        __Marshaller_google_cloud_compute_v1_PreviewRouterRequest,
        __Marshaller_google_cloud_compute_v1_RoutersPreviewResponse);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdateRouterRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Update = new grpc::Method<global::Google.Cloud.Compute.V1.UpdateRouterRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_google_cloud_compute_v1_UpdateRouterRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[53]; }
    }

    /// <summary>Base class for server-side implementations of Routers</summary>
    [grpc::BindServiceMethod(typeof(Routers), "BindService")]
    public abstract partial class RoutersBase
    {
      /// <summary>
      /// Retrieves an aggregated list of routers.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.RouterAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListRoutersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified Router resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteRouterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified Router resource. Gets a list of available routers by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Router> Get(global::Google.Cloud.Compute.V1.GetRouterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves runtime Nat mapping information of VM endpoints.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.VmEndpointNatMappingsList> GetNatMappingInfo(global::Google.Cloud.Compute.V1.GetNatMappingInfoRoutersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves runtime information of the specified router.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.RouterStatusResponse> GetRouterStatus(global::Google.Cloud.Compute.V1.GetRouterStatusRouterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a Router resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertRouterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of Router resources available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.RouterList> List(global::Google.Cloud.Compute.V1.ListRoutersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchRouterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Preview fields auto-generated during router create and update operations. Calling this method does NOT create or update the router.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.RoutersPreviewResponse> Preview(global::Google.Cloud.Compute.V1.PreviewRouterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified Router resource with the data included in the request. This method conforms to PUT semantics, which requests that the state of the target resource be created or replaced with the state defined by the representation enclosed in the request message payload.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Update(global::Google.Cloud.Compute.V1.UpdateRouterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Routers</summary>
    public partial class RoutersClient : grpc::ClientBase<RoutersClient>
    {
      /// <summary>Creates a new client for Routers</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RoutersClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Routers that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RoutersClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RoutersClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RoutersClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of routers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RouterAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListRoutersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of routers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RouterAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListRoutersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of routers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RouterAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListRoutersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of routers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RouterAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListRoutersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified Router resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRouterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified Router resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRouterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified Router resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRouterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified Router resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRouterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified Router resource. Gets a list of available routers by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Router Get(global::Google.Cloud.Compute.V1.GetRouterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified Router resource. Gets a list of available routers by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Router Get(global::Google.Cloud.Compute.V1.GetRouterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified Router resource. Gets a list of available routers by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Router> GetAsync(global::Google.Cloud.Compute.V1.GetRouterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified Router resource. Gets a list of available routers by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Router> GetAsync(global::Google.Cloud.Compute.V1.GetRouterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves runtime Nat mapping information of VM endpoints.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.VmEndpointNatMappingsList GetNatMappingInfo(global::Google.Cloud.Compute.V1.GetNatMappingInfoRoutersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNatMappingInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves runtime Nat mapping information of VM endpoints.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.VmEndpointNatMappingsList GetNatMappingInfo(global::Google.Cloud.Compute.V1.GetNatMappingInfoRoutersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNatMappingInfo, null, options, request);
      }
      /// <summary>
      /// Retrieves runtime Nat mapping information of VM endpoints.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.VmEndpointNatMappingsList> GetNatMappingInfoAsync(global::Google.Cloud.Compute.V1.GetNatMappingInfoRoutersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNatMappingInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves runtime Nat mapping information of VM endpoints.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.VmEndpointNatMappingsList> GetNatMappingInfoAsync(global::Google.Cloud.Compute.V1.GetNatMappingInfoRoutersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNatMappingInfo, null, options, request);
      }
      /// <summary>
      /// Retrieves runtime information of the specified router.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RouterStatusResponse GetRouterStatus(global::Google.Cloud.Compute.V1.GetRouterStatusRouterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRouterStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves runtime information of the specified router.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RouterStatusResponse GetRouterStatus(global::Google.Cloud.Compute.V1.GetRouterStatusRouterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRouterStatus, null, options, request);
      }
      /// <summary>
      /// Retrieves runtime information of the specified router.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RouterStatusResponse> GetRouterStatusAsync(global::Google.Cloud.Compute.V1.GetRouterStatusRouterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRouterStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves runtime information of the specified router.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RouterStatusResponse> GetRouterStatusAsync(global::Google.Cloud.Compute.V1.GetRouterStatusRouterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRouterStatus, null, options, request);
      }
      /// <summary>
      /// Creates a Router resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRouterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Router resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRouterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a Router resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRouterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Router resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRouterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of Router resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RouterList List(global::Google.Cloud.Compute.V1.ListRoutersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of Router resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RouterList List(global::Google.Cloud.Compute.V1.ListRoutersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of Router resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RouterList> ListAsync(global::Google.Cloud.Compute.V1.ListRoutersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of Router resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RouterList> ListAsync(global::Google.Cloud.Compute.V1.ListRoutersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Patches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchRouterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchRouterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Patches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchRouterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchRouterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Preview fields auto-generated during router create and update operations. Calling this method does NOT create or update the router.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RoutersPreviewResponse Preview(global::Google.Cloud.Compute.V1.PreviewRouterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Preview(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Preview fields auto-generated during router create and update operations. Calling this method does NOT create or update the router.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RoutersPreviewResponse Preview(global::Google.Cloud.Compute.V1.PreviewRouterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Preview, null, options, request);
      }
      /// <summary>
      /// Preview fields auto-generated during router create and update operations. Calling this method does NOT create or update the router.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RoutersPreviewResponse> PreviewAsync(global::Google.Cloud.Compute.V1.PreviewRouterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PreviewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Preview fields auto-generated during router create and update operations. Calling this method does NOT create or update the router.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RoutersPreviewResponse> PreviewAsync(global::Google.Cloud.Compute.V1.PreviewRouterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Preview, null, options, request);
      }
      /// <summary>
      /// Updates the specified Router resource with the data included in the request. This method conforms to PUT semantics, which requests that the state of the target resource be created or replaced with the state defined by the representation enclosed in the request message payload.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateRouterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified Router resource with the data included in the request. This method conforms to PUT semantics, which requests that the state of the target resource be created or replaced with the state defined by the representation enclosed in the request message payload.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateRouterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Updates the specified Router resource with the data included in the request. This method conforms to PUT semantics, which requests that the state of the target resource be created or replaced with the state defined by the representation enclosed in the request message payload.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateRouterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified Router resource with the data included in the request. This method conforms to PUT semantics, which requests that the state of the target resource be created or replaced with the state defined by the representation enclosed in the request message payload.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateRouterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RoutersClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RoutersClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RoutersBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetNatMappingInfo, serviceImpl.GetNatMappingInfo)
          .AddMethod(__Method_GetRouterStatus, serviceImpl.GetRouterStatus)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_Preview, serviceImpl.Preview)
          .AddMethod(__Method_Update, serviceImpl.Update).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RoutersBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListRoutersRequest, global::Google.Cloud.Compute.V1.RouterAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteRouterRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRouterRequest, global::Google.Cloud.Compute.V1.Router>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetNatMappingInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetNatMappingInfoRoutersRequest, global::Google.Cloud.Compute.V1.VmEndpointNatMappingsList>(serviceImpl.GetNatMappingInfo));
      serviceBinder.AddMethod(__Method_GetRouterStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRouterStatusRouterRequest, global::Google.Cloud.Compute.V1.RouterStatusResponse>(serviceImpl.GetRouterStatus));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertRouterRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRoutersRequest, global::Google.Cloud.Compute.V1.RouterList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchRouterRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_Preview, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PreviewRouterRequest, global::Google.Cloud.Compute.V1.RoutersPreviewResponse>(serviceImpl.Preview));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdateRouterRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Update));
    }

  }
  /// <summary>
  /// The Routes API.
  /// </summary>
  public static partial class Routes
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.Routes";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteRouteRequest> __Marshaller_google_cloud_compute_v1_DeleteRouteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteRouteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRouteRequest> __Marshaller_google_cloud_compute_v1_GetRouteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRouteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Route> __Marshaller_google_cloud_compute_v1_Route = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Route.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertRouteRequest> __Marshaller_google_cloud_compute_v1_InsertRouteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertRouteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListRoutesRequest> __Marshaller_google_cloud_compute_v1_ListRoutesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListRoutesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RouteList> __Marshaller_google_cloud_compute_v1_RouteList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RouteList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteRouteRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteRouteRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteRouteRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRouteRequest, global::Google.Cloud.Compute.V1.Route> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetRouteRequest, global::Google.Cloud.Compute.V1.Route>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetRouteRequest,
        __Marshaller_google_cloud_compute_v1_Route);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertRouteRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertRouteRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertRouteRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListRoutesRequest, global::Google.Cloud.Compute.V1.RouteList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListRoutesRequest, global::Google.Cloud.Compute.V1.RouteList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListRoutesRequest,
        __Marshaller_google_cloud_compute_v1_RouteList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[54]; }
    }

    /// <summary>Base class for server-side implementations of Routes</summary>
    [grpc::BindServiceMethod(typeof(Routes), "BindService")]
    public abstract partial class RoutesBase
    {
      /// <summary>
      /// Deletes the specified Route resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteRouteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified Route resource. Gets a list of available routes by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Route> Get(global::Google.Cloud.Compute.V1.GetRouteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a Route resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertRouteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of Route resources available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.RouteList> List(global::Google.Cloud.Compute.V1.ListRoutesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Routes</summary>
    public partial class RoutesClient : grpc::ClientBase<RoutesClient>
    {
      /// <summary>Creates a new client for Routes</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RoutesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Routes that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RoutesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RoutesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RoutesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified Route resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRouteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified Route resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteRouteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified Route resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRouteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified Route resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteRouteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified Route resource. Gets a list of available routes by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Route Get(global::Google.Cloud.Compute.V1.GetRouteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified Route resource. Gets a list of available routes by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Route Get(global::Google.Cloud.Compute.V1.GetRouteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified Route resource. Gets a list of available routes by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Route> GetAsync(global::Google.Cloud.Compute.V1.GetRouteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified Route resource. Gets a list of available routes by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Route> GetAsync(global::Google.Cloud.Compute.V1.GetRouteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a Route resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRouteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Route resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertRouteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a Route resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRouteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Route resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertRouteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of Route resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RouteList List(global::Google.Cloud.Compute.V1.ListRoutesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of Route resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.RouteList List(global::Google.Cloud.Compute.V1.ListRoutesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of Route resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RouteList> ListAsync(global::Google.Cloud.Compute.V1.ListRoutesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of Route resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.RouteList> ListAsync(global::Google.Cloud.Compute.V1.ListRoutesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RoutesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RoutesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RoutesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RoutesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteRouteRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRouteRequest, global::Google.Cloud.Compute.V1.Route>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertRouteRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListRoutesRequest, global::Google.Cloud.Compute.V1.RouteList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The SecurityPolicies API.
  /// </summary>
  public static partial class SecurityPolicies
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.SecurityPolicies";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AddRuleSecurityPolicyRequest> __Marshaller_google_cloud_compute_v1_AddRuleSecurityPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AddRuleSecurityPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteSecurityPolicyRequest> __Marshaller_google_cloud_compute_v1_DeleteSecurityPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteSecurityPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetSecurityPolicyRequest> __Marshaller_google_cloud_compute_v1_GetSecurityPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetSecurityPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SecurityPolicy> __Marshaller_google_cloud_compute_v1_SecurityPolicy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SecurityPolicy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetRuleSecurityPolicyRequest> __Marshaller_google_cloud_compute_v1_GetRuleSecurityPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetRuleSecurityPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SecurityPolicyRule> __Marshaller_google_cloud_compute_v1_SecurityPolicyRule = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SecurityPolicyRule.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertSecurityPolicyRequest> __Marshaller_google_cloud_compute_v1_InsertSecurityPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertSecurityPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListSecurityPoliciesRequest> __Marshaller_google_cloud_compute_v1_ListSecurityPoliciesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListSecurityPoliciesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SecurityPolicyList> __Marshaller_google_cloud_compute_v1_SecurityPolicyList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SecurityPolicyList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListPreconfiguredExpressionSetsSecurityPoliciesRequest> __Marshaller_google_cloud_compute_v1_ListPreconfiguredExpressionSetsSecurityPoliciesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListPreconfiguredExpressionSetsSecurityPoliciesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SecurityPoliciesListPreconfiguredExpressionSetsResponse> __Marshaller_google_cloud_compute_v1_SecurityPoliciesListPreconfiguredExpressionSetsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SecurityPoliciesListPreconfiguredExpressionSetsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchSecurityPolicyRequest> __Marshaller_google_cloud_compute_v1_PatchSecurityPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchSecurityPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchRuleSecurityPolicyRequest> __Marshaller_google_cloud_compute_v1_PatchRuleSecurityPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchRuleSecurityPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RemoveRuleSecurityPolicyRequest> __Marshaller_google_cloud_compute_v1_RemoveRuleSecurityPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RemoveRuleSecurityPolicyRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AddRuleSecurityPolicyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_AddRule = new grpc::Method<global::Google.Cloud.Compute.V1.AddRuleSecurityPolicyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddRule",
        __Marshaller_google_cloud_compute_v1_AddRuleSecurityPolicyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteSecurityPolicyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteSecurityPolicyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteSecurityPolicyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetSecurityPolicyRequest, global::Google.Cloud.Compute.V1.SecurityPolicy> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetSecurityPolicyRequest, global::Google.Cloud.Compute.V1.SecurityPolicy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetSecurityPolicyRequest,
        __Marshaller_google_cloud_compute_v1_SecurityPolicy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetRuleSecurityPolicyRequest, global::Google.Cloud.Compute.V1.SecurityPolicyRule> __Method_GetRule = new grpc::Method<global::Google.Cloud.Compute.V1.GetRuleSecurityPolicyRequest, global::Google.Cloud.Compute.V1.SecurityPolicyRule>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRule",
        __Marshaller_google_cloud_compute_v1_GetRuleSecurityPolicyRequest,
        __Marshaller_google_cloud_compute_v1_SecurityPolicyRule);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertSecurityPolicyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertSecurityPolicyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertSecurityPolicyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListSecurityPoliciesRequest, global::Google.Cloud.Compute.V1.SecurityPolicyList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListSecurityPoliciesRequest, global::Google.Cloud.Compute.V1.SecurityPolicyList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListSecurityPoliciesRequest,
        __Marshaller_google_cloud_compute_v1_SecurityPolicyList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListPreconfiguredExpressionSetsSecurityPoliciesRequest, global::Google.Cloud.Compute.V1.SecurityPoliciesListPreconfiguredExpressionSetsResponse> __Method_ListPreconfiguredExpressionSets = new grpc::Method<global::Google.Cloud.Compute.V1.ListPreconfiguredExpressionSetsSecurityPoliciesRequest, global::Google.Cloud.Compute.V1.SecurityPoliciesListPreconfiguredExpressionSetsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPreconfiguredExpressionSets",
        __Marshaller_google_cloud_compute_v1_ListPreconfiguredExpressionSetsSecurityPoliciesRequest,
        __Marshaller_google_cloud_compute_v1_SecurityPoliciesListPreconfiguredExpressionSetsResponse);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchSecurityPolicyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchSecurityPolicyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchSecurityPolicyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchRuleSecurityPolicyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_PatchRule = new grpc::Method<global::Google.Cloud.Compute.V1.PatchRuleSecurityPolicyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchRule",
        __Marshaller_google_cloud_compute_v1_PatchRuleSecurityPolicyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.RemoveRuleSecurityPolicyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_RemoveRule = new grpc::Method<global::Google.Cloud.Compute.V1.RemoveRuleSecurityPolicyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveRule",
        __Marshaller_google_cloud_compute_v1_RemoveRuleSecurityPolicyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[55]; }
    }

    /// <summary>Base class for server-side implementations of SecurityPolicies</summary>
    [grpc::BindServiceMethod(typeof(SecurityPolicies), "BindService")]
    public abstract partial class SecurityPoliciesBase
    {
      /// <summary>
      /// Inserts a rule into a security policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> AddRule(global::Google.Cloud.Compute.V1.AddRuleSecurityPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteSecurityPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all of the ordered rules present in a single specified policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.SecurityPolicy> Get(global::Google.Cloud.Compute.V1.GetSecurityPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a rule at the specified priority.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.SecurityPolicyRule> GetRule(global::Google.Cloud.Compute.V1.GetRuleSecurityPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new policy in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertSecurityPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the policies that have been configured for the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.SecurityPolicyList> List(global::Google.Cloud.Compute.V1.ListSecurityPoliciesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the current list of preconfigured Web Application Firewall (WAF) expressions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.SecurityPoliciesListPreconfiguredExpressionSetsResponse> ListPreconfiguredExpressionSets(global::Google.Cloud.Compute.V1.ListPreconfiguredExpressionSetsSecurityPoliciesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patches the specified policy with the data included in the request. This cannot be used to be update the rules in the policy. Please use the per rule methods like addRule, patchRule, and removeRule instead.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchSecurityPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patches a rule at the specified priority.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> PatchRule(global::Google.Cloud.Compute.V1.PatchRuleSecurityPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a rule at the specified priority.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> RemoveRule(global::Google.Cloud.Compute.V1.RemoveRuleSecurityPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SecurityPolicies</summary>
    public partial class SecurityPoliciesClient : grpc::ClientBase<SecurityPoliciesClient>
    {
      /// <summary>Creates a new client for SecurityPolicies</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SecurityPoliciesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SecurityPolicies that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SecurityPoliciesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SecurityPoliciesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SecurityPoliciesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Inserts a rule into a security policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddRule(global::Google.Cloud.Compute.V1.AddRuleSecurityPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddRule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts a rule into a security policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddRule(global::Google.Cloud.Compute.V1.AddRuleSecurityPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddRule, null, options, request);
      }
      /// <summary>
      /// Inserts a rule into a security policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddRuleAsync(global::Google.Cloud.Compute.V1.AddRuleSecurityPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddRuleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts a rule into a security policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddRuleAsync(global::Google.Cloud.Compute.V1.AddRuleSecurityPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddRule, null, options, request);
      }
      /// <summary>
      /// Deletes the specified policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteSecurityPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteSecurityPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteSecurityPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteSecurityPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// List all of the ordered rules present in a single specified policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SecurityPolicy Get(global::Google.Cloud.Compute.V1.GetSecurityPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all of the ordered rules present in a single specified policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SecurityPolicy Get(global::Google.Cloud.Compute.V1.GetSecurityPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// List all of the ordered rules present in a single specified policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SecurityPolicy> GetAsync(global::Google.Cloud.Compute.V1.GetSecurityPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all of the ordered rules present in a single specified policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SecurityPolicy> GetAsync(global::Google.Cloud.Compute.V1.GetSecurityPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Gets a rule at the specified priority.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SecurityPolicyRule GetRule(global::Google.Cloud.Compute.V1.GetRuleSecurityPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a rule at the specified priority.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SecurityPolicyRule GetRule(global::Google.Cloud.Compute.V1.GetRuleSecurityPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRule, null, options, request);
      }
      /// <summary>
      /// Gets a rule at the specified priority.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SecurityPolicyRule> GetRuleAsync(global::Google.Cloud.Compute.V1.GetRuleSecurityPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRuleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a rule at the specified priority.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SecurityPolicyRule> GetRuleAsync(global::Google.Cloud.Compute.V1.GetRuleSecurityPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRule, null, options, request);
      }
      /// <summary>
      /// Creates a new policy in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertSecurityPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new policy in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertSecurityPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a new policy in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertSecurityPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new policy in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertSecurityPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// List all the policies that have been configured for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SecurityPolicyList List(global::Google.Cloud.Compute.V1.ListSecurityPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the policies that have been configured for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SecurityPolicyList List(global::Google.Cloud.Compute.V1.ListSecurityPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// List all the policies that have been configured for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SecurityPolicyList> ListAsync(global::Google.Cloud.Compute.V1.ListSecurityPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the policies that have been configured for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SecurityPolicyList> ListAsync(global::Google.Cloud.Compute.V1.ListSecurityPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Gets the current list of preconfigured Web Application Firewall (WAF) expressions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SecurityPoliciesListPreconfiguredExpressionSetsResponse ListPreconfiguredExpressionSets(global::Google.Cloud.Compute.V1.ListPreconfiguredExpressionSetsSecurityPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPreconfiguredExpressionSets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the current list of preconfigured Web Application Firewall (WAF) expressions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SecurityPoliciesListPreconfiguredExpressionSetsResponse ListPreconfiguredExpressionSets(global::Google.Cloud.Compute.V1.ListPreconfiguredExpressionSetsSecurityPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPreconfiguredExpressionSets, null, options, request);
      }
      /// <summary>
      /// Gets the current list of preconfigured Web Application Firewall (WAF) expressions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SecurityPoliciesListPreconfiguredExpressionSetsResponse> ListPreconfiguredExpressionSetsAsync(global::Google.Cloud.Compute.V1.ListPreconfiguredExpressionSetsSecurityPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPreconfiguredExpressionSetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the current list of preconfigured Web Application Firewall (WAF) expressions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SecurityPoliciesListPreconfiguredExpressionSetsResponse> ListPreconfiguredExpressionSetsAsync(global::Google.Cloud.Compute.V1.ListPreconfiguredExpressionSetsSecurityPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPreconfiguredExpressionSets, null, options, request);
      }
      /// <summary>
      /// Patches the specified policy with the data included in the request. This cannot be used to be update the rules in the policy. Please use the per rule methods like addRule, patchRule, and removeRule instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchSecurityPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified policy with the data included in the request. This cannot be used to be update the rules in the policy. Please use the per rule methods like addRule, patchRule, and removeRule instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchSecurityPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Patches the specified policy with the data included in the request. This cannot be used to be update the rules in the policy. Please use the per rule methods like addRule, patchRule, and removeRule instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchSecurityPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified policy with the data included in the request. This cannot be used to be update the rules in the policy. Please use the per rule methods like addRule, patchRule, and removeRule instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchSecurityPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Patches a rule at the specified priority.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation PatchRule(global::Google.Cloud.Compute.V1.PatchRuleSecurityPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchRule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches a rule at the specified priority.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation PatchRule(global::Google.Cloud.Compute.V1.PatchRuleSecurityPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchRule, null, options, request);
      }
      /// <summary>
      /// Patches a rule at the specified priority.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchRuleAsync(global::Google.Cloud.Compute.V1.PatchRuleSecurityPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchRuleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches a rule at the specified priority.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchRuleAsync(global::Google.Cloud.Compute.V1.PatchRuleSecurityPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchRule, null, options, request);
      }
      /// <summary>
      /// Deletes a rule at the specified priority.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RemoveRule(global::Google.Cloud.Compute.V1.RemoveRuleSecurityPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveRule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a rule at the specified priority.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RemoveRule(global::Google.Cloud.Compute.V1.RemoveRuleSecurityPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveRule, null, options, request);
      }
      /// <summary>
      /// Deletes a rule at the specified priority.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RemoveRuleAsync(global::Google.Cloud.Compute.V1.RemoveRuleSecurityPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveRuleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a rule at the specified priority.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RemoveRuleAsync(global::Google.Cloud.Compute.V1.RemoveRuleSecurityPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveRule, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SecurityPoliciesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SecurityPoliciesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SecurityPoliciesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddRule, serviceImpl.AddRule)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetRule, serviceImpl.GetRule)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_ListPreconfiguredExpressionSets, serviceImpl.ListPreconfiguredExpressionSets)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_PatchRule, serviceImpl.PatchRule)
          .AddMethod(__Method_RemoveRule, serviceImpl.RemoveRule).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SecurityPoliciesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddRule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AddRuleSecurityPolicyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.AddRule));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteSecurityPolicyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetSecurityPolicyRequest, global::Google.Cloud.Compute.V1.SecurityPolicy>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetRule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetRuleSecurityPolicyRequest, global::Google.Cloud.Compute.V1.SecurityPolicyRule>(serviceImpl.GetRule));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertSecurityPolicyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListSecurityPoliciesRequest, global::Google.Cloud.Compute.V1.SecurityPolicyList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_ListPreconfiguredExpressionSets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListPreconfiguredExpressionSetsSecurityPoliciesRequest, global::Google.Cloud.Compute.V1.SecurityPoliciesListPreconfiguredExpressionSetsResponse>(serviceImpl.ListPreconfiguredExpressionSets));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchSecurityPolicyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_PatchRule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchRuleSecurityPolicyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.PatchRule));
      serviceBinder.AddMethod(__Method_RemoveRule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.RemoveRuleSecurityPolicyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.RemoveRule));
    }

  }
  /// <summary>
  /// The Snapshots API.
  /// </summary>
  public static partial class Snapshots
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.Snapshots";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteSnapshotRequest> __Marshaller_google_cloud_compute_v1_DeleteSnapshotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteSnapshotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetSnapshotRequest> __Marshaller_google_cloud_compute_v1_GetSnapshotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetSnapshotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Snapshot> __Marshaller_google_cloud_compute_v1_Snapshot = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Snapshot.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetIamPolicySnapshotRequest> __Marshaller_google_cloud_compute_v1_GetIamPolicySnapshotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetIamPolicySnapshotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Policy> __Marshaller_google_cloud_compute_v1_Policy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Policy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListSnapshotsRequest> __Marshaller_google_cloud_compute_v1_ListSnapshotsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListSnapshotsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SnapshotList> __Marshaller_google_cloud_compute_v1_SnapshotList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SnapshotList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetIamPolicySnapshotRequest> __Marshaller_google_cloud_compute_v1_SetIamPolicySnapshotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetIamPolicySnapshotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetLabelsSnapshotRequest> __Marshaller_google_cloud_compute_v1_SetLabelsSnapshotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetLabelsSnapshotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestIamPermissionsSnapshotRequest> __Marshaller_google_cloud_compute_v1_TestIamPermissionsSnapshotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestIamPermissionsSnapshotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Marshaller_google_cloud_compute_v1_TestPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestPermissionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteSnapshotRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteSnapshotRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteSnapshotRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetSnapshotRequest, global::Google.Cloud.Compute.V1.Snapshot> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetSnapshotRequest, global::Google.Cloud.Compute.V1.Snapshot>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetSnapshotRequest,
        __Marshaller_google_cloud_compute_v1_Snapshot);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicySnapshotRequest, global::Google.Cloud.Compute.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicySnapshotRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_cloud_compute_v1_GetIamPolicySnapshotRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListSnapshotsRequest, global::Google.Cloud.Compute.V1.SnapshotList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListSnapshotsRequest, global::Google.Cloud.Compute.V1.SnapshotList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListSnapshotsRequest,
        __Marshaller_google_cloud_compute_v1_SnapshotList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicySnapshotRequest, global::Google.Cloud.Compute.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicySnapshotRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_cloud_compute_v1_SetIamPolicySnapshotRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetLabelsSnapshotRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetLabels = new grpc::Method<global::Google.Cloud.Compute.V1.SetLabelsSnapshotRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetLabels",
        __Marshaller_google_cloud_compute_v1_SetLabelsSnapshotRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsSnapshotRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsSnapshotRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_cloud_compute_v1_TestIamPermissionsSnapshotRequest,
        __Marshaller_google_cloud_compute_v1_TestPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[56]; }
    }

    /// <summary>Base class for server-side implementations of Snapshots</summary>
    [grpc::BindServiceMethod(typeof(Snapshots), "BindService")]
    public abstract partial class SnapshotsBase
    {
      /// <summary>
      /// Deletes the specified Snapshot resource. Keep in mind that deleting a single snapshot might not necessarily delete all the data on that snapshot. If any data on the snapshot that is marked for deletion is needed for subsequent snapshots, the data will be moved to the next corresponding snapshot.
      ///
      /// For more information, see Deleting snapshots.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified Snapshot resource. Gets a list of available snapshots by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Snapshot> Get(global::Google.Cloud.Compute.V1.GetSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicySnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of Snapshot resources contained within the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.SnapshotList> List(global::Google.Cloud.Compute.V1.ListSnapshotsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicySnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the labels on a snapshot. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetLabels(global::Google.Cloud.Compute.V1.SetLabelsSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Snapshots</summary>
    public partial class SnapshotsClient : grpc::ClientBase<SnapshotsClient>
    {
      /// <summary>Creates a new client for Snapshots</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SnapshotsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Snapshots that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SnapshotsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SnapshotsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SnapshotsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified Snapshot resource. Keep in mind that deleting a single snapshot might not necessarily delete all the data on that snapshot. If any data on the snapshot that is marked for deletion is needed for subsequent snapshots, the data will be moved to the next corresponding snapshot.
      ///
      /// For more information, see Deleting snapshots.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified Snapshot resource. Keep in mind that deleting a single snapshot might not necessarily delete all the data on that snapshot. If any data on the snapshot that is marked for deletion is needed for subsequent snapshots, the data will be moved to the next corresponding snapshot.
      ///
      /// For more information, see Deleting snapshots.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified Snapshot resource. Keep in mind that deleting a single snapshot might not necessarily delete all the data on that snapshot. If any data on the snapshot that is marked for deletion is needed for subsequent snapshots, the data will be moved to the next corresponding snapshot.
      ///
      /// For more information, see Deleting snapshots.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified Snapshot resource. Keep in mind that deleting a single snapshot might not necessarily delete all the data on that snapshot. If any data on the snapshot that is marked for deletion is needed for subsequent snapshots, the data will be moved to the next corresponding snapshot.
      ///
      /// For more information, see Deleting snapshots.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified Snapshot resource. Gets a list of available snapshots by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Snapshot Get(global::Google.Cloud.Compute.V1.GetSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified Snapshot resource. Gets a list of available snapshots by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Snapshot Get(global::Google.Cloud.Compute.V1.GetSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified Snapshot resource. Gets a list of available snapshots by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Snapshot> GetAsync(global::Google.Cloud.Compute.V1.GetSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified Snapshot resource. Gets a list of available snapshots by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Snapshot> GetAsync(global::Google.Cloud.Compute.V1.GetSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicySnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicySnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicySnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicySnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of Snapshot resources contained within the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SnapshotList List(global::Google.Cloud.Compute.V1.ListSnapshotsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of Snapshot resources contained within the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SnapshotList List(global::Google.Cloud.Compute.V1.ListSnapshotsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of Snapshot resources contained within the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SnapshotList> ListAsync(global::Google.Cloud.Compute.V1.ListSnapshotsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of Snapshot resources contained within the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SnapshotList> ListAsync(global::Google.Cloud.Compute.V1.ListSnapshotsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicySnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicySnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicySnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicySnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the labels on a snapshot. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetLabels(global::Google.Cloud.Compute.V1.SetLabelsSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLabels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the labels on a snapshot. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetLabels(global::Google.Cloud.Compute.V1.SetLabelsSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetLabels, null, options, request);
      }
      /// <summary>
      /// Sets the labels on a snapshot. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetLabelsAsync(global::Google.Cloud.Compute.V1.SetLabelsSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLabelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the labels on a snapshot. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetLabelsAsync(global::Google.Cloud.Compute.V1.SetLabelsSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetLabels, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SnapshotsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SnapshotsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SnapshotsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_SetLabels, serviceImpl.SetLabels)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SnapshotsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteSnapshotRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetSnapshotRequest, global::Google.Cloud.Compute.V1.Snapshot>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetIamPolicySnapshotRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListSnapshotsRequest, global::Google.Cloud.Compute.V1.SnapshotList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetIamPolicySnapshotRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_SetLabels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetLabelsSnapshotRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetLabels));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.TestIamPermissionsSnapshotRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
  /// <summary>
  /// The SslCertificates API.
  /// </summary>
  public static partial class SslCertificates
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.SslCertificates";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListSslCertificatesRequest> __Marshaller_google_cloud_compute_v1_AggregatedListSslCertificatesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListSslCertificatesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SslCertificateAggregatedList> __Marshaller_google_cloud_compute_v1_SslCertificateAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SslCertificateAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteSslCertificateRequest> __Marshaller_google_cloud_compute_v1_DeleteSslCertificateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteSslCertificateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetSslCertificateRequest> __Marshaller_google_cloud_compute_v1_GetSslCertificateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetSslCertificateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SslCertificate> __Marshaller_google_cloud_compute_v1_SslCertificate = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SslCertificate.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertSslCertificateRequest> __Marshaller_google_cloud_compute_v1_InsertSslCertificateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertSslCertificateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListSslCertificatesRequest> __Marshaller_google_cloud_compute_v1_ListSslCertificatesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListSslCertificatesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SslCertificateList> __Marshaller_google_cloud_compute_v1_SslCertificateList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SslCertificateList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListSslCertificatesRequest, global::Google.Cloud.Compute.V1.SslCertificateAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListSslCertificatesRequest, global::Google.Cloud.Compute.V1.SslCertificateAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListSslCertificatesRequest,
        __Marshaller_google_cloud_compute_v1_SslCertificateAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteSslCertificateRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteSslCertificateRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteSslCertificateRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetSslCertificateRequest, global::Google.Cloud.Compute.V1.SslCertificate> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetSslCertificateRequest, global::Google.Cloud.Compute.V1.SslCertificate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetSslCertificateRequest,
        __Marshaller_google_cloud_compute_v1_SslCertificate);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertSslCertificateRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertSslCertificateRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertSslCertificateRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListSslCertificatesRequest, global::Google.Cloud.Compute.V1.SslCertificateList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListSslCertificatesRequest, global::Google.Cloud.Compute.V1.SslCertificateList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListSslCertificatesRequest,
        __Marshaller_google_cloud_compute_v1_SslCertificateList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[57]; }
    }

    /// <summary>Base class for server-side implementations of SslCertificates</summary>
    [grpc::BindServiceMethod(typeof(SslCertificates), "BindService")]
    public abstract partial class SslCertificatesBase
    {
      /// <summary>
      /// Retrieves the list of all SslCertificate resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.SslCertificateAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListSslCertificatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified SslCertificate resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteSslCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified SslCertificate resource. Gets a list of available SSL certificates by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.SslCertificate> Get(global::Google.Cloud.Compute.V1.GetSslCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a SslCertificate resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertSslCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of SslCertificate resources available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.SslCertificateList> List(global::Google.Cloud.Compute.V1.ListSslCertificatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SslCertificates</summary>
    public partial class SslCertificatesClient : grpc::ClientBase<SslCertificatesClient>
    {
      /// <summary>Creates a new client for SslCertificates</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SslCertificatesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SslCertificates that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SslCertificatesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SslCertificatesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SslCertificatesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves the list of all SslCertificate resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SslCertificateAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListSslCertificatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of all SslCertificate resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SslCertificateAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListSslCertificatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of all SslCertificate resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SslCertificateAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListSslCertificatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of all SslCertificate resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SslCertificateAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListSslCertificatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified SslCertificate resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteSslCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified SslCertificate resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteSslCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified SslCertificate resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteSslCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified SslCertificate resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteSslCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified SslCertificate resource. Gets a list of available SSL certificates by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SslCertificate Get(global::Google.Cloud.Compute.V1.GetSslCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified SslCertificate resource. Gets a list of available SSL certificates by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SslCertificate Get(global::Google.Cloud.Compute.V1.GetSslCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified SslCertificate resource. Gets a list of available SSL certificates by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SslCertificate> GetAsync(global::Google.Cloud.Compute.V1.GetSslCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified SslCertificate resource. Gets a list of available SSL certificates by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SslCertificate> GetAsync(global::Google.Cloud.Compute.V1.GetSslCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a SslCertificate resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertSslCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a SslCertificate resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertSslCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a SslCertificate resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertSslCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a SslCertificate resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertSslCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of SslCertificate resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SslCertificateList List(global::Google.Cloud.Compute.V1.ListSslCertificatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of SslCertificate resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SslCertificateList List(global::Google.Cloud.Compute.V1.ListSslCertificatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of SslCertificate resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SslCertificateList> ListAsync(global::Google.Cloud.Compute.V1.ListSslCertificatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of SslCertificate resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SslCertificateList> ListAsync(global::Google.Cloud.Compute.V1.ListSslCertificatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SslCertificatesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SslCertificatesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SslCertificatesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SslCertificatesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListSslCertificatesRequest, global::Google.Cloud.Compute.V1.SslCertificateAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteSslCertificateRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetSslCertificateRequest, global::Google.Cloud.Compute.V1.SslCertificate>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertSslCertificateRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListSslCertificatesRequest, global::Google.Cloud.Compute.V1.SslCertificateList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The SslPolicies API.
  /// </summary>
  public static partial class SslPolicies
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.SslPolicies";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteSslPolicyRequest> __Marshaller_google_cloud_compute_v1_DeleteSslPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteSslPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetSslPolicyRequest> __Marshaller_google_cloud_compute_v1_GetSslPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetSslPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SslPolicy> __Marshaller_google_cloud_compute_v1_SslPolicy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SslPolicy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertSslPolicyRequest> __Marshaller_google_cloud_compute_v1_InsertSslPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertSslPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListSslPoliciesRequest> __Marshaller_google_cloud_compute_v1_ListSslPoliciesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListSslPoliciesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SslPoliciesList> __Marshaller_google_cloud_compute_v1_SslPoliciesList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SslPoliciesList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListAvailableFeaturesSslPoliciesRequest> __Marshaller_google_cloud_compute_v1_ListAvailableFeaturesSslPoliciesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListAvailableFeaturesSslPoliciesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SslPoliciesListAvailableFeaturesResponse> __Marshaller_google_cloud_compute_v1_SslPoliciesListAvailableFeaturesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SslPoliciesListAvailableFeaturesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchSslPolicyRequest> __Marshaller_google_cloud_compute_v1_PatchSslPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchSslPolicyRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteSslPolicyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteSslPolicyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteSslPolicyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetSslPolicyRequest, global::Google.Cloud.Compute.V1.SslPolicy> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetSslPolicyRequest, global::Google.Cloud.Compute.V1.SslPolicy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetSslPolicyRequest,
        __Marshaller_google_cloud_compute_v1_SslPolicy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertSslPolicyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertSslPolicyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertSslPolicyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListSslPoliciesRequest, global::Google.Cloud.Compute.V1.SslPoliciesList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListSslPoliciesRequest, global::Google.Cloud.Compute.V1.SslPoliciesList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListSslPoliciesRequest,
        __Marshaller_google_cloud_compute_v1_SslPoliciesList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListAvailableFeaturesSslPoliciesRequest, global::Google.Cloud.Compute.V1.SslPoliciesListAvailableFeaturesResponse> __Method_ListAvailableFeatures = new grpc::Method<global::Google.Cloud.Compute.V1.ListAvailableFeaturesSslPoliciesRequest, global::Google.Cloud.Compute.V1.SslPoliciesListAvailableFeaturesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAvailableFeatures",
        __Marshaller_google_cloud_compute_v1_ListAvailableFeaturesSslPoliciesRequest,
        __Marshaller_google_cloud_compute_v1_SslPoliciesListAvailableFeaturesResponse);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchSslPolicyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchSslPolicyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchSslPolicyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[58]; }
    }

    /// <summary>Base class for server-side implementations of SslPolicies</summary>
    [grpc::BindServiceMethod(typeof(SslPolicies), "BindService")]
    public abstract partial class SslPoliciesBase
    {
      /// <summary>
      /// Deletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteSslPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all of the ordered rules present in a single specified policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.SslPolicy> Get(global::Google.Cloud.Compute.V1.GetSslPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified SSL policy resource. Gets a list of available SSL policies by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertSslPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all the SSL policies that have been configured for the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.SslPoliciesList> List(global::Google.Cloud.Compute.V1.ListSslPoliciesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all features that can be specified in the SSL policy when using custom profile.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.SslPoliciesListAvailableFeaturesResponse> ListAvailableFeatures(global::Google.Cloud.Compute.V1.ListAvailableFeaturesSslPoliciesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patches the specified SSL policy with the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchSslPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SslPolicies</summary>
    public partial class SslPoliciesClient : grpc::ClientBase<SslPoliciesClient>
    {
      /// <summary>Creates a new client for SslPolicies</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SslPoliciesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SslPolicies that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SslPoliciesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SslPoliciesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SslPoliciesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteSslPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteSslPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteSslPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteSslPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Lists all of the ordered rules present in a single specified policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SslPolicy Get(global::Google.Cloud.Compute.V1.GetSslPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all of the ordered rules present in a single specified policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SslPolicy Get(global::Google.Cloud.Compute.V1.GetSslPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Lists all of the ordered rules present in a single specified policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SslPolicy> GetAsync(global::Google.Cloud.Compute.V1.GetSslPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all of the ordered rules present in a single specified policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SslPolicy> GetAsync(global::Google.Cloud.Compute.V1.GetSslPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified SSL policy resource. Gets a list of available SSL policies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertSslPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified SSL policy resource. Gets a list of available SSL policies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertSslPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Returns the specified SSL policy resource. Gets a list of available SSL policies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertSslPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified SSL policy resource. Gets a list of available SSL policies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertSslPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Lists all the SSL policies that have been configured for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SslPoliciesList List(global::Google.Cloud.Compute.V1.ListSslPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the SSL policies that have been configured for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SslPoliciesList List(global::Google.Cloud.Compute.V1.ListSslPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Lists all the SSL policies that have been configured for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SslPoliciesList> ListAsync(global::Google.Cloud.Compute.V1.ListSslPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the SSL policies that have been configured for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SslPoliciesList> ListAsync(global::Google.Cloud.Compute.V1.ListSslPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Lists all features that can be specified in the SSL policy when using custom profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SslPoliciesListAvailableFeaturesResponse ListAvailableFeatures(global::Google.Cloud.Compute.V1.ListAvailableFeaturesSslPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAvailableFeatures(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all features that can be specified in the SSL policy when using custom profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SslPoliciesListAvailableFeaturesResponse ListAvailableFeatures(global::Google.Cloud.Compute.V1.ListAvailableFeaturesSslPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAvailableFeatures, null, options, request);
      }
      /// <summary>
      /// Lists all features that can be specified in the SSL policy when using custom profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SslPoliciesListAvailableFeaturesResponse> ListAvailableFeaturesAsync(global::Google.Cloud.Compute.V1.ListAvailableFeaturesSslPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAvailableFeaturesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all features that can be specified in the SSL policy when using custom profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SslPoliciesListAvailableFeaturesResponse> ListAvailableFeaturesAsync(global::Google.Cloud.Compute.V1.ListAvailableFeaturesSslPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAvailableFeatures, null, options, request);
      }
      /// <summary>
      /// Patches the specified SSL policy with the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchSslPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified SSL policy with the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchSslPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Patches the specified SSL policy with the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchSslPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified SSL policy with the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchSslPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SslPoliciesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SslPoliciesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SslPoliciesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_ListAvailableFeatures, serviceImpl.ListAvailableFeatures)
          .AddMethod(__Method_Patch, serviceImpl.Patch).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SslPoliciesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteSslPolicyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetSslPolicyRequest, global::Google.Cloud.Compute.V1.SslPolicy>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertSslPolicyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListSslPoliciesRequest, global::Google.Cloud.Compute.V1.SslPoliciesList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_ListAvailableFeatures, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListAvailableFeaturesSslPoliciesRequest, global::Google.Cloud.Compute.V1.SslPoliciesListAvailableFeaturesResponse>(serviceImpl.ListAvailableFeatures));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchSslPolicyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
    }

  }
  /// <summary>
  /// The Subnetworks API.
  /// </summary>
  public static partial class Subnetworks
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.Subnetworks";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListSubnetworksRequest> __Marshaller_google_cloud_compute_v1_AggregatedListSubnetworksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListSubnetworksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SubnetworkAggregatedList> __Marshaller_google_cloud_compute_v1_SubnetworkAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SubnetworkAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteSubnetworkRequest> __Marshaller_google_cloud_compute_v1_DeleteSubnetworkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteSubnetworkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ExpandIpCidrRangeSubnetworkRequest> __Marshaller_google_cloud_compute_v1_ExpandIpCidrRangeSubnetworkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ExpandIpCidrRangeSubnetworkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetSubnetworkRequest> __Marshaller_google_cloud_compute_v1_GetSubnetworkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetSubnetworkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Subnetwork> __Marshaller_google_cloud_compute_v1_Subnetwork = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Subnetwork.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetIamPolicySubnetworkRequest> __Marshaller_google_cloud_compute_v1_GetIamPolicySubnetworkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetIamPolicySubnetworkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Policy> __Marshaller_google_cloud_compute_v1_Policy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Policy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertSubnetworkRequest> __Marshaller_google_cloud_compute_v1_InsertSubnetworkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertSubnetworkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListSubnetworksRequest> __Marshaller_google_cloud_compute_v1_ListSubnetworksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListSubnetworksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SubnetworkList> __Marshaller_google_cloud_compute_v1_SubnetworkList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SubnetworkList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListUsableSubnetworksRequest> __Marshaller_google_cloud_compute_v1_ListUsableSubnetworksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListUsableSubnetworksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UsableSubnetworksAggregatedList> __Marshaller_google_cloud_compute_v1_UsableSubnetworksAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UsableSubnetworksAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchSubnetworkRequest> __Marshaller_google_cloud_compute_v1_PatchSubnetworkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchSubnetworkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetIamPolicySubnetworkRequest> __Marshaller_google_cloud_compute_v1_SetIamPolicySubnetworkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetIamPolicySubnetworkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetPrivateIpGoogleAccessSubnetworkRequest> __Marshaller_google_cloud_compute_v1_SetPrivateIpGoogleAccessSubnetworkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetPrivateIpGoogleAccessSubnetworkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestIamPermissionsSubnetworkRequest> __Marshaller_google_cloud_compute_v1_TestIamPermissionsSubnetworkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestIamPermissionsSubnetworkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Marshaller_google_cloud_compute_v1_TestPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestPermissionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListSubnetworksRequest, global::Google.Cloud.Compute.V1.SubnetworkAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListSubnetworksRequest, global::Google.Cloud.Compute.V1.SubnetworkAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListSubnetworksRequest,
        __Marshaller_google_cloud_compute_v1_SubnetworkAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteSubnetworkRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteSubnetworkRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteSubnetworkRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ExpandIpCidrRangeSubnetworkRequest, global::Google.Cloud.Compute.V1.Operation> __Method_ExpandIpCidrRange = new grpc::Method<global::Google.Cloud.Compute.V1.ExpandIpCidrRangeSubnetworkRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExpandIpCidrRange",
        __Marshaller_google_cloud_compute_v1_ExpandIpCidrRangeSubnetworkRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetSubnetworkRequest, global::Google.Cloud.Compute.V1.Subnetwork> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetSubnetworkRequest, global::Google.Cloud.Compute.V1.Subnetwork>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetSubnetworkRequest,
        __Marshaller_google_cloud_compute_v1_Subnetwork);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicySubnetworkRequest, global::Google.Cloud.Compute.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.GetIamPolicySubnetworkRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_cloud_compute_v1_GetIamPolicySubnetworkRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertSubnetworkRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertSubnetworkRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertSubnetworkRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListSubnetworksRequest, global::Google.Cloud.Compute.V1.SubnetworkList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListSubnetworksRequest, global::Google.Cloud.Compute.V1.SubnetworkList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListSubnetworksRequest,
        __Marshaller_google_cloud_compute_v1_SubnetworkList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListUsableSubnetworksRequest, global::Google.Cloud.Compute.V1.UsableSubnetworksAggregatedList> __Method_ListUsable = new grpc::Method<global::Google.Cloud.Compute.V1.ListUsableSubnetworksRequest, global::Google.Cloud.Compute.V1.UsableSubnetworksAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListUsable",
        __Marshaller_google_cloud_compute_v1_ListUsableSubnetworksRequest,
        __Marshaller_google_cloud_compute_v1_UsableSubnetworksAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchSubnetworkRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchSubnetworkRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchSubnetworkRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicySubnetworkRequest, global::Google.Cloud.Compute.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.SetIamPolicySubnetworkRequest, global::Google.Cloud.Compute.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_cloud_compute_v1_SetIamPolicySubnetworkRequest,
        __Marshaller_google_cloud_compute_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetPrivateIpGoogleAccessSubnetworkRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetPrivateIpGoogleAccess = new grpc::Method<global::Google.Cloud.Compute.V1.SetPrivateIpGoogleAccessSubnetworkRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPrivateIpGoogleAccess",
        __Marshaller_google_cloud_compute_v1_SetPrivateIpGoogleAccessSubnetworkRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsSubnetworkRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsSubnetworkRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_cloud_compute_v1_TestIamPermissionsSubnetworkRequest,
        __Marshaller_google_cloud_compute_v1_TestPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[59]; }
    }

    /// <summary>Base class for server-side implementations of Subnetworks</summary>
    [grpc::BindServiceMethod(typeof(Subnetworks), "BindService")]
    public abstract partial class SubnetworksBase
    {
      /// <summary>
      /// Retrieves an aggregated list of subnetworks.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.SubnetworkAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListSubnetworksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified subnetwork.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteSubnetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Expands the IP CIDR range of the subnetwork to a specified value.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> ExpandIpCidrRange(global::Google.Cloud.Compute.V1.ExpandIpCidrRangeSubnetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified subnetwork. Gets a list of available subnetworks list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Subnetwork> Get(global::Google.Cloud.Compute.V1.GetSubnetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicySubnetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a subnetwork in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertSubnetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of subnetworks available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.SubnetworkList> List(global::Google.Cloud.Compute.V1.ListSubnetworksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves an aggregated list of all usable subnetworks in the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.UsableSubnetworksAggregatedList> ListUsable(global::Google.Cloud.Compute.V1.ListUsableSubnetworksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patches the specified subnetwork with the data included in the request. Only certain fields can be updated with a patch request as indicated in the field descriptions. You must specify the current fingerprint of the subnetwork resource being patched.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchSubnetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Policy> SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicySubnetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Set whether VMs in this subnet can access Google services without assigning external IP addresses through Private Google Access.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetPrivateIpGoogleAccess(global::Google.Cloud.Compute.V1.SetPrivateIpGoogleAccessSubnetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsSubnetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Subnetworks</summary>
    public partial class SubnetworksClient : grpc::ClientBase<SubnetworksClient>
    {
      /// <summary>Creates a new client for Subnetworks</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SubnetworksClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Subnetworks that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SubnetworksClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SubnetworksClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SubnetworksClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of subnetworks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SubnetworkAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListSubnetworksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of subnetworks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SubnetworkAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListSubnetworksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of subnetworks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SubnetworkAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListSubnetworksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of subnetworks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SubnetworkAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListSubnetworksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified subnetwork.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteSubnetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified subnetwork.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteSubnetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified subnetwork.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteSubnetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified subnetwork.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteSubnetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Expands the IP CIDR range of the subnetwork to a specified value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation ExpandIpCidrRange(global::Google.Cloud.Compute.V1.ExpandIpCidrRangeSubnetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExpandIpCidrRange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Expands the IP CIDR range of the subnetwork to a specified value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation ExpandIpCidrRange(global::Google.Cloud.Compute.V1.ExpandIpCidrRangeSubnetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExpandIpCidrRange, null, options, request);
      }
      /// <summary>
      /// Expands the IP CIDR range of the subnetwork to a specified value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> ExpandIpCidrRangeAsync(global::Google.Cloud.Compute.V1.ExpandIpCidrRangeSubnetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExpandIpCidrRangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Expands the IP CIDR range of the subnetwork to a specified value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> ExpandIpCidrRangeAsync(global::Google.Cloud.Compute.V1.ExpandIpCidrRangeSubnetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExpandIpCidrRange, null, options, request);
      }
      /// <summary>
      /// Returns the specified subnetwork. Gets a list of available subnetworks list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Subnetwork Get(global::Google.Cloud.Compute.V1.GetSubnetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified subnetwork. Gets a list of available subnetworks list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Subnetwork Get(global::Google.Cloud.Compute.V1.GetSubnetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified subnetwork. Gets a list of available subnetworks list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Subnetwork> GetAsync(global::Google.Cloud.Compute.V1.GetSubnetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified subnetwork. Gets a list of available subnetworks list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Subnetwork> GetAsync(global::Google.Cloud.Compute.V1.GetSubnetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicySubnetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy GetIamPolicy(global::Google.Cloud.Compute.V1.GetIamPolicySubnetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicySubnetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a resource. May be empty if no such policy or resource exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Compute.V1.GetIamPolicySubnetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Creates a subnetwork in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertSubnetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a subnetwork in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertSubnetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a subnetwork in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertSubnetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a subnetwork in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertSubnetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of subnetworks available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SubnetworkList List(global::Google.Cloud.Compute.V1.ListSubnetworksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of subnetworks available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.SubnetworkList List(global::Google.Cloud.Compute.V1.ListSubnetworksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of subnetworks available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SubnetworkList> ListAsync(global::Google.Cloud.Compute.V1.ListSubnetworksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of subnetworks available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.SubnetworkList> ListAsync(global::Google.Cloud.Compute.V1.ListSubnetworksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of all usable subnetworks in the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.UsableSubnetworksAggregatedList ListUsable(global::Google.Cloud.Compute.V1.ListUsableSubnetworksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUsable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of all usable subnetworks in the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.UsableSubnetworksAggregatedList ListUsable(global::Google.Cloud.Compute.V1.ListUsableSubnetworksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListUsable, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of all usable subnetworks in the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.UsableSubnetworksAggregatedList> ListUsableAsync(global::Google.Cloud.Compute.V1.ListUsableSubnetworksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUsableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of all usable subnetworks in the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.UsableSubnetworksAggregatedList> ListUsableAsync(global::Google.Cloud.Compute.V1.ListUsableSubnetworksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListUsable, null, options, request);
      }
      /// <summary>
      /// Patches the specified subnetwork with the data included in the request. Only certain fields can be updated with a patch request as indicated in the field descriptions. You must specify the current fingerprint of the subnetwork resource being patched.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchSubnetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified subnetwork with the data included in the request. Only certain fields can be updated with a patch request as indicated in the field descriptions. You must specify the current fingerprint of the subnetwork resource being patched.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchSubnetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Patches the specified subnetwork with the data included in the request. Only certain fields can be updated with a patch request as indicated in the field descriptions. You must specify the current fingerprint of the subnetwork resource being patched.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchSubnetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified subnetwork with the data included in the request. Only certain fields can be updated with a patch request as indicated in the field descriptions. You must specify the current fingerprint of the subnetwork resource being patched.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchSubnetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicySubnetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Policy SetIamPolicy(global::Google.Cloud.Compute.V1.SetIamPolicySubnetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicySubnetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified resource. Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Compute.V1.SetIamPolicySubnetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Set whether VMs in this subnet can access Google services without assigning external IP addresses through Private Google Access.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetPrivateIpGoogleAccess(global::Google.Cloud.Compute.V1.SetPrivateIpGoogleAccessSubnetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPrivateIpGoogleAccess(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set whether VMs in this subnet can access Google services without assigning external IP addresses through Private Google Access.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetPrivateIpGoogleAccess(global::Google.Cloud.Compute.V1.SetPrivateIpGoogleAccessSubnetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPrivateIpGoogleAccess, null, options, request);
      }
      /// <summary>
      /// Set whether VMs in this subnet can access Google services without assigning external IP addresses through Private Google Access.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetPrivateIpGoogleAccessAsync(global::Google.Cloud.Compute.V1.SetPrivateIpGoogleAccessSubnetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPrivateIpGoogleAccessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set whether VMs in this subnet can access Google services without assigning external IP addresses through Private Google Access.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetPrivateIpGoogleAccessAsync(global::Google.Cloud.Compute.V1.SetPrivateIpGoogleAccessSubnetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPrivateIpGoogleAccess, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsSubnetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsSubnetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsSubnetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsSubnetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SubnetworksClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SubnetworksClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SubnetworksBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_ExpandIpCidrRange, serviceImpl.ExpandIpCidrRange)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_ListUsable, serviceImpl.ListUsable)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_SetPrivateIpGoogleAccess, serviceImpl.SetPrivateIpGoogleAccess)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SubnetworksBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListSubnetworksRequest, global::Google.Cloud.Compute.V1.SubnetworkAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteSubnetworkRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_ExpandIpCidrRange, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ExpandIpCidrRangeSubnetworkRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.ExpandIpCidrRange));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetSubnetworkRequest, global::Google.Cloud.Compute.V1.Subnetwork>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetIamPolicySubnetworkRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertSubnetworkRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListSubnetworksRequest, global::Google.Cloud.Compute.V1.SubnetworkList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_ListUsable, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListUsableSubnetworksRequest, global::Google.Cloud.Compute.V1.UsableSubnetworksAggregatedList>(serviceImpl.ListUsable));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchSubnetworkRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetIamPolicySubnetworkRequest, global::Google.Cloud.Compute.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_SetPrivateIpGoogleAccess, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetPrivateIpGoogleAccessSubnetworkRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetPrivateIpGoogleAccess));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.TestIamPermissionsSubnetworkRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
  /// <summary>
  /// The TargetGrpcProxies API.
  /// </summary>
  public static partial class TargetGrpcProxies
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.TargetGrpcProxies";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteTargetGrpcProxyRequest> __Marshaller_google_cloud_compute_v1_DeleteTargetGrpcProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteTargetGrpcProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetTargetGrpcProxyRequest> __Marshaller_google_cloud_compute_v1_GetTargetGrpcProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetTargetGrpcProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetGrpcProxy> __Marshaller_google_cloud_compute_v1_TargetGrpcProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetGrpcProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertTargetGrpcProxyRequest> __Marshaller_google_cloud_compute_v1_InsertTargetGrpcProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertTargetGrpcProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListTargetGrpcProxiesRequest> __Marshaller_google_cloud_compute_v1_ListTargetGrpcProxiesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListTargetGrpcProxiesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetGrpcProxyList> __Marshaller_google_cloud_compute_v1_TargetGrpcProxyList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetGrpcProxyList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchTargetGrpcProxyRequest> __Marshaller_google_cloud_compute_v1_PatchTargetGrpcProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchTargetGrpcProxyRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteTargetGrpcProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteTargetGrpcProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteTargetGrpcProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetTargetGrpcProxyRequest, global::Google.Cloud.Compute.V1.TargetGrpcProxy> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetTargetGrpcProxyRequest, global::Google.Cloud.Compute.V1.TargetGrpcProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetTargetGrpcProxyRequest,
        __Marshaller_google_cloud_compute_v1_TargetGrpcProxy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertTargetGrpcProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertTargetGrpcProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertTargetGrpcProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListTargetGrpcProxiesRequest, global::Google.Cloud.Compute.V1.TargetGrpcProxyList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListTargetGrpcProxiesRequest, global::Google.Cloud.Compute.V1.TargetGrpcProxyList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListTargetGrpcProxiesRequest,
        __Marshaller_google_cloud_compute_v1_TargetGrpcProxyList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchTargetGrpcProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchTargetGrpcProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchTargetGrpcProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[60]; }
    }

    /// <summary>Base class for server-side implementations of TargetGrpcProxies</summary>
    [grpc::BindServiceMethod(typeof(TargetGrpcProxies), "BindService")]
    public abstract partial class TargetGrpcProxiesBase
    {
      /// <summary>
      /// Deletes the specified TargetGrpcProxy in the given scope
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteTargetGrpcProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified TargetGrpcProxy resource in the given scope.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetGrpcProxy> Get(global::Google.Cloud.Compute.V1.GetTargetGrpcProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a TargetGrpcProxy in the specified project in the given scope using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertTargetGrpcProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the TargetGrpcProxies for a project in the given scope.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetGrpcProxyList> List(global::Google.Cloud.Compute.V1.ListTargetGrpcProxiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patches the specified TargetGrpcProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchTargetGrpcProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TargetGrpcProxies</summary>
    public partial class TargetGrpcProxiesClient : grpc::ClientBase<TargetGrpcProxiesClient>
    {
      /// <summary>Creates a new client for TargetGrpcProxies</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TargetGrpcProxiesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TargetGrpcProxies that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TargetGrpcProxiesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TargetGrpcProxiesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TargetGrpcProxiesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified TargetGrpcProxy in the given scope
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteTargetGrpcProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified TargetGrpcProxy in the given scope
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteTargetGrpcProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified TargetGrpcProxy in the given scope
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteTargetGrpcProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified TargetGrpcProxy in the given scope
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteTargetGrpcProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified TargetGrpcProxy resource in the given scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetGrpcProxy Get(global::Google.Cloud.Compute.V1.GetTargetGrpcProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified TargetGrpcProxy resource in the given scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetGrpcProxy Get(global::Google.Cloud.Compute.V1.GetTargetGrpcProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified TargetGrpcProxy resource in the given scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetGrpcProxy> GetAsync(global::Google.Cloud.Compute.V1.GetTargetGrpcProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified TargetGrpcProxy resource in the given scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetGrpcProxy> GetAsync(global::Google.Cloud.Compute.V1.GetTargetGrpcProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a TargetGrpcProxy in the specified project in the given scope using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertTargetGrpcProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TargetGrpcProxy in the specified project in the given scope using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertTargetGrpcProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a TargetGrpcProxy in the specified project in the given scope using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertTargetGrpcProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TargetGrpcProxy in the specified project in the given scope using the parameters that are included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertTargetGrpcProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Lists the TargetGrpcProxies for a project in the given scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetGrpcProxyList List(global::Google.Cloud.Compute.V1.ListTargetGrpcProxiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the TargetGrpcProxies for a project in the given scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetGrpcProxyList List(global::Google.Cloud.Compute.V1.ListTargetGrpcProxiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Lists the TargetGrpcProxies for a project in the given scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetGrpcProxyList> ListAsync(global::Google.Cloud.Compute.V1.ListTargetGrpcProxiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the TargetGrpcProxies for a project in the given scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetGrpcProxyList> ListAsync(global::Google.Cloud.Compute.V1.ListTargetGrpcProxiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Patches the specified TargetGrpcProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchTargetGrpcProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified TargetGrpcProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchTargetGrpcProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Patches the specified TargetGrpcProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchTargetGrpcProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified TargetGrpcProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchTargetGrpcProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TargetGrpcProxiesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TargetGrpcProxiesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TargetGrpcProxiesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TargetGrpcProxiesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteTargetGrpcProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetTargetGrpcProxyRequest, global::Google.Cloud.Compute.V1.TargetGrpcProxy>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertTargetGrpcProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListTargetGrpcProxiesRequest, global::Google.Cloud.Compute.V1.TargetGrpcProxyList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchTargetGrpcProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
    }

  }
  /// <summary>
  /// The TargetHttpProxies API.
  /// </summary>
  public static partial class TargetHttpProxies
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.TargetHttpProxies";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListTargetHttpProxiesRequest> __Marshaller_google_cloud_compute_v1_AggregatedListTargetHttpProxiesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListTargetHttpProxiesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetHttpProxyAggregatedList> __Marshaller_google_cloud_compute_v1_TargetHttpProxyAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetHttpProxyAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteTargetHttpProxyRequest> __Marshaller_google_cloud_compute_v1_DeleteTargetHttpProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteTargetHttpProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetTargetHttpProxyRequest> __Marshaller_google_cloud_compute_v1_GetTargetHttpProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetTargetHttpProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetHttpProxy> __Marshaller_google_cloud_compute_v1_TargetHttpProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetHttpProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertTargetHttpProxyRequest> __Marshaller_google_cloud_compute_v1_InsertTargetHttpProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertTargetHttpProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListTargetHttpProxiesRequest> __Marshaller_google_cloud_compute_v1_ListTargetHttpProxiesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListTargetHttpProxiesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetHttpProxyList> __Marshaller_google_cloud_compute_v1_TargetHttpProxyList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetHttpProxyList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchTargetHttpProxyRequest> __Marshaller_google_cloud_compute_v1_PatchTargetHttpProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchTargetHttpProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpProxyRequest> __Marshaller_google_cloud_compute_v1_SetUrlMapTargetHttpProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpProxyRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListTargetHttpProxiesRequest, global::Google.Cloud.Compute.V1.TargetHttpProxyAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListTargetHttpProxiesRequest, global::Google.Cloud.Compute.V1.TargetHttpProxyAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListTargetHttpProxiesRequest,
        __Marshaller_google_cloud_compute_v1_TargetHttpProxyAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteTargetHttpProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.TargetHttpProxy> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.TargetHttpProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetTargetHttpProxyRequest,
        __Marshaller_google_cloud_compute_v1_TargetHttpProxy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertTargetHttpProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListTargetHttpProxiesRequest, global::Google.Cloud.Compute.V1.TargetHttpProxyList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListTargetHttpProxiesRequest, global::Google.Cloud.Compute.V1.TargetHttpProxyList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListTargetHttpProxiesRequest,
        __Marshaller_google_cloud_compute_v1_TargetHttpProxyList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchTargetHttpProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetUrlMap = new grpc::Method<global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetUrlMap",
        __Marshaller_google_cloud_compute_v1_SetUrlMapTargetHttpProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[61]; }
    }

    /// <summary>Base class for server-side implementations of TargetHttpProxies</summary>
    [grpc::BindServiceMethod(typeof(TargetHttpProxies), "BindService")]
    public abstract partial class TargetHttpProxiesBase
    {
      /// <summary>
      /// Retrieves the list of all TargetHttpProxy resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetHttpProxyAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListTargetHttpProxiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified TargetHttpProxy resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteTargetHttpProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified TargetHttpProxy resource. Gets a list of available target HTTP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetHttpProxy> Get(global::Google.Cloud.Compute.V1.GetTargetHttpProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a TargetHttpProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertTargetHttpProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of TargetHttpProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetHttpProxyList> List(global::Google.Cloud.Compute.V1.ListTargetHttpProxiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patches the specified TargetHttpProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules. (== suppress_warning http-rest-shadowed ==)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchTargetHttpProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Changes the URL map for TargetHttpProxy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetUrlMap(global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TargetHttpProxies</summary>
    public partial class TargetHttpProxiesClient : grpc::ClientBase<TargetHttpProxiesClient>
    {
      /// <summary>Creates a new client for TargetHttpProxies</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TargetHttpProxiesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TargetHttpProxies that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TargetHttpProxiesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TargetHttpProxiesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TargetHttpProxiesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves the list of all TargetHttpProxy resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpProxyAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListTargetHttpProxiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of all TargetHttpProxy resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpProxyAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListTargetHttpProxiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of all TargetHttpProxy resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpProxyAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListTargetHttpProxiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of all TargetHttpProxy resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpProxyAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListTargetHttpProxiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified TargetHttpProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteTargetHttpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified TargetHttpProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteTargetHttpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified TargetHttpProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteTargetHttpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified TargetHttpProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteTargetHttpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified TargetHttpProxy resource. Gets a list of available target HTTP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpProxy Get(global::Google.Cloud.Compute.V1.GetTargetHttpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified TargetHttpProxy resource. Gets a list of available target HTTP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpProxy Get(global::Google.Cloud.Compute.V1.GetTargetHttpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified TargetHttpProxy resource. Gets a list of available target HTTP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpProxy> GetAsync(global::Google.Cloud.Compute.V1.GetTargetHttpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified TargetHttpProxy resource. Gets a list of available target HTTP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpProxy> GetAsync(global::Google.Cloud.Compute.V1.GetTargetHttpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a TargetHttpProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertTargetHttpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TargetHttpProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertTargetHttpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a TargetHttpProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertTargetHttpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TargetHttpProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertTargetHttpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of TargetHttpProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpProxyList List(global::Google.Cloud.Compute.V1.ListTargetHttpProxiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of TargetHttpProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpProxyList List(global::Google.Cloud.Compute.V1.ListTargetHttpProxiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of TargetHttpProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpProxyList> ListAsync(global::Google.Cloud.Compute.V1.ListTargetHttpProxiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of TargetHttpProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpProxyList> ListAsync(global::Google.Cloud.Compute.V1.ListTargetHttpProxiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Patches the specified TargetHttpProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules. (== suppress_warning http-rest-shadowed ==)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchTargetHttpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified TargetHttpProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules. (== suppress_warning http-rest-shadowed ==)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchTargetHttpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Patches the specified TargetHttpProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules. (== suppress_warning http-rest-shadowed ==)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchTargetHttpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified TargetHttpProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules. (== suppress_warning http-rest-shadowed ==)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchTargetHttpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Changes the URL map for TargetHttpProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetUrlMap(global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetUrlMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the URL map for TargetHttpProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetUrlMap(global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetUrlMap, null, options, request);
      }
      /// <summary>
      /// Changes the URL map for TargetHttpProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetUrlMapAsync(global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetUrlMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the URL map for TargetHttpProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetUrlMapAsync(global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetUrlMap, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TargetHttpProxiesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TargetHttpProxiesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TargetHttpProxiesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_SetUrlMap, serviceImpl.SetUrlMap).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TargetHttpProxiesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListTargetHttpProxiesRequest, global::Google.Cloud.Compute.V1.TargetHttpProxyAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.TargetHttpProxy>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListTargetHttpProxiesRequest, global::Google.Cloud.Compute.V1.TargetHttpProxyList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_SetUrlMap, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetUrlMap));
    }

  }
  /// <summary>
  /// The TargetHttpsProxies API.
  /// </summary>
  public static partial class TargetHttpsProxies
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.TargetHttpsProxies";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListTargetHttpsProxiesRequest> __Marshaller_google_cloud_compute_v1_AggregatedListTargetHttpsProxiesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListTargetHttpsProxiesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetHttpsProxyAggregatedList> __Marshaller_google_cloud_compute_v1_TargetHttpsProxyAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetHttpsProxyAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteTargetHttpsProxyRequest> __Marshaller_google_cloud_compute_v1_DeleteTargetHttpsProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteTargetHttpsProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetTargetHttpsProxyRequest> __Marshaller_google_cloud_compute_v1_GetTargetHttpsProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetTargetHttpsProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetHttpsProxy> __Marshaller_google_cloud_compute_v1_TargetHttpsProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetHttpsProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertTargetHttpsProxyRequest> __Marshaller_google_cloud_compute_v1_InsertTargetHttpsProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertTargetHttpsProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListTargetHttpsProxiesRequest> __Marshaller_google_cloud_compute_v1_ListTargetHttpsProxiesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListTargetHttpsProxiesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetHttpsProxyList> __Marshaller_google_cloud_compute_v1_TargetHttpsProxyList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetHttpsProxyList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetQuicOverrideTargetHttpsProxyRequest> __Marshaller_google_cloud_compute_v1_SetQuicOverrideTargetHttpsProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetQuicOverrideTargetHttpsProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetSslCertificatesTargetHttpsProxyRequest> __Marshaller_google_cloud_compute_v1_SetSslCertificatesTargetHttpsProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetSslCertificatesTargetHttpsProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetSslPolicyTargetHttpsProxyRequest> __Marshaller_google_cloud_compute_v1_SetSslPolicyTargetHttpsProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetSslPolicyTargetHttpsProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpsProxyRequest> __Marshaller_google_cloud_compute_v1_SetUrlMapTargetHttpsProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpsProxyRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListTargetHttpsProxiesRequest, global::Google.Cloud.Compute.V1.TargetHttpsProxyAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListTargetHttpsProxiesRequest, global::Google.Cloud.Compute.V1.TargetHttpsProxyAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListTargetHttpsProxiesRequest,
        __Marshaller_google_cloud_compute_v1_TargetHttpsProxyAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteTargetHttpsProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.TargetHttpsProxy> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.TargetHttpsProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetTargetHttpsProxyRequest,
        __Marshaller_google_cloud_compute_v1_TargetHttpsProxy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertTargetHttpsProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListTargetHttpsProxiesRequest, global::Google.Cloud.Compute.V1.TargetHttpsProxyList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListTargetHttpsProxiesRequest, global::Google.Cloud.Compute.V1.TargetHttpsProxyList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListTargetHttpsProxiesRequest,
        __Marshaller_google_cloud_compute_v1_TargetHttpsProxyList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetQuicOverrideTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetQuicOverride = new grpc::Method<global::Google.Cloud.Compute.V1.SetQuicOverrideTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetQuicOverride",
        __Marshaller_google_cloud_compute_v1_SetQuicOverrideTargetHttpsProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetSslCertificatesTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetSslCertificates = new grpc::Method<global::Google.Cloud.Compute.V1.SetSslCertificatesTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetSslCertificates",
        __Marshaller_google_cloud_compute_v1_SetSslCertificatesTargetHttpsProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetSslPolicyTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetSslPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.SetSslPolicyTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetSslPolicy",
        __Marshaller_google_cloud_compute_v1_SetSslPolicyTargetHttpsProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetUrlMap = new grpc::Method<global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetUrlMap",
        __Marshaller_google_cloud_compute_v1_SetUrlMapTargetHttpsProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[62]; }
    }

    /// <summary>Base class for server-side implementations of TargetHttpsProxies</summary>
    [grpc::BindServiceMethod(typeof(TargetHttpsProxies), "BindService")]
    public abstract partial class TargetHttpsProxiesBase
    {
      /// <summary>
      /// Retrieves the list of all TargetHttpsProxy resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetHttpsProxyAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListTargetHttpsProxiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified TargetHttpsProxy resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteTargetHttpsProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified TargetHttpsProxy resource. Gets a list of available target HTTPS proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetHttpsProxy> Get(global::Google.Cloud.Compute.V1.GetTargetHttpsProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a TargetHttpsProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertTargetHttpsProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of TargetHttpsProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetHttpsProxyList> List(global::Google.Cloud.Compute.V1.ListTargetHttpsProxiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the QUIC override policy for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetQuicOverride(global::Google.Cloud.Compute.V1.SetQuicOverrideTargetHttpsProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Replaces SslCertificates for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetSslCertificates(global::Google.Cloud.Compute.V1.SetSslCertificatesTargetHttpsProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the SSL policy for TargetHttpsProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the HTTPS proxy load balancer. They do not affect the connection between the load balancer and the backends.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetSslPolicy(global::Google.Cloud.Compute.V1.SetSslPolicyTargetHttpsProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Changes the URL map for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetUrlMap(global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpsProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TargetHttpsProxies</summary>
    public partial class TargetHttpsProxiesClient : grpc::ClientBase<TargetHttpsProxiesClient>
    {
      /// <summary>Creates a new client for TargetHttpsProxies</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TargetHttpsProxiesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TargetHttpsProxies that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TargetHttpsProxiesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TargetHttpsProxiesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TargetHttpsProxiesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves the list of all TargetHttpsProxy resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpsProxyAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListTargetHttpsProxiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of all TargetHttpsProxy resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpsProxyAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListTargetHttpsProxiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of all TargetHttpsProxy resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpsProxyAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListTargetHttpsProxiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of all TargetHttpsProxy resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpsProxyAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListTargetHttpsProxiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified TargetHttpsProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified TargetHttpsProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified TargetHttpsProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified TargetHttpsProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified TargetHttpsProxy resource. Gets a list of available target HTTPS proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpsProxy Get(global::Google.Cloud.Compute.V1.GetTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified TargetHttpsProxy resource. Gets a list of available target HTTPS proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpsProxy Get(global::Google.Cloud.Compute.V1.GetTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified TargetHttpsProxy resource. Gets a list of available target HTTPS proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpsProxy> GetAsync(global::Google.Cloud.Compute.V1.GetTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified TargetHttpsProxy resource. Gets a list of available target HTTPS proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpsProxy> GetAsync(global::Google.Cloud.Compute.V1.GetTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a TargetHttpsProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TargetHttpsProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a TargetHttpsProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TargetHttpsProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of TargetHttpsProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpsProxyList List(global::Google.Cloud.Compute.V1.ListTargetHttpsProxiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of TargetHttpsProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetHttpsProxyList List(global::Google.Cloud.Compute.V1.ListTargetHttpsProxiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of TargetHttpsProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpsProxyList> ListAsync(global::Google.Cloud.Compute.V1.ListTargetHttpsProxiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of TargetHttpsProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetHttpsProxyList> ListAsync(global::Google.Cloud.Compute.V1.ListTargetHttpsProxiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Sets the QUIC override policy for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetQuicOverride(global::Google.Cloud.Compute.V1.SetQuicOverrideTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetQuicOverride(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the QUIC override policy for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetQuicOverride(global::Google.Cloud.Compute.V1.SetQuicOverrideTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetQuicOverride, null, options, request);
      }
      /// <summary>
      /// Sets the QUIC override policy for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetQuicOverrideAsync(global::Google.Cloud.Compute.V1.SetQuicOverrideTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetQuicOverrideAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the QUIC override policy for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetQuicOverrideAsync(global::Google.Cloud.Compute.V1.SetQuicOverrideTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetQuicOverride, null, options, request);
      }
      /// <summary>
      /// Replaces SslCertificates for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetSslCertificates(global::Google.Cloud.Compute.V1.SetSslCertificatesTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSslCertificates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Replaces SslCertificates for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetSslCertificates(global::Google.Cloud.Compute.V1.SetSslCertificatesTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSslCertificates, null, options, request);
      }
      /// <summary>
      /// Replaces SslCertificates for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetSslCertificatesAsync(global::Google.Cloud.Compute.V1.SetSslCertificatesTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSslCertificatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Replaces SslCertificates for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetSslCertificatesAsync(global::Google.Cloud.Compute.V1.SetSslCertificatesTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSslCertificates, null, options, request);
      }
      /// <summary>
      /// Sets the SSL policy for TargetHttpsProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the HTTPS proxy load balancer. They do not affect the connection between the load balancer and the backends.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetSslPolicy(global::Google.Cloud.Compute.V1.SetSslPolicyTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSslPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the SSL policy for TargetHttpsProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the HTTPS proxy load balancer. They do not affect the connection between the load balancer and the backends.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetSslPolicy(global::Google.Cloud.Compute.V1.SetSslPolicyTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSslPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the SSL policy for TargetHttpsProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the HTTPS proxy load balancer. They do not affect the connection between the load balancer and the backends.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetSslPolicyAsync(global::Google.Cloud.Compute.V1.SetSslPolicyTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSslPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the SSL policy for TargetHttpsProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the HTTPS proxy load balancer. They do not affect the connection between the load balancer and the backends.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetSslPolicyAsync(global::Google.Cloud.Compute.V1.SetSslPolicyTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSslPolicy, null, options, request);
      }
      /// <summary>
      /// Changes the URL map for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetUrlMap(global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetUrlMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the URL map for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetUrlMap(global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetUrlMap, null, options, request);
      }
      /// <summary>
      /// Changes the URL map for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetUrlMapAsync(global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpsProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetUrlMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the URL map for TargetHttpsProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetUrlMapAsync(global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpsProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetUrlMap, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TargetHttpsProxiesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TargetHttpsProxiesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TargetHttpsProxiesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_SetQuicOverride, serviceImpl.SetQuicOverride)
          .AddMethod(__Method_SetSslCertificates, serviceImpl.SetSslCertificates)
          .AddMethod(__Method_SetSslPolicy, serviceImpl.SetSslPolicy)
          .AddMethod(__Method_SetUrlMap, serviceImpl.SetUrlMap).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TargetHttpsProxiesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListTargetHttpsProxiesRequest, global::Google.Cloud.Compute.V1.TargetHttpsProxyAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.TargetHttpsProxy>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListTargetHttpsProxiesRequest, global::Google.Cloud.Compute.V1.TargetHttpsProxyList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_SetQuicOverride, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetQuicOverrideTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetQuicOverride));
      serviceBinder.AddMethod(__Method_SetSslCertificates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetSslCertificatesTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetSslCertificates));
      serviceBinder.AddMethod(__Method_SetSslPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetSslPolicyTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetSslPolicy));
      serviceBinder.AddMethod(__Method_SetUrlMap, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetUrlMapTargetHttpsProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetUrlMap));
    }

  }
  /// <summary>
  /// The TargetInstances API.
  /// </summary>
  public static partial class TargetInstances
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.TargetInstances";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListTargetInstancesRequest> __Marshaller_google_cloud_compute_v1_AggregatedListTargetInstancesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListTargetInstancesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetInstanceAggregatedList> __Marshaller_google_cloud_compute_v1_TargetInstanceAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetInstanceAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteTargetInstanceRequest> __Marshaller_google_cloud_compute_v1_DeleteTargetInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteTargetInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetTargetInstanceRequest> __Marshaller_google_cloud_compute_v1_GetTargetInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetTargetInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetInstance> __Marshaller_google_cloud_compute_v1_TargetInstance = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetInstance.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertTargetInstanceRequest> __Marshaller_google_cloud_compute_v1_InsertTargetInstanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertTargetInstanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListTargetInstancesRequest> __Marshaller_google_cloud_compute_v1_ListTargetInstancesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListTargetInstancesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetInstanceList> __Marshaller_google_cloud_compute_v1_TargetInstanceList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetInstanceList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListTargetInstancesRequest, global::Google.Cloud.Compute.V1.TargetInstanceAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListTargetInstancesRequest, global::Google.Cloud.Compute.V1.TargetInstanceAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListTargetInstancesRequest,
        __Marshaller_google_cloud_compute_v1_TargetInstanceAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteTargetInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteTargetInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteTargetInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetTargetInstanceRequest, global::Google.Cloud.Compute.V1.TargetInstance> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetTargetInstanceRequest, global::Google.Cloud.Compute.V1.TargetInstance>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetTargetInstanceRequest,
        __Marshaller_google_cloud_compute_v1_TargetInstance);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertTargetInstanceRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertTargetInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertTargetInstanceRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListTargetInstancesRequest, global::Google.Cloud.Compute.V1.TargetInstanceList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListTargetInstancesRequest, global::Google.Cloud.Compute.V1.TargetInstanceList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListTargetInstancesRequest,
        __Marshaller_google_cloud_compute_v1_TargetInstanceList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[63]; }
    }

    /// <summary>Base class for server-side implementations of TargetInstances</summary>
    [grpc::BindServiceMethod(typeof(TargetInstances), "BindService")]
    public abstract partial class TargetInstancesBase
    {
      /// <summary>
      /// Retrieves an aggregated list of target instances.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetInstanceAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListTargetInstancesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified TargetInstance resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteTargetInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified TargetInstance resource. Gets a list of available target instances by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetInstance> Get(global::Google.Cloud.Compute.V1.GetTargetInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a TargetInstance resource in the specified project and zone using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertTargetInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of TargetInstance resources available to the specified project and zone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetInstanceList> List(global::Google.Cloud.Compute.V1.ListTargetInstancesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TargetInstances</summary>
    public partial class TargetInstancesClient : grpc::ClientBase<TargetInstancesClient>
    {
      /// <summary>Creates a new client for TargetInstances</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TargetInstancesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TargetInstances that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TargetInstancesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TargetInstancesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TargetInstancesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of target instances.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetInstanceAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListTargetInstancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of target instances.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetInstanceAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListTargetInstancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of target instances.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetInstanceAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListTargetInstancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of target instances.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetInstanceAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListTargetInstancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified TargetInstance resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteTargetInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified TargetInstance resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteTargetInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified TargetInstance resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteTargetInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified TargetInstance resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteTargetInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified TargetInstance resource. Gets a list of available target instances by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetInstance Get(global::Google.Cloud.Compute.V1.GetTargetInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified TargetInstance resource. Gets a list of available target instances by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetInstance Get(global::Google.Cloud.Compute.V1.GetTargetInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified TargetInstance resource. Gets a list of available target instances by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetInstance> GetAsync(global::Google.Cloud.Compute.V1.GetTargetInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified TargetInstance resource. Gets a list of available target instances by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetInstance> GetAsync(global::Google.Cloud.Compute.V1.GetTargetInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a TargetInstance resource in the specified project and zone using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertTargetInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TargetInstance resource in the specified project and zone using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertTargetInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a TargetInstance resource in the specified project and zone using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertTargetInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TargetInstance resource in the specified project and zone using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertTargetInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of TargetInstance resources available to the specified project and zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetInstanceList List(global::Google.Cloud.Compute.V1.ListTargetInstancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of TargetInstance resources available to the specified project and zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetInstanceList List(global::Google.Cloud.Compute.V1.ListTargetInstancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of TargetInstance resources available to the specified project and zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetInstanceList> ListAsync(global::Google.Cloud.Compute.V1.ListTargetInstancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of TargetInstance resources available to the specified project and zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetInstanceList> ListAsync(global::Google.Cloud.Compute.V1.ListTargetInstancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TargetInstancesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TargetInstancesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TargetInstancesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TargetInstancesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListTargetInstancesRequest, global::Google.Cloud.Compute.V1.TargetInstanceAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteTargetInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetTargetInstanceRequest, global::Google.Cloud.Compute.V1.TargetInstance>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertTargetInstanceRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListTargetInstancesRequest, global::Google.Cloud.Compute.V1.TargetInstanceList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The TargetPools API.
  /// </summary>
  public static partial class TargetPools
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.TargetPools";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AddHealthCheckTargetPoolRequest> __Marshaller_google_cloud_compute_v1_AddHealthCheckTargetPoolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AddHealthCheckTargetPoolRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AddInstanceTargetPoolRequest> __Marshaller_google_cloud_compute_v1_AddInstanceTargetPoolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AddInstanceTargetPoolRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListTargetPoolsRequest> __Marshaller_google_cloud_compute_v1_AggregatedListTargetPoolsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListTargetPoolsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetPoolAggregatedList> __Marshaller_google_cloud_compute_v1_TargetPoolAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetPoolAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteTargetPoolRequest> __Marshaller_google_cloud_compute_v1_DeleteTargetPoolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteTargetPoolRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetTargetPoolRequest> __Marshaller_google_cloud_compute_v1_GetTargetPoolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetTargetPoolRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetPool> __Marshaller_google_cloud_compute_v1_TargetPool = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetPool.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetHealthTargetPoolRequest> __Marshaller_google_cloud_compute_v1_GetHealthTargetPoolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetHealthTargetPoolRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetPoolInstanceHealth> __Marshaller_google_cloud_compute_v1_TargetPoolInstanceHealth = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetPoolInstanceHealth.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertTargetPoolRequest> __Marshaller_google_cloud_compute_v1_InsertTargetPoolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertTargetPoolRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListTargetPoolsRequest> __Marshaller_google_cloud_compute_v1_ListTargetPoolsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListTargetPoolsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetPoolList> __Marshaller_google_cloud_compute_v1_TargetPoolList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetPoolList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RemoveHealthCheckTargetPoolRequest> __Marshaller_google_cloud_compute_v1_RemoveHealthCheckTargetPoolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RemoveHealthCheckTargetPoolRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.RemoveInstanceTargetPoolRequest> __Marshaller_google_cloud_compute_v1_RemoveInstanceTargetPoolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.RemoveInstanceTargetPoolRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetBackupTargetPoolRequest> __Marshaller_google_cloud_compute_v1_SetBackupTargetPoolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetBackupTargetPoolRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AddHealthCheckTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation> __Method_AddHealthCheck = new grpc::Method<global::Google.Cloud.Compute.V1.AddHealthCheckTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddHealthCheck",
        __Marshaller_google_cloud_compute_v1_AddHealthCheckTargetPoolRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AddInstanceTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation> __Method_AddInstance = new grpc::Method<global::Google.Cloud.Compute.V1.AddInstanceTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddInstance",
        __Marshaller_google_cloud_compute_v1_AddInstanceTargetPoolRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListTargetPoolsRequest, global::Google.Cloud.Compute.V1.TargetPoolAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListTargetPoolsRequest, global::Google.Cloud.Compute.V1.TargetPoolAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListTargetPoolsRequest,
        __Marshaller_google_cloud_compute_v1_TargetPoolAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteTargetPoolRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetTargetPoolRequest, global::Google.Cloud.Compute.V1.TargetPool> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetTargetPoolRequest, global::Google.Cloud.Compute.V1.TargetPool>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetTargetPoolRequest,
        __Marshaller_google_cloud_compute_v1_TargetPool);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetHealthTargetPoolRequest, global::Google.Cloud.Compute.V1.TargetPoolInstanceHealth> __Method_GetHealth = new grpc::Method<global::Google.Cloud.Compute.V1.GetHealthTargetPoolRequest, global::Google.Cloud.Compute.V1.TargetPoolInstanceHealth>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHealth",
        __Marshaller_google_cloud_compute_v1_GetHealthTargetPoolRequest,
        __Marshaller_google_cloud_compute_v1_TargetPoolInstanceHealth);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertTargetPoolRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListTargetPoolsRequest, global::Google.Cloud.Compute.V1.TargetPoolList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListTargetPoolsRequest, global::Google.Cloud.Compute.V1.TargetPoolList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListTargetPoolsRequest,
        __Marshaller_google_cloud_compute_v1_TargetPoolList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.RemoveHealthCheckTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation> __Method_RemoveHealthCheck = new grpc::Method<global::Google.Cloud.Compute.V1.RemoveHealthCheckTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveHealthCheck",
        __Marshaller_google_cloud_compute_v1_RemoveHealthCheckTargetPoolRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.RemoveInstanceTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation> __Method_RemoveInstance = new grpc::Method<global::Google.Cloud.Compute.V1.RemoveInstanceTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveInstance",
        __Marshaller_google_cloud_compute_v1_RemoveInstanceTargetPoolRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetBackupTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetBackup = new grpc::Method<global::Google.Cloud.Compute.V1.SetBackupTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetBackup",
        __Marshaller_google_cloud_compute_v1_SetBackupTargetPoolRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[64]; }
    }

    /// <summary>Base class for server-side implementations of TargetPools</summary>
    [grpc::BindServiceMethod(typeof(TargetPools), "BindService")]
    public abstract partial class TargetPoolsBase
    {
      /// <summary>
      /// Adds health check URLs to a target pool.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> AddHealthCheck(global::Google.Cloud.Compute.V1.AddHealthCheckTargetPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Adds an instance to a target pool.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> AddInstance(global::Google.Cloud.Compute.V1.AddInstanceTargetPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves an aggregated list of target pools.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetPoolAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListTargetPoolsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified target pool.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteTargetPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified target pool. Gets a list of available target pools by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetPool> Get(global::Google.Cloud.Compute.V1.GetTargetPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the most recent health check results for each IP for the instance that is referenced by the given target pool.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetPoolInstanceHealth> GetHealth(global::Google.Cloud.Compute.V1.GetHealthTargetPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a target pool in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertTargetPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of target pools available to the specified project and region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetPoolList> List(global::Google.Cloud.Compute.V1.ListTargetPoolsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes health check URL from a target pool.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> RemoveHealthCheck(global::Google.Cloud.Compute.V1.RemoveHealthCheckTargetPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes instance URL from a target pool.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> RemoveInstance(global::Google.Cloud.Compute.V1.RemoveInstanceTargetPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Changes a backup target pool's configurations.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetBackup(global::Google.Cloud.Compute.V1.SetBackupTargetPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TargetPools</summary>
    public partial class TargetPoolsClient : grpc::ClientBase<TargetPoolsClient>
    {
      /// <summary>Creates a new client for TargetPools</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TargetPoolsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TargetPools that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TargetPoolsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TargetPoolsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TargetPoolsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Adds health check URLs to a target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddHealthCheck(global::Google.Cloud.Compute.V1.AddHealthCheckTargetPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddHealthCheck(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds health check URLs to a target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddHealthCheck(global::Google.Cloud.Compute.V1.AddHealthCheckTargetPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddHealthCheck, null, options, request);
      }
      /// <summary>
      /// Adds health check URLs to a target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddHealthCheckAsync(global::Google.Cloud.Compute.V1.AddHealthCheckTargetPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddHealthCheckAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds health check URLs to a target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddHealthCheckAsync(global::Google.Cloud.Compute.V1.AddHealthCheckTargetPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddHealthCheck, null, options, request);
      }
      /// <summary>
      /// Adds an instance to a target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddInstance(global::Google.Cloud.Compute.V1.AddInstanceTargetPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddInstance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds an instance to a target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation AddInstance(global::Google.Cloud.Compute.V1.AddInstanceTargetPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddInstance, null, options, request);
      }
      /// <summary>
      /// Adds an instance to a target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddInstanceAsync(global::Google.Cloud.Compute.V1.AddInstanceTargetPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddInstanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds an instance to a target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> AddInstanceAsync(global::Google.Cloud.Compute.V1.AddInstanceTargetPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddInstance, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of target pools.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetPoolAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListTargetPoolsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of target pools.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetPoolAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListTargetPoolsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of target pools.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetPoolAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListTargetPoolsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of target pools.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetPoolAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListTargetPoolsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteTargetPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteTargetPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteTargetPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteTargetPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified target pool. Gets a list of available target pools by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetPool Get(global::Google.Cloud.Compute.V1.GetTargetPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified target pool. Gets a list of available target pools by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetPool Get(global::Google.Cloud.Compute.V1.GetTargetPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified target pool. Gets a list of available target pools by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetPool> GetAsync(global::Google.Cloud.Compute.V1.GetTargetPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified target pool. Gets a list of available target pools by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetPool> GetAsync(global::Google.Cloud.Compute.V1.GetTargetPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Gets the most recent health check results for each IP for the instance that is referenced by the given target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetPoolInstanceHealth GetHealth(global::Google.Cloud.Compute.V1.GetHealthTargetPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHealth(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the most recent health check results for each IP for the instance that is referenced by the given target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetPoolInstanceHealth GetHealth(global::Google.Cloud.Compute.V1.GetHealthTargetPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHealth, null, options, request);
      }
      /// <summary>
      /// Gets the most recent health check results for each IP for the instance that is referenced by the given target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetPoolInstanceHealth> GetHealthAsync(global::Google.Cloud.Compute.V1.GetHealthTargetPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHealthAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the most recent health check results for each IP for the instance that is referenced by the given target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetPoolInstanceHealth> GetHealthAsync(global::Google.Cloud.Compute.V1.GetHealthTargetPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHealth, null, options, request);
      }
      /// <summary>
      /// Creates a target pool in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertTargetPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a target pool in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertTargetPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a target pool in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertTargetPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a target pool in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertTargetPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of target pools available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetPoolList List(global::Google.Cloud.Compute.V1.ListTargetPoolsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of target pools available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetPoolList List(global::Google.Cloud.Compute.V1.ListTargetPoolsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of target pools available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetPoolList> ListAsync(global::Google.Cloud.Compute.V1.ListTargetPoolsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of target pools available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetPoolList> ListAsync(global::Google.Cloud.Compute.V1.ListTargetPoolsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Removes health check URL from a target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RemoveHealthCheck(global::Google.Cloud.Compute.V1.RemoveHealthCheckTargetPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveHealthCheck(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes health check URL from a target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RemoveHealthCheck(global::Google.Cloud.Compute.V1.RemoveHealthCheckTargetPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveHealthCheck, null, options, request);
      }
      /// <summary>
      /// Removes health check URL from a target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RemoveHealthCheckAsync(global::Google.Cloud.Compute.V1.RemoveHealthCheckTargetPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveHealthCheckAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes health check URL from a target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RemoveHealthCheckAsync(global::Google.Cloud.Compute.V1.RemoveHealthCheckTargetPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveHealthCheck, null, options, request);
      }
      /// <summary>
      /// Removes instance URL from a target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RemoveInstance(global::Google.Cloud.Compute.V1.RemoveInstanceTargetPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveInstance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes instance URL from a target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation RemoveInstance(global::Google.Cloud.Compute.V1.RemoveInstanceTargetPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveInstance, null, options, request);
      }
      /// <summary>
      /// Removes instance URL from a target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RemoveInstanceAsync(global::Google.Cloud.Compute.V1.RemoveInstanceTargetPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveInstanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes instance URL from a target pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> RemoveInstanceAsync(global::Google.Cloud.Compute.V1.RemoveInstanceTargetPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveInstance, null, options, request);
      }
      /// <summary>
      /// Changes a backup target pool's configurations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetBackup(global::Google.Cloud.Compute.V1.SetBackupTargetPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetBackup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes a backup target pool's configurations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetBackup(global::Google.Cloud.Compute.V1.SetBackupTargetPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetBackup, null, options, request);
      }
      /// <summary>
      /// Changes a backup target pool's configurations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetBackupAsync(global::Google.Cloud.Compute.V1.SetBackupTargetPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetBackupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes a backup target pool's configurations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetBackupAsync(global::Google.Cloud.Compute.V1.SetBackupTargetPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetBackup, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TargetPoolsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TargetPoolsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TargetPoolsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddHealthCheck, serviceImpl.AddHealthCheck)
          .AddMethod(__Method_AddInstance, serviceImpl.AddInstance)
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetHealth, serviceImpl.GetHealth)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_RemoveHealthCheck, serviceImpl.RemoveHealthCheck)
          .AddMethod(__Method_RemoveInstance, serviceImpl.RemoveInstance)
          .AddMethod(__Method_SetBackup, serviceImpl.SetBackup).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TargetPoolsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddHealthCheck, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AddHealthCheckTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.AddHealthCheck));
      serviceBinder.AddMethod(__Method_AddInstance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AddInstanceTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.AddInstance));
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListTargetPoolsRequest, global::Google.Cloud.Compute.V1.TargetPoolAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetTargetPoolRequest, global::Google.Cloud.Compute.V1.TargetPool>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetHealth, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetHealthTargetPoolRequest, global::Google.Cloud.Compute.V1.TargetPoolInstanceHealth>(serviceImpl.GetHealth));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListTargetPoolsRequest, global::Google.Cloud.Compute.V1.TargetPoolList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_RemoveHealthCheck, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.RemoveHealthCheckTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.RemoveHealthCheck));
      serviceBinder.AddMethod(__Method_RemoveInstance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.RemoveInstanceTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.RemoveInstance));
      serviceBinder.AddMethod(__Method_SetBackup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetBackupTargetPoolRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetBackup));
    }

  }
  /// <summary>
  /// The TargetSslProxies API.
  /// </summary>
  public static partial class TargetSslProxies
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.TargetSslProxies";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteTargetSslProxyRequest> __Marshaller_google_cloud_compute_v1_DeleteTargetSslProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteTargetSslProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetTargetSslProxyRequest> __Marshaller_google_cloud_compute_v1_GetTargetSslProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetTargetSslProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetSslProxy> __Marshaller_google_cloud_compute_v1_TargetSslProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetSslProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertTargetSslProxyRequest> __Marshaller_google_cloud_compute_v1_InsertTargetSslProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertTargetSslProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListTargetSslProxiesRequest> __Marshaller_google_cloud_compute_v1_ListTargetSslProxiesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListTargetSslProxiesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetSslProxyList> __Marshaller_google_cloud_compute_v1_TargetSslProxyList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetSslProxyList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetBackendServiceTargetSslProxyRequest> __Marshaller_google_cloud_compute_v1_SetBackendServiceTargetSslProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetBackendServiceTargetSslProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetProxyHeaderTargetSslProxyRequest> __Marshaller_google_cloud_compute_v1_SetProxyHeaderTargetSslProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetProxyHeaderTargetSslProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetSslCertificatesTargetSslProxyRequest> __Marshaller_google_cloud_compute_v1_SetSslCertificatesTargetSslProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetSslCertificatesTargetSslProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetSslPolicyTargetSslProxyRequest> __Marshaller_google_cloud_compute_v1_SetSslPolicyTargetSslProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetSslPolicyTargetSslProxyRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteTargetSslProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteTargetSslProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteTargetSslProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetTargetSslProxyRequest, global::Google.Cloud.Compute.V1.TargetSslProxy> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetTargetSslProxyRequest, global::Google.Cloud.Compute.V1.TargetSslProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetTargetSslProxyRequest,
        __Marshaller_google_cloud_compute_v1_TargetSslProxy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertTargetSslProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertTargetSslProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertTargetSslProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListTargetSslProxiesRequest, global::Google.Cloud.Compute.V1.TargetSslProxyList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListTargetSslProxiesRequest, global::Google.Cloud.Compute.V1.TargetSslProxyList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListTargetSslProxiesRequest,
        __Marshaller_google_cloud_compute_v1_TargetSslProxyList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetBackendServiceTargetSslProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetBackendService = new grpc::Method<global::Google.Cloud.Compute.V1.SetBackendServiceTargetSslProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetBackendService",
        __Marshaller_google_cloud_compute_v1_SetBackendServiceTargetSslProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetProxyHeaderTargetSslProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetProxyHeader = new grpc::Method<global::Google.Cloud.Compute.V1.SetProxyHeaderTargetSslProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetProxyHeader",
        __Marshaller_google_cloud_compute_v1_SetProxyHeaderTargetSslProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetSslCertificatesTargetSslProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetSslCertificates = new grpc::Method<global::Google.Cloud.Compute.V1.SetSslCertificatesTargetSslProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetSslCertificates",
        __Marshaller_google_cloud_compute_v1_SetSslCertificatesTargetSslProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetSslPolicyTargetSslProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetSslPolicy = new grpc::Method<global::Google.Cloud.Compute.V1.SetSslPolicyTargetSslProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetSslPolicy",
        __Marshaller_google_cloud_compute_v1_SetSslPolicyTargetSslProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[65]; }
    }

    /// <summary>Base class for server-side implementations of TargetSslProxies</summary>
    [grpc::BindServiceMethod(typeof(TargetSslProxies), "BindService")]
    public abstract partial class TargetSslProxiesBase
    {
      /// <summary>
      /// Deletes the specified TargetSslProxy resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteTargetSslProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified TargetSslProxy resource. Gets a list of available target SSL proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetSslProxy> Get(global::Google.Cloud.Compute.V1.GetTargetSslProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a TargetSslProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertTargetSslProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of TargetSslProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetSslProxyList> List(global::Google.Cloud.Compute.V1.ListTargetSslProxiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Changes the BackendService for TargetSslProxy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetBackendService(global::Google.Cloud.Compute.V1.SetBackendServiceTargetSslProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Changes the ProxyHeaderType for TargetSslProxy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetProxyHeader(global::Google.Cloud.Compute.V1.SetProxyHeaderTargetSslProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Changes SslCertificates for TargetSslProxy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetSslCertificates(global::Google.Cloud.Compute.V1.SetSslCertificatesTargetSslProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the SSL policy for TargetSslProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the SSL proxy load balancer. They do not affect the connection between the load balancer and the backends.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetSslPolicy(global::Google.Cloud.Compute.V1.SetSslPolicyTargetSslProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TargetSslProxies</summary>
    public partial class TargetSslProxiesClient : grpc::ClientBase<TargetSslProxiesClient>
    {
      /// <summary>Creates a new client for TargetSslProxies</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TargetSslProxiesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TargetSslProxies that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TargetSslProxiesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TargetSslProxiesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TargetSslProxiesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified TargetSslProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteTargetSslProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified TargetSslProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteTargetSslProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified TargetSslProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteTargetSslProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified TargetSslProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteTargetSslProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified TargetSslProxy resource. Gets a list of available target SSL proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetSslProxy Get(global::Google.Cloud.Compute.V1.GetTargetSslProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified TargetSslProxy resource. Gets a list of available target SSL proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetSslProxy Get(global::Google.Cloud.Compute.V1.GetTargetSslProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified TargetSslProxy resource. Gets a list of available target SSL proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetSslProxy> GetAsync(global::Google.Cloud.Compute.V1.GetTargetSslProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified TargetSslProxy resource. Gets a list of available target SSL proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetSslProxy> GetAsync(global::Google.Cloud.Compute.V1.GetTargetSslProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a TargetSslProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertTargetSslProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TargetSslProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertTargetSslProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a TargetSslProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertTargetSslProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TargetSslProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertTargetSslProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of TargetSslProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetSslProxyList List(global::Google.Cloud.Compute.V1.ListTargetSslProxiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of TargetSslProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetSslProxyList List(global::Google.Cloud.Compute.V1.ListTargetSslProxiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of TargetSslProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetSslProxyList> ListAsync(global::Google.Cloud.Compute.V1.ListTargetSslProxiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of TargetSslProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetSslProxyList> ListAsync(global::Google.Cloud.Compute.V1.ListTargetSslProxiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Changes the BackendService for TargetSslProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetBackendService(global::Google.Cloud.Compute.V1.SetBackendServiceTargetSslProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetBackendService(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the BackendService for TargetSslProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetBackendService(global::Google.Cloud.Compute.V1.SetBackendServiceTargetSslProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetBackendService, null, options, request);
      }
      /// <summary>
      /// Changes the BackendService for TargetSslProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetBackendServiceAsync(global::Google.Cloud.Compute.V1.SetBackendServiceTargetSslProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetBackendServiceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the BackendService for TargetSslProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetBackendServiceAsync(global::Google.Cloud.Compute.V1.SetBackendServiceTargetSslProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetBackendService, null, options, request);
      }
      /// <summary>
      /// Changes the ProxyHeaderType for TargetSslProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetProxyHeader(global::Google.Cloud.Compute.V1.SetProxyHeaderTargetSslProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetProxyHeader(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the ProxyHeaderType for TargetSslProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetProxyHeader(global::Google.Cloud.Compute.V1.SetProxyHeaderTargetSslProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetProxyHeader, null, options, request);
      }
      /// <summary>
      /// Changes the ProxyHeaderType for TargetSslProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetProxyHeaderAsync(global::Google.Cloud.Compute.V1.SetProxyHeaderTargetSslProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetProxyHeaderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the ProxyHeaderType for TargetSslProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetProxyHeaderAsync(global::Google.Cloud.Compute.V1.SetProxyHeaderTargetSslProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetProxyHeader, null, options, request);
      }
      /// <summary>
      /// Changes SslCertificates for TargetSslProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetSslCertificates(global::Google.Cloud.Compute.V1.SetSslCertificatesTargetSslProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSslCertificates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes SslCertificates for TargetSslProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetSslCertificates(global::Google.Cloud.Compute.V1.SetSslCertificatesTargetSslProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSslCertificates, null, options, request);
      }
      /// <summary>
      /// Changes SslCertificates for TargetSslProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetSslCertificatesAsync(global::Google.Cloud.Compute.V1.SetSslCertificatesTargetSslProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSslCertificatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes SslCertificates for TargetSslProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetSslCertificatesAsync(global::Google.Cloud.Compute.V1.SetSslCertificatesTargetSslProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSslCertificates, null, options, request);
      }
      /// <summary>
      /// Sets the SSL policy for TargetSslProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the SSL proxy load balancer. They do not affect the connection between the load balancer and the backends.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetSslPolicy(global::Google.Cloud.Compute.V1.SetSslPolicyTargetSslProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSslPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the SSL policy for TargetSslProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the SSL proxy load balancer. They do not affect the connection between the load balancer and the backends.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetSslPolicy(global::Google.Cloud.Compute.V1.SetSslPolicyTargetSslProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSslPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the SSL policy for TargetSslProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the SSL proxy load balancer. They do not affect the connection between the load balancer and the backends.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetSslPolicyAsync(global::Google.Cloud.Compute.V1.SetSslPolicyTargetSslProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSslPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the SSL policy for TargetSslProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the SSL proxy load balancer. They do not affect the connection between the load balancer and the backends.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetSslPolicyAsync(global::Google.Cloud.Compute.V1.SetSslPolicyTargetSslProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSslPolicy, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TargetSslProxiesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TargetSslProxiesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TargetSslProxiesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_SetBackendService, serviceImpl.SetBackendService)
          .AddMethod(__Method_SetProxyHeader, serviceImpl.SetProxyHeader)
          .AddMethod(__Method_SetSslCertificates, serviceImpl.SetSslCertificates)
          .AddMethod(__Method_SetSslPolicy, serviceImpl.SetSslPolicy).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TargetSslProxiesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteTargetSslProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetTargetSslProxyRequest, global::Google.Cloud.Compute.V1.TargetSslProxy>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertTargetSslProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListTargetSslProxiesRequest, global::Google.Cloud.Compute.V1.TargetSslProxyList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_SetBackendService, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetBackendServiceTargetSslProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetBackendService));
      serviceBinder.AddMethod(__Method_SetProxyHeader, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetProxyHeaderTargetSslProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetProxyHeader));
      serviceBinder.AddMethod(__Method_SetSslCertificates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetSslCertificatesTargetSslProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetSslCertificates));
      serviceBinder.AddMethod(__Method_SetSslPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetSslPolicyTargetSslProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetSslPolicy));
    }

  }
  /// <summary>
  /// The TargetTcpProxies API.
  /// </summary>
  public static partial class TargetTcpProxies
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.TargetTcpProxies";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteTargetTcpProxyRequest> __Marshaller_google_cloud_compute_v1_DeleteTargetTcpProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteTargetTcpProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetTargetTcpProxyRequest> __Marshaller_google_cloud_compute_v1_GetTargetTcpProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetTargetTcpProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetTcpProxy> __Marshaller_google_cloud_compute_v1_TargetTcpProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetTcpProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertTargetTcpProxyRequest> __Marshaller_google_cloud_compute_v1_InsertTargetTcpProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertTargetTcpProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListTargetTcpProxiesRequest> __Marshaller_google_cloud_compute_v1_ListTargetTcpProxiesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListTargetTcpProxiesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetTcpProxyList> __Marshaller_google_cloud_compute_v1_TargetTcpProxyList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetTcpProxyList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetBackendServiceTargetTcpProxyRequest> __Marshaller_google_cloud_compute_v1_SetBackendServiceTargetTcpProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetBackendServiceTargetTcpProxyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetProxyHeaderTargetTcpProxyRequest> __Marshaller_google_cloud_compute_v1_SetProxyHeaderTargetTcpProxyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetProxyHeaderTargetTcpProxyRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteTargetTcpProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteTargetTcpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteTargetTcpProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetTargetTcpProxyRequest, global::Google.Cloud.Compute.V1.TargetTcpProxy> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetTargetTcpProxyRequest, global::Google.Cloud.Compute.V1.TargetTcpProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetTargetTcpProxyRequest,
        __Marshaller_google_cloud_compute_v1_TargetTcpProxy);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertTargetTcpProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertTargetTcpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertTargetTcpProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListTargetTcpProxiesRequest, global::Google.Cloud.Compute.V1.TargetTcpProxyList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListTargetTcpProxiesRequest, global::Google.Cloud.Compute.V1.TargetTcpProxyList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListTargetTcpProxiesRequest,
        __Marshaller_google_cloud_compute_v1_TargetTcpProxyList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetBackendServiceTargetTcpProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetBackendService = new grpc::Method<global::Google.Cloud.Compute.V1.SetBackendServiceTargetTcpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetBackendService",
        __Marshaller_google_cloud_compute_v1_SetBackendServiceTargetTcpProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetProxyHeaderTargetTcpProxyRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetProxyHeader = new grpc::Method<global::Google.Cloud.Compute.V1.SetProxyHeaderTargetTcpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetProxyHeader",
        __Marshaller_google_cloud_compute_v1_SetProxyHeaderTargetTcpProxyRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[66]; }
    }

    /// <summary>Base class for server-side implementations of TargetTcpProxies</summary>
    [grpc::BindServiceMethod(typeof(TargetTcpProxies), "BindService")]
    public abstract partial class TargetTcpProxiesBase
    {
      /// <summary>
      /// Deletes the specified TargetTcpProxy resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteTargetTcpProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified TargetTcpProxy resource. Gets a list of available target TCP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetTcpProxy> Get(global::Google.Cloud.Compute.V1.GetTargetTcpProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a TargetTcpProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertTargetTcpProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of TargetTcpProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetTcpProxyList> List(global::Google.Cloud.Compute.V1.ListTargetTcpProxiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Changes the BackendService for TargetTcpProxy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetBackendService(global::Google.Cloud.Compute.V1.SetBackendServiceTargetTcpProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Changes the ProxyHeaderType for TargetTcpProxy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetProxyHeader(global::Google.Cloud.Compute.V1.SetProxyHeaderTargetTcpProxyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TargetTcpProxies</summary>
    public partial class TargetTcpProxiesClient : grpc::ClientBase<TargetTcpProxiesClient>
    {
      /// <summary>Creates a new client for TargetTcpProxies</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TargetTcpProxiesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TargetTcpProxies that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TargetTcpProxiesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TargetTcpProxiesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TargetTcpProxiesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified TargetTcpProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteTargetTcpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified TargetTcpProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteTargetTcpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified TargetTcpProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteTargetTcpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified TargetTcpProxy resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteTargetTcpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified TargetTcpProxy resource. Gets a list of available target TCP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetTcpProxy Get(global::Google.Cloud.Compute.V1.GetTargetTcpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified TargetTcpProxy resource. Gets a list of available target TCP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetTcpProxy Get(global::Google.Cloud.Compute.V1.GetTargetTcpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified TargetTcpProxy resource. Gets a list of available target TCP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetTcpProxy> GetAsync(global::Google.Cloud.Compute.V1.GetTargetTcpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified TargetTcpProxy resource. Gets a list of available target TCP proxies by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetTcpProxy> GetAsync(global::Google.Cloud.Compute.V1.GetTargetTcpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a TargetTcpProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertTargetTcpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TargetTcpProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertTargetTcpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a TargetTcpProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertTargetTcpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TargetTcpProxy resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertTargetTcpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of TargetTcpProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetTcpProxyList List(global::Google.Cloud.Compute.V1.ListTargetTcpProxiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of TargetTcpProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetTcpProxyList List(global::Google.Cloud.Compute.V1.ListTargetTcpProxiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of TargetTcpProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetTcpProxyList> ListAsync(global::Google.Cloud.Compute.V1.ListTargetTcpProxiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of TargetTcpProxy resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetTcpProxyList> ListAsync(global::Google.Cloud.Compute.V1.ListTargetTcpProxiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Changes the BackendService for TargetTcpProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetBackendService(global::Google.Cloud.Compute.V1.SetBackendServiceTargetTcpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetBackendService(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the BackendService for TargetTcpProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetBackendService(global::Google.Cloud.Compute.V1.SetBackendServiceTargetTcpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetBackendService, null, options, request);
      }
      /// <summary>
      /// Changes the BackendService for TargetTcpProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetBackendServiceAsync(global::Google.Cloud.Compute.V1.SetBackendServiceTargetTcpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetBackendServiceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the BackendService for TargetTcpProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetBackendServiceAsync(global::Google.Cloud.Compute.V1.SetBackendServiceTargetTcpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetBackendService, null, options, request);
      }
      /// <summary>
      /// Changes the ProxyHeaderType for TargetTcpProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetProxyHeader(global::Google.Cloud.Compute.V1.SetProxyHeaderTargetTcpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetProxyHeader(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the ProxyHeaderType for TargetTcpProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetProxyHeader(global::Google.Cloud.Compute.V1.SetProxyHeaderTargetTcpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetProxyHeader, null, options, request);
      }
      /// <summary>
      /// Changes the ProxyHeaderType for TargetTcpProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetProxyHeaderAsync(global::Google.Cloud.Compute.V1.SetProxyHeaderTargetTcpProxyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetProxyHeaderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the ProxyHeaderType for TargetTcpProxy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetProxyHeaderAsync(global::Google.Cloud.Compute.V1.SetProxyHeaderTargetTcpProxyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetProxyHeader, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TargetTcpProxiesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TargetTcpProxiesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TargetTcpProxiesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_SetBackendService, serviceImpl.SetBackendService)
          .AddMethod(__Method_SetProxyHeader, serviceImpl.SetProxyHeader).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TargetTcpProxiesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteTargetTcpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetTargetTcpProxyRequest, global::Google.Cloud.Compute.V1.TargetTcpProxy>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertTargetTcpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListTargetTcpProxiesRequest, global::Google.Cloud.Compute.V1.TargetTcpProxyList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_SetBackendService, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetBackendServiceTargetTcpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetBackendService));
      serviceBinder.AddMethod(__Method_SetProxyHeader, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetProxyHeaderTargetTcpProxyRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetProxyHeader));
    }

  }
  /// <summary>
  /// The TargetVpnGateways API.
  /// </summary>
  public static partial class TargetVpnGateways
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.TargetVpnGateways";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListTargetVpnGatewaysRequest> __Marshaller_google_cloud_compute_v1_AggregatedListTargetVpnGatewaysRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListTargetVpnGatewaysRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetVpnGatewayAggregatedList> __Marshaller_google_cloud_compute_v1_TargetVpnGatewayAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetVpnGatewayAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteTargetVpnGatewayRequest> __Marshaller_google_cloud_compute_v1_DeleteTargetVpnGatewayRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteTargetVpnGatewayRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetTargetVpnGatewayRequest> __Marshaller_google_cloud_compute_v1_GetTargetVpnGatewayRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetTargetVpnGatewayRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetVpnGateway> __Marshaller_google_cloud_compute_v1_TargetVpnGateway = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetVpnGateway.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertTargetVpnGatewayRequest> __Marshaller_google_cloud_compute_v1_InsertTargetVpnGatewayRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertTargetVpnGatewayRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListTargetVpnGatewaysRequest> __Marshaller_google_cloud_compute_v1_ListTargetVpnGatewaysRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListTargetVpnGatewaysRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TargetVpnGatewayList> __Marshaller_google_cloud_compute_v1_TargetVpnGatewayList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TargetVpnGatewayList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListTargetVpnGatewaysRequest, global::Google.Cloud.Compute.V1.TargetVpnGatewayAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListTargetVpnGatewaysRequest, global::Google.Cloud.Compute.V1.TargetVpnGatewayAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListTargetVpnGatewaysRequest,
        __Marshaller_google_cloud_compute_v1_TargetVpnGatewayAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteTargetVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteTargetVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteTargetVpnGatewayRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetTargetVpnGatewayRequest, global::Google.Cloud.Compute.V1.TargetVpnGateway> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetTargetVpnGatewayRequest, global::Google.Cloud.Compute.V1.TargetVpnGateway>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetTargetVpnGatewayRequest,
        __Marshaller_google_cloud_compute_v1_TargetVpnGateway);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertTargetVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertTargetVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertTargetVpnGatewayRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListTargetVpnGatewaysRequest, global::Google.Cloud.Compute.V1.TargetVpnGatewayList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListTargetVpnGatewaysRequest, global::Google.Cloud.Compute.V1.TargetVpnGatewayList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListTargetVpnGatewaysRequest,
        __Marshaller_google_cloud_compute_v1_TargetVpnGatewayList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[67]; }
    }

    /// <summary>Base class for server-side implementations of TargetVpnGateways</summary>
    [grpc::BindServiceMethod(typeof(TargetVpnGateways), "BindService")]
    public abstract partial class TargetVpnGatewaysBase
    {
      /// <summary>
      /// Retrieves an aggregated list of target VPN gateways.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetVpnGatewayAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListTargetVpnGatewaysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified target VPN gateway.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteTargetVpnGatewayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified target VPN gateway. Gets a list of available target VPN gateways by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetVpnGateway> Get(global::Google.Cloud.Compute.V1.GetTargetVpnGatewayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a target VPN gateway in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertTargetVpnGatewayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of target VPN gateways available to the specified project and region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TargetVpnGatewayList> List(global::Google.Cloud.Compute.V1.ListTargetVpnGatewaysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TargetVpnGateways</summary>
    public partial class TargetVpnGatewaysClient : grpc::ClientBase<TargetVpnGatewaysClient>
    {
      /// <summary>Creates a new client for TargetVpnGateways</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TargetVpnGatewaysClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TargetVpnGateways that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TargetVpnGatewaysClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TargetVpnGatewaysClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TargetVpnGatewaysClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of target VPN gateways.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetVpnGatewayAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListTargetVpnGatewaysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of target VPN gateways.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetVpnGatewayAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListTargetVpnGatewaysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of target VPN gateways.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetVpnGatewayAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListTargetVpnGatewaysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of target VPN gateways.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetVpnGatewayAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListTargetVpnGatewaysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified target VPN gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteTargetVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified target VPN gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteTargetVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified target VPN gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteTargetVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified target VPN gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteTargetVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified target VPN gateway. Gets a list of available target VPN gateways by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetVpnGateway Get(global::Google.Cloud.Compute.V1.GetTargetVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified target VPN gateway. Gets a list of available target VPN gateways by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetVpnGateway Get(global::Google.Cloud.Compute.V1.GetTargetVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified target VPN gateway. Gets a list of available target VPN gateways by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetVpnGateway> GetAsync(global::Google.Cloud.Compute.V1.GetTargetVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified target VPN gateway. Gets a list of available target VPN gateways by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetVpnGateway> GetAsync(global::Google.Cloud.Compute.V1.GetTargetVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a target VPN gateway in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertTargetVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a target VPN gateway in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertTargetVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a target VPN gateway in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertTargetVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a target VPN gateway in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertTargetVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of target VPN gateways available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetVpnGatewayList List(global::Google.Cloud.Compute.V1.ListTargetVpnGatewaysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of target VPN gateways available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TargetVpnGatewayList List(global::Google.Cloud.Compute.V1.ListTargetVpnGatewaysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of target VPN gateways available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetVpnGatewayList> ListAsync(global::Google.Cloud.Compute.V1.ListTargetVpnGatewaysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of target VPN gateways available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TargetVpnGatewayList> ListAsync(global::Google.Cloud.Compute.V1.ListTargetVpnGatewaysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TargetVpnGatewaysClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TargetVpnGatewaysClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TargetVpnGatewaysBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TargetVpnGatewaysBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListTargetVpnGatewaysRequest, global::Google.Cloud.Compute.V1.TargetVpnGatewayAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteTargetVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetTargetVpnGatewayRequest, global::Google.Cloud.Compute.V1.TargetVpnGateway>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertTargetVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListTargetVpnGatewaysRequest, global::Google.Cloud.Compute.V1.TargetVpnGatewayList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The UrlMaps API.
  /// </summary>
  public static partial class UrlMaps
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.UrlMaps";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListUrlMapsRequest> __Marshaller_google_cloud_compute_v1_AggregatedListUrlMapsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListUrlMapsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UrlMapsAggregatedList> __Marshaller_google_cloud_compute_v1_UrlMapsAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UrlMapsAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteUrlMapRequest> __Marshaller_google_cloud_compute_v1_DeleteUrlMapRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteUrlMapRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetUrlMapRequest> __Marshaller_google_cloud_compute_v1_GetUrlMapRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetUrlMapRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UrlMap> __Marshaller_google_cloud_compute_v1_UrlMap = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UrlMap.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertUrlMapRequest> __Marshaller_google_cloud_compute_v1_InsertUrlMapRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertUrlMapRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InvalidateCacheUrlMapRequest> __Marshaller_google_cloud_compute_v1_InvalidateCacheUrlMapRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InvalidateCacheUrlMapRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListUrlMapsRequest> __Marshaller_google_cloud_compute_v1_ListUrlMapsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListUrlMapsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UrlMapList> __Marshaller_google_cloud_compute_v1_UrlMapList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UrlMapList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.PatchUrlMapRequest> __Marshaller_google_cloud_compute_v1_PatchUrlMapRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.PatchUrlMapRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UpdateUrlMapRequest> __Marshaller_google_cloud_compute_v1_UpdateUrlMapRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UpdateUrlMapRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ValidateUrlMapRequest> __Marshaller_google_cloud_compute_v1_ValidateUrlMapRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ValidateUrlMapRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.UrlMapsValidateResponse> __Marshaller_google_cloud_compute_v1_UrlMapsValidateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.UrlMapsValidateResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListUrlMapsRequest, global::Google.Cloud.Compute.V1.UrlMapsAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListUrlMapsRequest, global::Google.Cloud.Compute.V1.UrlMapsAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListUrlMapsRequest,
        __Marshaller_google_cloud_compute_v1_UrlMapsAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteUrlMapRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteUrlMapRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteUrlMapRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetUrlMapRequest, global::Google.Cloud.Compute.V1.UrlMap> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetUrlMapRequest, global::Google.Cloud.Compute.V1.UrlMap>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetUrlMapRequest,
        __Marshaller_google_cloud_compute_v1_UrlMap);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertUrlMapRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertUrlMapRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertUrlMapRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InvalidateCacheUrlMapRequest, global::Google.Cloud.Compute.V1.Operation> __Method_InvalidateCache = new grpc::Method<global::Google.Cloud.Compute.V1.InvalidateCacheUrlMapRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InvalidateCache",
        __Marshaller_google_cloud_compute_v1_InvalidateCacheUrlMapRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListUrlMapsRequest, global::Google.Cloud.Compute.V1.UrlMapList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListUrlMapsRequest, global::Google.Cloud.Compute.V1.UrlMapList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListUrlMapsRequest,
        __Marshaller_google_cloud_compute_v1_UrlMapList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.PatchUrlMapRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Patch = new grpc::Method<global::Google.Cloud.Compute.V1.PatchUrlMapRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Patch",
        __Marshaller_google_cloud_compute_v1_PatchUrlMapRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.UpdateUrlMapRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Update = new grpc::Method<global::Google.Cloud.Compute.V1.UpdateUrlMapRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_google_cloud_compute_v1_UpdateUrlMapRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ValidateUrlMapRequest, global::Google.Cloud.Compute.V1.UrlMapsValidateResponse> __Method_Validate = new grpc::Method<global::Google.Cloud.Compute.V1.ValidateUrlMapRequest, global::Google.Cloud.Compute.V1.UrlMapsValidateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Validate",
        __Marshaller_google_cloud_compute_v1_ValidateUrlMapRequest,
        __Marshaller_google_cloud_compute_v1_UrlMapsValidateResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[68]; }
    }

    /// <summary>Base class for server-side implementations of UrlMaps</summary>
    [grpc::BindServiceMethod(typeof(UrlMaps), "BindService")]
    public abstract partial class UrlMapsBase
    {
      /// <summary>
      /// Retrieves the list of all UrlMap resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.UrlMapsAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListUrlMapsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified UrlMap resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteUrlMapRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.UrlMap> Get(global::Google.Cloud.Compute.V1.GetUrlMapRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a UrlMap resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertUrlMapRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Initiates a cache invalidation operation, invalidating the specified path, scoped to the specified UrlMap.
      ///
      /// For more information, see [Invalidating cached content](/cdn/docs/invalidating-cached-content).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> InvalidateCache(global::Google.Cloud.Compute.V1.InvalidateCacheUrlMapRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of UrlMap resources available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.UrlMapList> List(global::Google.Cloud.Compute.V1.ListUrlMapsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Patch(global::Google.Cloud.Compute.V1.PatchUrlMapRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified UrlMap resource with the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Update(global::Google.Cloud.Compute.V1.UpdateUrlMapRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.UrlMapsValidateResponse> Validate(global::Google.Cloud.Compute.V1.ValidateUrlMapRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UrlMaps</summary>
    public partial class UrlMapsClient : grpc::ClientBase<UrlMapsClient>
    {
      /// <summary>Creates a new client for UrlMaps</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UrlMapsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UrlMaps that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UrlMapsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UrlMapsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UrlMapsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves the list of all UrlMap resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.UrlMapsAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListUrlMapsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of all UrlMap resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.UrlMapsAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListUrlMapsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of all UrlMap resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.UrlMapsAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListUrlMapsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of all UrlMap resources, regional and global, available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.UrlMapsAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListUrlMapsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified UrlMap resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified UrlMap resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified UrlMap resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified UrlMap resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.UrlMap Get(global::Google.Cloud.Compute.V1.GetUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.UrlMap Get(global::Google.Cloud.Compute.V1.GetUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.UrlMap> GetAsync(global::Google.Cloud.Compute.V1.GetUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.UrlMap> GetAsync(global::Google.Cloud.Compute.V1.GetUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a UrlMap resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a UrlMap resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a UrlMap resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a UrlMap resource in the specified project using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Initiates a cache invalidation operation, invalidating the specified path, scoped to the specified UrlMap.
      ///
      /// For more information, see [Invalidating cached content](/cdn/docs/invalidating-cached-content).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation InvalidateCache(global::Google.Cloud.Compute.V1.InvalidateCacheUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InvalidateCache(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initiates a cache invalidation operation, invalidating the specified path, scoped to the specified UrlMap.
      ///
      /// For more information, see [Invalidating cached content](/cdn/docs/invalidating-cached-content).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation InvalidateCache(global::Google.Cloud.Compute.V1.InvalidateCacheUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InvalidateCache, null, options, request);
      }
      /// <summary>
      /// Initiates a cache invalidation operation, invalidating the specified path, scoped to the specified UrlMap.
      ///
      /// For more information, see [Invalidating cached content](/cdn/docs/invalidating-cached-content).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InvalidateCacheAsync(global::Google.Cloud.Compute.V1.InvalidateCacheUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InvalidateCacheAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initiates a cache invalidation operation, invalidating the specified path, scoped to the specified UrlMap.
      ///
      /// For more information, see [Invalidating cached content](/cdn/docs/invalidating-cached-content).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InvalidateCacheAsync(global::Google.Cloud.Compute.V1.InvalidateCacheUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InvalidateCache, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of UrlMap resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.UrlMapList List(global::Google.Cloud.Compute.V1.ListUrlMapsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of UrlMap resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.UrlMapList List(global::Google.Cloud.Compute.V1.ListUrlMapsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of UrlMap resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.UrlMapList> ListAsync(global::Google.Cloud.Compute.V1.ListUrlMapsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of UrlMap resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.UrlMapList> ListAsync(global::Google.Cloud.Compute.V1.ListUrlMapsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Patch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Patch(global::Google.Cloud.Compute.V1.PatchUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> PatchAsync(global::Google.Cloud.Compute.V1.PatchUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Patch, null, options, request);
      }
      /// <summary>
      /// Updates the specified UrlMap resource with the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified UrlMap resource with the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Update(global::Google.Cloud.Compute.V1.UpdateUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Updates the specified UrlMap resource with the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified UrlMap resource with the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> UpdateAsync(global::Google.Cloud.Compute.V1.UpdateUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.UrlMapsValidateResponse Validate(global::Google.Cloud.Compute.V1.ValidateUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Validate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.UrlMapsValidateResponse Validate(global::Google.Cloud.Compute.V1.ValidateUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Validate, null, options, request);
      }
      /// <summary>
      /// Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.UrlMapsValidateResponse> ValidateAsync(global::Google.Cloud.Compute.V1.ValidateUrlMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.UrlMapsValidateResponse> ValidateAsync(global::Google.Cloud.Compute.V1.ValidateUrlMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Validate, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UrlMapsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UrlMapsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UrlMapsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_InvalidateCache, serviceImpl.InvalidateCache)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Patch, serviceImpl.Patch)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_Validate, serviceImpl.Validate).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, UrlMapsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListUrlMapsRequest, global::Google.Cloud.Compute.V1.UrlMapsAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteUrlMapRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetUrlMapRequest, global::Google.Cloud.Compute.V1.UrlMap>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertUrlMapRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_InvalidateCache, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InvalidateCacheUrlMapRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.InvalidateCache));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListUrlMapsRequest, global::Google.Cloud.Compute.V1.UrlMapList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Patch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.PatchUrlMapRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Patch));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.UpdateUrlMapRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Update));
      serviceBinder.AddMethod(__Method_Validate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ValidateUrlMapRequest, global::Google.Cloud.Compute.V1.UrlMapsValidateResponse>(serviceImpl.Validate));
    }

  }
  /// <summary>
  /// The VpnGateways API.
  /// </summary>
  public static partial class VpnGateways
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.VpnGateways";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListVpnGatewaysRequest> __Marshaller_google_cloud_compute_v1_AggregatedListVpnGatewaysRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListVpnGatewaysRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.VpnGatewayAggregatedList> __Marshaller_google_cloud_compute_v1_VpnGatewayAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.VpnGatewayAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteVpnGatewayRequest> __Marshaller_google_cloud_compute_v1_DeleteVpnGatewayRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteVpnGatewayRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetVpnGatewayRequest> __Marshaller_google_cloud_compute_v1_GetVpnGatewayRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetVpnGatewayRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.VpnGateway> __Marshaller_google_cloud_compute_v1_VpnGateway = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.VpnGateway.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetStatusVpnGatewayRequest> __Marshaller_google_cloud_compute_v1_GetStatusVpnGatewayRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetStatusVpnGatewayRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.VpnGatewaysGetStatusResponse> __Marshaller_google_cloud_compute_v1_VpnGatewaysGetStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.VpnGatewaysGetStatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertVpnGatewayRequest> __Marshaller_google_cloud_compute_v1_InsertVpnGatewayRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertVpnGatewayRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListVpnGatewaysRequest> __Marshaller_google_cloud_compute_v1_ListVpnGatewaysRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListVpnGatewaysRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.VpnGatewayList> __Marshaller_google_cloud_compute_v1_VpnGatewayList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.VpnGatewayList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.SetLabelsVpnGatewayRequest> __Marshaller_google_cloud_compute_v1_SetLabelsVpnGatewayRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.SetLabelsVpnGatewayRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestIamPermissionsVpnGatewayRequest> __Marshaller_google_cloud_compute_v1_TestIamPermissionsVpnGatewayRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestIamPermissionsVpnGatewayRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Marshaller_google_cloud_compute_v1_TestPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.TestPermissionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListVpnGatewaysRequest, global::Google.Cloud.Compute.V1.VpnGatewayAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListVpnGatewaysRequest, global::Google.Cloud.Compute.V1.VpnGatewayAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListVpnGatewaysRequest,
        __Marshaller_google_cloud_compute_v1_VpnGatewayAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteVpnGatewayRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetVpnGatewayRequest, global::Google.Cloud.Compute.V1.VpnGateway> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetVpnGatewayRequest, global::Google.Cloud.Compute.V1.VpnGateway>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetVpnGatewayRequest,
        __Marshaller_google_cloud_compute_v1_VpnGateway);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetStatusVpnGatewayRequest, global::Google.Cloud.Compute.V1.VpnGatewaysGetStatusResponse> __Method_GetStatus = new grpc::Method<global::Google.Cloud.Compute.V1.GetStatusVpnGatewayRequest, global::Google.Cloud.Compute.V1.VpnGatewaysGetStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStatus",
        __Marshaller_google_cloud_compute_v1_GetStatusVpnGatewayRequest,
        __Marshaller_google_cloud_compute_v1_VpnGatewaysGetStatusResponse);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertVpnGatewayRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListVpnGatewaysRequest, global::Google.Cloud.Compute.V1.VpnGatewayList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListVpnGatewaysRequest, global::Google.Cloud.Compute.V1.VpnGatewayList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListVpnGatewaysRequest,
        __Marshaller_google_cloud_compute_v1_VpnGatewayList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.SetLabelsVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation> __Method_SetLabels = new grpc::Method<global::Google.Cloud.Compute.V1.SetLabelsVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetLabels",
        __Marshaller_google_cloud_compute_v1_SetLabelsVpnGatewayRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsVpnGatewayRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Compute.V1.TestIamPermissionsVpnGatewayRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_cloud_compute_v1_TestIamPermissionsVpnGatewayRequest,
        __Marshaller_google_cloud_compute_v1_TestPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[69]; }
    }

    /// <summary>Base class for server-side implementations of VpnGateways</summary>
    [grpc::BindServiceMethod(typeof(VpnGateways), "BindService")]
    public abstract partial class VpnGatewaysBase
    {
      /// <summary>
      /// Retrieves an aggregated list of VPN gateways.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.VpnGatewayAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListVpnGatewaysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified VPN gateway.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteVpnGatewayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified VPN gateway. Gets a list of available VPN gateways by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.VpnGateway> Get(global::Google.Cloud.Compute.V1.GetVpnGatewayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the status for the specified VPN gateway.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.VpnGatewaysGetStatusResponse> GetStatus(global::Google.Cloud.Compute.V1.GetStatusVpnGatewayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a VPN gateway in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertVpnGatewayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of VPN gateways available to the specified project and region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.VpnGatewayList> List(global::Google.Cloud.Compute.V1.ListVpnGatewaysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the labels on a VpnGateway. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> SetLabels(global::Google.Cloud.Compute.V1.SetLabelsVpnGatewayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsVpnGatewayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for VpnGateways</summary>
    public partial class VpnGatewaysClient : grpc::ClientBase<VpnGatewaysClient>
    {
      /// <summary>Creates a new client for VpnGateways</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public VpnGatewaysClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for VpnGateways that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public VpnGatewaysClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected VpnGatewaysClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected VpnGatewaysClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of VPN gateways.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.VpnGatewayAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListVpnGatewaysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of VPN gateways.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.VpnGatewayAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListVpnGatewaysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of VPN gateways.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.VpnGatewayAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListVpnGatewaysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of VPN gateways.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.VpnGatewayAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListVpnGatewaysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified VPN gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified VPN gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified VPN gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified VPN gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified VPN gateway. Gets a list of available VPN gateways by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.VpnGateway Get(global::Google.Cloud.Compute.V1.GetVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified VPN gateway. Gets a list of available VPN gateways by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.VpnGateway Get(global::Google.Cloud.Compute.V1.GetVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified VPN gateway. Gets a list of available VPN gateways by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.VpnGateway> GetAsync(global::Google.Cloud.Compute.V1.GetVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified VPN gateway. Gets a list of available VPN gateways by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.VpnGateway> GetAsync(global::Google.Cloud.Compute.V1.GetVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the status for the specified VPN gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.VpnGatewaysGetStatusResponse GetStatus(global::Google.Cloud.Compute.V1.GetStatusVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the status for the specified VPN gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.VpnGatewaysGetStatusResponse GetStatus(global::Google.Cloud.Compute.V1.GetStatusVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStatus, null, options, request);
      }
      /// <summary>
      /// Returns the status for the specified VPN gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.VpnGatewaysGetStatusResponse> GetStatusAsync(global::Google.Cloud.Compute.V1.GetStatusVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the status for the specified VPN gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.VpnGatewaysGetStatusResponse> GetStatusAsync(global::Google.Cloud.Compute.V1.GetStatusVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStatus, null, options, request);
      }
      /// <summary>
      /// Creates a VPN gateway in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a VPN gateway in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a VPN gateway in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a VPN gateway in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of VPN gateways available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.VpnGatewayList List(global::Google.Cloud.Compute.V1.ListVpnGatewaysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of VPN gateways available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.VpnGatewayList List(global::Google.Cloud.Compute.V1.ListVpnGatewaysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of VPN gateways available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.VpnGatewayList> ListAsync(global::Google.Cloud.Compute.V1.ListVpnGatewaysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of VPN gateways available to the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.VpnGatewayList> ListAsync(global::Google.Cloud.Compute.V1.ListVpnGatewaysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Sets the labels on a VpnGateway. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetLabels(global::Google.Cloud.Compute.V1.SetLabelsVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLabels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the labels on a VpnGateway. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation SetLabels(global::Google.Cloud.Compute.V1.SetLabelsVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetLabels, null, options, request);
      }
      /// <summary>
      /// Sets the labels on a VpnGateway. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetLabelsAsync(global::Google.Cloud.Compute.V1.SetLabelsVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLabelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the labels on a VpnGateway. To learn more about labels, read the Labeling Resources documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> SetLabelsAsync(global::Google.Cloud.Compute.V1.SetLabelsVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetLabels, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.TestPermissionsResponse TestIamPermissions(global::Google.Cloud.Compute.V1.TestIamPermissionsVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsVpnGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.TestPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Compute.V1.TestIamPermissionsVpnGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override VpnGatewaysClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VpnGatewaysClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(VpnGatewaysBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetStatus, serviceImpl.GetStatus)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_SetLabels, serviceImpl.SetLabels)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, VpnGatewaysBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListVpnGatewaysRequest, global::Google.Cloud.Compute.V1.VpnGatewayAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetVpnGatewayRequest, global::Google.Cloud.Compute.V1.VpnGateway>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetStatusVpnGatewayRequest, global::Google.Cloud.Compute.V1.VpnGatewaysGetStatusResponse>(serviceImpl.GetStatus));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListVpnGatewaysRequest, global::Google.Cloud.Compute.V1.VpnGatewayList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_SetLabels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.SetLabelsVpnGatewayRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.SetLabels));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.TestIamPermissionsVpnGatewayRequest, global::Google.Cloud.Compute.V1.TestPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
  /// <summary>
  /// The VpnTunnels API.
  /// </summary>
  public static partial class VpnTunnels
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.VpnTunnels";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.AggregatedListVpnTunnelsRequest> __Marshaller_google_cloud_compute_v1_AggregatedListVpnTunnelsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.AggregatedListVpnTunnelsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.VpnTunnelAggregatedList> __Marshaller_google_cloud_compute_v1_VpnTunnelAggregatedList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.VpnTunnelAggregatedList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteVpnTunnelRequest> __Marshaller_google_cloud_compute_v1_DeleteVpnTunnelRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteVpnTunnelRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetVpnTunnelRequest> __Marshaller_google_cloud_compute_v1_GetVpnTunnelRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetVpnTunnelRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.VpnTunnel> __Marshaller_google_cloud_compute_v1_VpnTunnel = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.VpnTunnel.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.InsertVpnTunnelRequest> __Marshaller_google_cloud_compute_v1_InsertVpnTunnelRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.InsertVpnTunnelRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListVpnTunnelsRequest> __Marshaller_google_cloud_compute_v1_ListVpnTunnelsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListVpnTunnelsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.VpnTunnelList> __Marshaller_google_cloud_compute_v1_VpnTunnelList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.VpnTunnelList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListVpnTunnelsRequest, global::Google.Cloud.Compute.V1.VpnTunnelAggregatedList> __Method_AggregatedList = new grpc::Method<global::Google.Cloud.Compute.V1.AggregatedListVpnTunnelsRequest, global::Google.Cloud.Compute.V1.VpnTunnelAggregatedList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregatedList",
        __Marshaller_google_cloud_compute_v1_AggregatedListVpnTunnelsRequest,
        __Marshaller_google_cloud_compute_v1_VpnTunnelAggregatedList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteVpnTunnelRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteVpnTunnelRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteVpnTunnelRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetVpnTunnelRequest, global::Google.Cloud.Compute.V1.VpnTunnel> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetVpnTunnelRequest, global::Google.Cloud.Compute.V1.VpnTunnel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetVpnTunnelRequest,
        __Marshaller_google_cloud_compute_v1_VpnTunnel);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.InsertVpnTunnelRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Insert = new grpc::Method<global::Google.Cloud.Compute.V1.InsertVpnTunnelRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_google_cloud_compute_v1_InsertVpnTunnelRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListVpnTunnelsRequest, global::Google.Cloud.Compute.V1.VpnTunnelList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListVpnTunnelsRequest, global::Google.Cloud.Compute.V1.VpnTunnelList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListVpnTunnelsRequest,
        __Marshaller_google_cloud_compute_v1_VpnTunnelList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[70]; }
    }

    /// <summary>Base class for server-side implementations of VpnTunnels</summary>
    [grpc::BindServiceMethod(typeof(VpnTunnels), "BindService")]
    public abstract partial class VpnTunnelsBase
    {
      /// <summary>
      /// Retrieves an aggregated list of VPN tunnels.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.VpnTunnelAggregatedList> AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListVpnTunnelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified VpnTunnel resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Delete(global::Google.Cloud.Compute.V1.DeleteVpnTunnelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the specified VpnTunnel resource. Gets a list of available VPN tunnels by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.VpnTunnel> Get(global::Google.Cloud.Compute.V1.GetVpnTunnelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a VpnTunnel resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Insert(global::Google.Cloud.Compute.V1.InsertVpnTunnelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of VpnTunnel resources contained in the specified project and region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.VpnTunnelList> List(global::Google.Cloud.Compute.V1.ListVpnTunnelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for VpnTunnels</summary>
    public partial class VpnTunnelsClient : grpc::ClientBase<VpnTunnelsClient>
    {
      /// <summary>Creates a new client for VpnTunnels</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public VpnTunnelsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for VpnTunnels that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public VpnTunnelsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected VpnTunnelsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected VpnTunnelsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves an aggregated list of VPN tunnels.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.VpnTunnelAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListVpnTunnelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of VPN tunnels.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.VpnTunnelAggregatedList AggregatedList(global::Google.Cloud.Compute.V1.AggregatedListVpnTunnelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Retrieves an aggregated list of VPN tunnels.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.VpnTunnelAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListVpnTunnelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregatedListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an aggregated list of VPN tunnels.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.VpnTunnelAggregatedList> AggregatedListAsync(global::Google.Cloud.Compute.V1.AggregatedListVpnTunnelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregatedList, null, options, request);
      }
      /// <summary>
      /// Deletes the specified VpnTunnel resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteVpnTunnelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified VpnTunnel resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Delete(global::Google.Cloud.Compute.V1.DeleteVpnTunnelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified VpnTunnel resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteVpnTunnelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified VpnTunnel resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteVpnTunnelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Returns the specified VpnTunnel resource. Gets a list of available VPN tunnels by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.VpnTunnel Get(global::Google.Cloud.Compute.V1.GetVpnTunnelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified VpnTunnel resource. Gets a list of available VPN tunnels by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.VpnTunnel Get(global::Google.Cloud.Compute.V1.GetVpnTunnelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified VpnTunnel resource. Gets a list of available VPN tunnels by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.VpnTunnel> GetAsync(global::Google.Cloud.Compute.V1.GetVpnTunnelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified VpnTunnel resource. Gets a list of available VPN tunnels by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.VpnTunnel> GetAsync(global::Google.Cloud.Compute.V1.GetVpnTunnelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Creates a VpnTunnel resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertVpnTunnelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Insert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a VpnTunnel resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Insert(global::Google.Cloud.Compute.V1.InsertVpnTunnelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Creates a VpnTunnel resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertVpnTunnelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a VpnTunnel resource in the specified project and region using the data included in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> InsertAsync(global::Google.Cloud.Compute.V1.InsertVpnTunnelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Insert, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of VpnTunnel resources contained in the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.VpnTunnelList List(global::Google.Cloud.Compute.V1.ListVpnTunnelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of VpnTunnel resources contained in the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.VpnTunnelList List(global::Google.Cloud.Compute.V1.ListVpnTunnelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of VpnTunnel resources contained in the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.VpnTunnelList> ListAsync(global::Google.Cloud.Compute.V1.ListVpnTunnelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of VpnTunnel resources contained in the specified project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.VpnTunnelList> ListAsync(global::Google.Cloud.Compute.V1.ListVpnTunnelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override VpnTunnelsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VpnTunnelsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(VpnTunnelsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AggregatedList, serviceImpl.AggregatedList)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, VpnTunnelsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AggregatedList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.AggregatedListVpnTunnelsRequest, global::Google.Cloud.Compute.V1.VpnTunnelAggregatedList>(serviceImpl.AggregatedList));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteVpnTunnelRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetVpnTunnelRequest, global::Google.Cloud.Compute.V1.VpnTunnel>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.InsertVpnTunnelRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListVpnTunnelsRequest, global::Google.Cloud.Compute.V1.VpnTunnelList>(serviceImpl.List));
    }

  }
  /// <summary>
  /// The ZoneOperations API.
  /// </summary>
  public static partial class ZoneOperations
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.ZoneOperations";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteZoneOperationRequest> __Marshaller_google_cloud_compute_v1_DeleteZoneOperationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteZoneOperationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.DeleteZoneOperationResponse> __Marshaller_google_cloud_compute_v1_DeleteZoneOperationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.DeleteZoneOperationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetZoneOperationRequest> __Marshaller_google_cloud_compute_v1_GetZoneOperationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetZoneOperationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Operation> __Marshaller_google_cloud_compute_v1_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListZoneOperationsRequest> __Marshaller_google_cloud_compute_v1_ListZoneOperationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListZoneOperationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.OperationList> __Marshaller_google_cloud_compute_v1_OperationList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.OperationList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.WaitZoneOperationRequest> __Marshaller_google_cloud_compute_v1_WaitZoneOperationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.WaitZoneOperationRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.DeleteZoneOperationRequest, global::Google.Cloud.Compute.V1.DeleteZoneOperationResponse> __Method_Delete = new grpc::Method<global::Google.Cloud.Compute.V1.DeleteZoneOperationRequest, global::Google.Cloud.Compute.V1.DeleteZoneOperationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_google_cloud_compute_v1_DeleteZoneOperationRequest,
        __Marshaller_google_cloud_compute_v1_DeleteZoneOperationResponse);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetZoneOperationRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetZoneOperationRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetZoneOperationRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListZoneOperationsRequest, global::Google.Cloud.Compute.V1.OperationList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListZoneOperationsRequest, global::Google.Cloud.Compute.V1.OperationList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListZoneOperationsRequest,
        __Marshaller_google_cloud_compute_v1_OperationList);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.WaitZoneOperationRequest, global::Google.Cloud.Compute.V1.Operation> __Method_Wait = new grpc::Method<global::Google.Cloud.Compute.V1.WaitZoneOperationRequest, global::Google.Cloud.Compute.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Wait",
        __Marshaller_google_cloud_compute_v1_WaitZoneOperationRequest,
        __Marshaller_google_cloud_compute_v1_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[71]; }
    }

    /// <summary>Base class for server-side implementations of ZoneOperations</summary>
    [grpc::BindServiceMethod(typeof(ZoneOperations), "BindService")]
    public abstract partial class ZoneOperationsBase
    {
      /// <summary>
      /// Deletes the specified zone-specific Operations resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.DeleteZoneOperationResponse> Delete(global::Google.Cloud.Compute.V1.DeleteZoneOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the specified zone-specific Operations resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Get(global::Google.Cloud.Compute.V1.GetZoneOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified zone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.OperationList> List(global::Google.Cloud.Compute.V1.ListZoneOperationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
      ///
      /// This method is called on a best-effort basis. Specifically:
      /// - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
      /// - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Operation> Wait(global::Google.Cloud.Compute.V1.WaitZoneOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ZoneOperations</summary>
    public partial class ZoneOperationsClient : grpc::ClientBase<ZoneOperationsClient>
    {
      /// <summary>Creates a new client for ZoneOperations</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ZoneOperationsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ZoneOperations that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ZoneOperationsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ZoneOperationsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ZoneOperationsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deletes the specified zone-specific Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DeleteZoneOperationResponse Delete(global::Google.Cloud.Compute.V1.DeleteZoneOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified zone-specific Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.DeleteZoneOperationResponse Delete(global::Google.Cloud.Compute.V1.DeleteZoneOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified zone-specific Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DeleteZoneOperationResponse> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteZoneOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified zone-specific Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.DeleteZoneOperationResponse> DeleteAsync(global::Google.Cloud.Compute.V1.DeleteZoneOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Retrieves the specified zone-specific Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Get(global::Google.Cloud.Compute.V1.GetZoneOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the specified zone-specific Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Get(global::Google.Cloud.Compute.V1.GetZoneOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves the specified zone-specific Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> GetAsync(global::Google.Cloud.Compute.V1.GetZoneOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the specified zone-specific Operations resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> GetAsync(global::Google.Cloud.Compute.V1.GetZoneOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.OperationList List(global::Google.Cloud.Compute.V1.ListZoneOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.OperationList List(global::Google.Cloud.Compute.V1.ListZoneOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.OperationList> ListAsync(global::Google.Cloud.Compute.V1.ListZoneOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of Operation resources contained within the specified zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.OperationList> ListAsync(global::Google.Cloud.Compute.V1.ListZoneOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
      ///
      /// This method is called on a best-effort basis. Specifically:
      /// - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
      /// - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Wait(global::Google.Cloud.Compute.V1.WaitZoneOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Wait(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
      ///
      /// This method is called on a best-effort basis. Specifically:
      /// - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
      /// - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Operation Wait(global::Google.Cloud.Compute.V1.WaitZoneOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Wait, null, options, request);
      }
      /// <summary>
      /// Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
      ///
      /// This method is called on a best-effort basis. Specifically:
      /// - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
      /// - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> WaitAsync(global::Google.Cloud.Compute.V1.WaitZoneOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WaitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
      ///
      /// This method is called on a best-effort basis. Specifically:
      /// - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
      /// - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Operation> WaitAsync(global::Google.Cloud.Compute.V1.WaitZoneOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Wait, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ZoneOperationsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ZoneOperationsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ZoneOperationsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Wait, serviceImpl.Wait).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ZoneOperationsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.DeleteZoneOperationRequest, global::Google.Cloud.Compute.V1.DeleteZoneOperationResponse>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetZoneOperationRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListZoneOperationsRequest, global::Google.Cloud.Compute.V1.OperationList>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Wait, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.WaitZoneOperationRequest, global::Google.Cloud.Compute.V1.Operation>(serviceImpl.Wait));
    }

  }
  /// <summary>
  /// The Zones API.
  /// </summary>
  public static partial class Zones
  {
    static readonly string __ServiceName = "google.cloud.compute.v1.Zones";

    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.GetZoneRequest> __Marshaller_google_cloud_compute_v1_GetZoneRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.GetZoneRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.Zone> __Marshaller_google_cloud_compute_v1_Zone = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.Zone.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ListZonesRequest> __Marshaller_google_cloud_compute_v1_ListZonesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ListZonesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Compute.V1.ZoneList> __Marshaller_google_cloud_compute_v1_ZoneList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Compute.V1.ZoneList.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.GetZoneRequest, global::Google.Cloud.Compute.V1.Zone> __Method_Get = new grpc::Method<global::Google.Cloud.Compute.V1.GetZoneRequest, global::Google.Cloud.Compute.V1.Zone>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_google_cloud_compute_v1_GetZoneRequest,
        __Marshaller_google_cloud_compute_v1_Zone);

    static readonly grpc::Method<global::Google.Cloud.Compute.V1.ListZonesRequest, global::Google.Cloud.Compute.V1.ZoneList> __Method_List = new grpc::Method<global::Google.Cloud.Compute.V1.ListZonesRequest, global::Google.Cloud.Compute.V1.ZoneList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_google_cloud_compute_v1_ListZonesRequest,
        __Marshaller_google_cloud_compute_v1_ZoneList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Compute.V1.ComputeReflection.Descriptor.Services[72]; }
    }

    /// <summary>Base class for server-side implementations of Zones</summary>
    [grpc::BindServiceMethod(typeof(Zones), "BindService")]
    public abstract partial class ZonesBase
    {
      /// <summary>
      /// Returns the specified Zone resource. Gets a list of available zones by making a list() request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.Zone> Get(global::Google.Cloud.Compute.V1.GetZoneRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the list of Zone resources available to the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Compute.V1.ZoneList> List(global::Google.Cloud.Compute.V1.ListZonesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Zones</summary>
    public partial class ZonesClient : grpc::ClientBase<ZonesClient>
    {
      /// <summary>Creates a new client for Zones</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ZonesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Zones that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ZonesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ZonesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ZonesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns the specified Zone resource. Gets a list of available zones by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Zone Get(global::Google.Cloud.Compute.V1.GetZoneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified Zone resource. Gets a list of available zones by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.Zone Get(global::Google.Cloud.Compute.V1.GetZoneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified Zone resource. Gets a list of available zones by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Zone> GetAsync(global::Google.Cloud.Compute.V1.GetZoneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified Zone resource. Gets a list of available zones by making a list() request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.Zone> GetAsync(global::Google.Cloud.Compute.V1.GetZoneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of Zone resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ZoneList List(global::Google.Cloud.Compute.V1.ListZonesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of Zone resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Compute.V1.ZoneList List(global::Google.Cloud.Compute.V1.ListZonesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of Zone resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ZoneList> ListAsync(global::Google.Cloud.Compute.V1.ListZonesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of Zone resources available to the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Compute.V1.ZoneList> ListAsync(global::Google.Cloud.Compute.V1.ListZonesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ZonesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ZonesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ZonesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ZonesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.GetZoneRequest, global::Google.Cloud.Compute.V1.Zone>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Compute.V1.ListZonesRequest, global::Google.Cloud.Compute.V1.ZoneList>(serviceImpl.List));
    }

  }
}
#endregion
