// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: forwarding_test_service.proto
// </auto-generated>
// Original file comments:
//
// Copyright 2016 Google Inc. All Rights Reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd
//
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Api.Gax.Grpc.IntegrationTests {
  public static partial class ForwardingSourceTestService
  {
    static readonly string __ServiceName = "google.api.gax.grpc.integration_tests.ForwardingSourceTestService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Request> __Marshaller_google_api_gax_grpc_integration_tests_ForwardingSourceMethod1Request = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Request.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Response> __Marshaller_google_api_gax_grpc_integration_tests_ForwardingSourceMethod1Response = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Response.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Request> __Marshaller_google_api_gax_grpc_integration_tests_ForwardingSourceMethod2Request = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Request.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Response> __Marshaller_google_api_gax_grpc_integration_tests_ForwardingSourceMethod2Response = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Response.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant> __Marshaller_google_api_gax_grpc_integration_tests_Irrelevant = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Request, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Response> __Method_Method1 = new grpc::Method<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Request, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Method1",
        __Marshaller_google_api_gax_grpc_integration_tests_ForwardingSourceMethod1Request,
        __Marshaller_google_api_gax_grpc_integration_tests_ForwardingSourceMethod1Response);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Request, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Response> __Method_Method2 = new grpc::Method<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Request, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Method2",
        __Marshaller_google_api_gax_grpc_integration_tests_ForwardingSourceMethod2Request,
        __Marshaller_google_api_gax_grpc_integration_tests_ForwardingSourceMethod2Response);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant, global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant> __Method_ServerStreamingMethod = new grpc::Method<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant, global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ServerStreamingMethod",
        __Marshaller_google_api_gax_grpc_integration_tests_Irrelevant,
        __Marshaller_google_api_gax_grpc_integration_tests_Irrelevant);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant, global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant> __Method_ClientStreamingMethod = new grpc::Method<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant, global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "ClientStreamingMethod",
        __Marshaller_google_api_gax_grpc_integration_tests_Irrelevant,
        __Marshaller_google_api_gax_grpc_integration_tests_Irrelevant);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant, global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant> __Method_BidiStreamingMethod = new grpc::Method<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant, global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "BidiStreamingMethod",
        __Marshaller_google_api_gax_grpc_integration_tests_Irrelevant,
        __Marshaller_google_api_gax_grpc_integration_tests_Irrelevant);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTestServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ForwardingSourceTestService</summary>
    [grpc::BindServiceMethod(typeof(ForwardingSourceTestService), "BindService")]
    public abstract partial class ForwardingSourceTestServiceBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Response> Method1(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Response> Method2(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Streaming methods just to test the error mode.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task ServerStreamingMethod(global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant request, grpc::IServerStreamWriter<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant> ClientStreamingMethod(grpc::IAsyncStreamReader<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task BidiStreamingMethod(grpc::IAsyncStreamReader<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant> requestStream, grpc::IServerStreamWriter<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ForwardingSourceTestService</summary>
    public partial class ForwardingSourceTestServiceClient : grpc::ClientBase<ForwardingSourceTestServiceClient>
    {
      /// <summary>Creates a new client for ForwardingSourceTestService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ForwardingSourceTestServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ForwardingSourceTestService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ForwardingSourceTestServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ForwardingSourceTestServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ForwardingSourceTestServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Response Method1(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Method1(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Response Method1(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Method1, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Response> Method1Async(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Method1Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Response> Method1Async(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Method1, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Response Method2(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Method2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Response Method2(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Method2, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Response> Method2Async(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Method2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Response> Method2Async(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Method2, null, options, request);
      }
      /// <summary>
      /// Streaming methods just to test the error mode.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant> ServerStreamingMethod(global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerStreamingMethod(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Streaming methods just to test the error mode.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant> ServerStreamingMethod(global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ServerStreamingMethod, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant, global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant> ClientStreamingMethod(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClientStreamingMethod(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant, global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant> ClientStreamingMethod(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_ClientStreamingMethod, null, options);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant, global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant> BidiStreamingMethod(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BidiStreamingMethod(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant, global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant> BidiStreamingMethod(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_BidiStreamingMethod, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ForwardingSourceTestServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ForwardingSourceTestServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ForwardingSourceTestServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Method1, serviceImpl.Method1)
          .AddMethod(__Method_Method2, serviceImpl.Method2)
          .AddMethod(__Method_ServerStreamingMethod, serviceImpl.ServerStreamingMethod)
          .AddMethod(__Method_ClientStreamingMethod, serviceImpl.ClientStreamingMethod)
          .AddMethod(__Method_BidiStreamingMethod, serviceImpl.BidiStreamingMethod).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ForwardingSourceTestServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Method1, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Request, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod1Response>(serviceImpl.Method1));
      serviceBinder.AddMethod(__Method_Method2, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Request, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingSourceMethod2Response>(serviceImpl.Method2));
      serviceBinder.AddMethod(__Method_ServerStreamingMethod, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant, global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant>(serviceImpl.ServerStreamingMethod));
      serviceBinder.AddMethod(__Method_ClientStreamingMethod, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant, global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant>(serviceImpl.ClientStreamingMethod));
      serviceBinder.AddMethod(__Method_BidiStreamingMethod, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant, global::Google.Api.Gax.Grpc.IntegrationTests.Irrelevant>(serviceImpl.BidiStreamingMethod));
    }

  }
  public static partial class ForwardingTargetTestService
  {
    static readonly string __ServiceName = "google.api.gax.grpc.integration_tests.ForwardingTargetTestService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Request> __Marshaller_google_api_gax_grpc_integration_tests_ForwardingTargetMethod1Request = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Request.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Response> __Marshaller_google_api_gax_grpc_integration_tests_ForwardingTargetMethod1Response = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Response.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Request> __Marshaller_google_api_gax_grpc_integration_tests_ForwardingTargetMethod2Request = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Request.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Response> __Marshaller_google_api_gax_grpc_integration_tests_ForwardingTargetMethod2Response = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Response.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Request, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Response> __Method_Method1 = new grpc::Method<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Request, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Method1",
        __Marshaller_google_api_gax_grpc_integration_tests_ForwardingTargetMethod1Request,
        __Marshaller_google_api_gax_grpc_integration_tests_ForwardingTargetMethod1Response);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Request, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Response> __Method_Method2 = new grpc::Method<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Request, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Method2",
        __Marshaller_google_api_gax_grpc_integration_tests_ForwardingTargetMethod2Request,
        __Marshaller_google_api_gax_grpc_integration_tests_ForwardingTargetMethod2Response);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTestServiceReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of ForwardingTargetTestService</summary>
    [grpc::BindServiceMethod(typeof(ForwardingTargetTestService), "BindService")]
    public abstract partial class ForwardingTargetTestServiceBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Response> Method1(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Response> Method2(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ForwardingTargetTestService</summary>
    public partial class ForwardingTargetTestServiceClient : grpc::ClientBase<ForwardingTargetTestServiceClient>
    {
      /// <summary>Creates a new client for ForwardingTargetTestService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ForwardingTargetTestServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ForwardingTargetTestService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ForwardingTargetTestServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ForwardingTargetTestServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ForwardingTargetTestServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Response Method1(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Method1(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Response Method1(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Method1, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Response> Method1Async(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Method1Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Response> Method1Async(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Method1, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Response Method2(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Method2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Response Method2(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Method2, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Response> Method2Async(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Method2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Response> Method2Async(global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Method2, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ForwardingTargetTestServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ForwardingTargetTestServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ForwardingTargetTestServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Method1, serviceImpl.Method1)
          .AddMethod(__Method_Method2, serviceImpl.Method2).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ForwardingTargetTestServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Method1, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Request, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod1Response>(serviceImpl.Method1));
      serviceBinder.AddMethod(__Method_Method2, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Request, global::Google.Api.Gax.Grpc.IntegrationTests.ForwardingTargetMethod2Response>(serviceImpl.Method2));
    }

  }
}
#endregion
