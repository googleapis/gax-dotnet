/*
 * Copyright 2021 Google LLC All Rights Reserved.
 * Use of this source code is governed by a BSD-style
 * license that can be found in the LICENSE file or at
 * https://developers.google.com/open-source/licenses/bsd
 */

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/type/phone_number.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Type {

  /// <summary>Holder for reflection information generated from google/type/phone_number.proto</summary>
  public static partial class PhoneNumberReflection {

    #region Descriptor
    /// <summary>File descriptor for google/type/phone_number.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PhoneNumberReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5nb29nbGUvdHlwZS9waG9uZV9udW1iZXIucHJvdG8SC2dvb2dsZS50eXBl",
            "IqsBCgtQaG9uZU51bWJlchIVCgtlMTY0X251bWJlchgBIAEoCUgAEjgKCnNo",
            "b3J0X2NvZGUYAiABKAsyIi5nb29nbGUudHlwZS5QaG9uZU51bWJlci5TaG9y",
            "dENvZGVIABIRCglleHRlbnNpb24YAyABKAkaMAoJU2hvcnRDb2RlEhMKC3Jl",
            "Z2lvbl9jb2RlGAEgASgJEg4KBm51bWJlchgCIAEoCUIGCgRraW5kQnQKD2Nv",
            "bS5nb29nbGUudHlwZUIQUGhvbmVOdW1iZXJQcm90b1ABWkRnb29nbGUuZ29s",
            "YW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL3R5cGUvcGhvbmVfbnVtYmVy",
            "O3Bob25lX251bWJlcvgBAaICA0dUUGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Type.PhoneNumber), global::Google.Type.PhoneNumber.Parser, new[]{ "E164Number", "ShortCode", "Extension" }, new[]{ "Kind" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Type.PhoneNumber.Types.ShortCode), global::Google.Type.PhoneNumber.Types.ShortCode.Parser, new[]{ "RegionCode", "Number" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// An object representing a phone number, suitable as an API wire format.
  ///
  /// This representation:
  ///
  ///  - should not be used for locale-specific formatting of a phone number, such
  ///    as "+1 (650) 253-0000 ext. 123"
  ///
  ///  - is not designed for efficient storage
  ///  - may not be suitable for dialing - specialized libraries (see references)
  ///    should be used to parse the number for that purpose
  ///
  /// To do something meaningful with this number, such as format it for various
  /// use-cases, convert it to an `i18n.phonenumbers.PhoneNumber` object first.
  ///
  /// For instance, in Java this would be:
  ///
  ///    com.google.type.PhoneNumber wireProto =
  ///        com.google.type.PhoneNumber.newBuilder().build();
  ///    com.google.i18n.phonenumbers.Phonenumber.PhoneNumber phoneNumber =
  ///        PhoneNumberUtil.getInstance().parse(wireProto.getE164Number(), "ZZ");
  ///    if (!wireProto.getExtension().isEmpty()) {
  ///      phoneNumber.setExtension(wireProto.getExtension());
  ///    }
  ///
  ///  Reference(s):
  ///   - https://github.com/google/libphonenumber
  /// </summary>
  public sealed partial class PhoneNumber : pb::IMessage<PhoneNumber>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PhoneNumber> _parser = new pb::MessageParser<PhoneNumber>(() => new PhoneNumber());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhoneNumber> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Type.PhoneNumberReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhoneNumber() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhoneNumber(PhoneNumber other) : this() {
      extension_ = other.extension_;
      switch (other.KindCase) {
        case KindOneofCase.E164Number:
          E164Number = other.E164Number;
          break;
        case KindOneofCase.ShortCode:
          ShortCode = other.ShortCode.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhoneNumber Clone() {
      return new PhoneNumber(this);
    }

    /// <summary>Field number for the "e164_number" field.</summary>
    public const int E164NumberFieldNumber = 1;
    /// <summary>
    /// The phone number, represented as a leading plus sign ('+'), followed by a
    /// phone number that uses a relaxed ITU E.164 format consisting of the
    /// country calling code (1 to 3 digits) and the subscriber number, with no
    /// additional spaces or formatting, e.g.:
    ///  - correct: "+15552220123"
    ///  - incorrect: "+1 (555) 222-01234 x123".
    ///
    /// The ITU E.164 format limits the latter to 12 digits, but in practice not
    /// all countries respect that, so we relax that restriction here.
    /// National-only numbers are not allowed.
    ///
    /// References:
    ///  - https://www.itu.int/rec/T-REC-E.164-201011-I
    ///  - https://en.wikipedia.org/wiki/E.164.
    ///  - https://en.wikipedia.org/wiki/List_of_country_calling_codes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string E164Number {
      get { return kindCase_ == KindOneofCase.E164Number ? (string) kind_ : ""; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        kindCase_ = KindOneofCase.E164Number;
      }
    }

    /// <summary>Field number for the "short_code" field.</summary>
    public const int ShortCodeFieldNumber = 2;
    /// <summary>
    /// A short code.
    ///
    /// Reference(s):
    ///  - https://en.wikipedia.org/wiki/Short_code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.PhoneNumber.Types.ShortCode ShortCode {
      get { return kindCase_ == KindOneofCase.ShortCode ? (global::Google.Type.PhoneNumber.Types.ShortCode) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.ShortCode;
      }
    }

    /// <summary>Field number for the "extension" field.</summary>
    public const int ExtensionFieldNumber = 3;
    private string extension_ = "";
    /// <summary>
    /// The phone number's extension. The extension is not standardized in ITU
    /// recommendations, except for being defined as a series of numbers with a
    /// maximum length of 40 digits. Other than digits, some other dialing
    /// characters such as ',' (indicating a wait) or '#' may be stored here.
    ///
    /// Note that no regions currently use extensions with short codes, so this
    /// field is normally only set in conjunction with an E.164 number. It is held
    /// separately from the E.164 number to allow for short code extensions in the
    /// future.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Extension {
      get { return extension_; }
      set {
        extension_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object kind_;
    /// <summary>Enum of possible cases for the "kind" oneof.</summary>
    public enum KindOneofCase {
      None = 0,
      E164Number = 1,
      ShortCode = 2,
    }
    private KindOneofCase kindCase_ = KindOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KindOneofCase KindCase {
      get { return kindCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      kindCase_ = KindOneofCase.None;
      kind_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhoneNumber);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhoneNumber other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (E164Number != other.E164Number) return false;
      if (!object.Equals(ShortCode, other.ShortCode)) return false;
      if (Extension != other.Extension) return false;
      if (KindCase != other.KindCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (kindCase_ == KindOneofCase.E164Number) hash ^= E164Number.GetHashCode();
      if (kindCase_ == KindOneofCase.ShortCode) hash ^= ShortCode.GetHashCode();
      if (Extension.Length != 0) hash ^= Extension.GetHashCode();
      hash ^= (int) kindCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (kindCase_ == KindOneofCase.E164Number) {
        output.WriteRawTag(10);
        output.WriteString(E164Number);
      }
      if (kindCase_ == KindOneofCase.ShortCode) {
        output.WriteRawTag(18);
        output.WriteMessage(ShortCode);
      }
      if (Extension.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Extension);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (kindCase_ == KindOneofCase.E164Number) {
        output.WriteRawTag(10);
        output.WriteString(E164Number);
      }
      if (kindCase_ == KindOneofCase.ShortCode) {
        output.WriteRawTag(18);
        output.WriteMessage(ShortCode);
      }
      if (Extension.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Extension);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (kindCase_ == KindOneofCase.E164Number) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(E164Number);
      }
      if (kindCase_ == KindOneofCase.ShortCode) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShortCode);
      }
      if (Extension.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Extension);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhoneNumber other) {
      if (other == null) {
        return;
      }
      if (other.Extension.Length != 0) {
        Extension = other.Extension;
      }
      switch (other.KindCase) {
        case KindOneofCase.E164Number:
          E164Number = other.E164Number;
          break;
        case KindOneofCase.ShortCode:
          if (ShortCode == null) {
            ShortCode = new global::Google.Type.PhoneNumber.Types.ShortCode();
          }
          ShortCode.MergeFrom(other.ShortCode);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            E164Number = input.ReadString();
            break;
          }
          case 18: {
            global::Google.Type.PhoneNumber.Types.ShortCode subBuilder = new global::Google.Type.PhoneNumber.Types.ShortCode();
            if (kindCase_ == KindOneofCase.ShortCode) {
              subBuilder.MergeFrom(ShortCode);
            }
            input.ReadMessage(subBuilder);
            ShortCode = subBuilder;
            break;
          }
          case 26: {
            Extension = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            E164Number = input.ReadString();
            break;
          }
          case 18: {
            global::Google.Type.PhoneNumber.Types.ShortCode subBuilder = new global::Google.Type.PhoneNumber.Types.ShortCode();
            if (kindCase_ == KindOneofCase.ShortCode) {
              subBuilder.MergeFrom(ShortCode);
            }
            input.ReadMessage(subBuilder);
            ShortCode = subBuilder;
            break;
          }
          case 26: {
            Extension = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the PhoneNumber message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// An object representing a short code, which is a phone number that is
      /// typically much shorter than regular phone numbers and can be used to
      /// address messages in MMS and SMS systems, as well as for abbreviated dialing
      /// (e.g. "Text 611 to see how many minutes you have remaining on your plan.").
      ///
      /// Short codes are restricted to a region and are not internationally
      /// dialable, which means the same short code can exist in different regions,
      /// with different usage and pricing, even if those regions share the same
      /// country calling code (e.g. US and CA).
      /// </summary>
      public sealed partial class ShortCode : pb::IMessage<ShortCode>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ShortCode> _parser = new pb::MessageParser<ShortCode>(() => new ShortCode());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ShortCode> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Type.PhoneNumber.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShortCode() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShortCode(ShortCode other) : this() {
          regionCode_ = other.regionCode_;
          number_ = other.number_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShortCode Clone() {
          return new ShortCode(this);
        }

        /// <summary>Field number for the "region_code" field.</summary>
        public const int RegionCodeFieldNumber = 1;
        private string regionCode_ = "";
        /// <summary>
        /// Required. The BCP-47 region code of the location where calls to this
        /// short code can be made, such as "US" and "BB".
        ///
        /// Reference(s):
        ///  - http://www.unicode.org/reports/tr35/#unicode_region_subtag
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RegionCode {
          get { return regionCode_; }
          set {
            regionCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "number" field.</summary>
        public const int NumberFieldNumber = 2;
        private string number_ = "";
        /// <summary>
        /// Required. The short code digits, without a leading plus ('+') or country
        /// calling code, e.g. "611".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Number {
          get { return number_; }
          set {
            number_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ShortCode);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ShortCode other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RegionCode != other.RegionCode) return false;
          if (Number != other.Number) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RegionCode.Length != 0) hash ^= RegionCode.GetHashCode();
          if (Number.Length != 0) hash ^= Number.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (RegionCode.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(RegionCode);
          }
          if (Number.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Number);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (RegionCode.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(RegionCode);
          }
          if (Number.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Number);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RegionCode.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RegionCode);
          }
          if (Number.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Number);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ShortCode other) {
          if (other == null) {
            return;
          }
          if (other.RegionCode.Length != 0) {
            RegionCode = other.RegionCode;
          }
          if (other.Number.Length != 0) {
            Number = other.Number;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                RegionCode = input.ReadString();
                break;
              }
              case 18: {
                Number = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                RegionCode = input.ReadString();
                break;
              }
              case 18: {
                Number = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
