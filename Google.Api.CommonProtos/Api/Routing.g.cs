/*
 * Copyright 2022 Google LLC All Rights Reserved.
 * Use of this source code is governed by a BSD-style
 * license that can be found in the LICENSE file or at
 * https://developers.google.com/open-source/licenses/bsd
 */

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/api/routing.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Api {

  /// <summary>Holder for reflection information generated from google/api/routing.proto</summary>
  public static partial class RoutingReflection {

    #region Descriptor
    /// <summary>File descriptor for google/api/routing.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoutingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chhnb29nbGUvYXBpL3JvdXRpbmcucHJvdG8SCmdvb2dsZS5hcGkaIGdvb2ds",
            "ZS9wcm90b2J1Zi9kZXNjcmlwdG9yLnByb3RvIkcKC1JvdXRpbmdSdWxlEjgK",
            "EnJvdXRpbmdfcGFyYW1ldGVycxgCIAMoCzIcLmdvb2dsZS5hcGkuUm91dGlu",
            "Z1BhcmFtZXRlciI4ChBSb3V0aW5nUGFyYW1ldGVyEg0KBWZpZWxkGAEgASgJ",
            "EhUKDXBhdGhfdGVtcGxhdGUYAiABKAk6SwoHcm91dGluZxIeLmdvb2dsZS5w",
            "cm90b2J1Zi5NZXRob2RPcHRpb25zGLHKvCIgASgLMhcuZ29vZ2xlLmFwaS5S",
            "b3V0aW5nUnVsZUJqCg5jb20uZ29vZ2xlLmFwaUIMUm91dGluZ1Byb3RvUAFa",
            "QWdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvYXBpL2Fu",
            "bm90YXRpb25zO2Fubm90YXRpb25zogIER0FQSWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.Reflection.DescriptorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pb::Extension[] { RoutingExtensions.Routing }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.RoutingRule), global::Google.Api.RoutingRule.Parser, new[]{ "RoutingParameters" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.RoutingParameter), global::Google.Api.RoutingParameter.Parser, new[]{ "Field", "PathTemplate" }, null, null, null, null)
          }));
    }
    #endregion

  }
  /// <summary>Holder for extension identifiers generated from the top level of google/api/routing.proto</summary>
  public static partial class RoutingExtensions {
    /// <summary>
    /// See RoutingRule.
    /// </summary>
    public static readonly pb::Extension<global::Google.Protobuf.Reflection.MethodOptions, global::Google.Api.RoutingRule> Routing =
      new pb::Extension<global::Google.Protobuf.Reflection.MethodOptions, global::Google.Api.RoutingRule>(72295729, pb::FieldCodec.ForMessage(578365834, global::Google.Api.RoutingRule.Parser));
  }

  #region Messages
  /// <summary>
  /// Specifies the routing information that should be sent along with the request
  /// in the form of routing header.
  /// **NOTE:** All service configuration rules follow the "last one wins" order.
  ///
  /// The examples below will apply to an RPC which has the following request type:
  ///
  /// Message Definition:
  ///
  ///     message Request {
  ///       // The name of the Table
  ///       // Values can be of the following formats:
  ///       // - `projects/&lt;project>/tables/&lt;table>`
  ///       // - `projects/&lt;project>/instances/&lt;instance>/tables/&lt;table>`
  ///       // - `region/&lt;region>/zones/&lt;zone>/tables/&lt;table>`
  ///       string table_name = 1;
  ///
  ///       // This value specifies routing for replication.
  ///       // It can be in the following formats:
  ///       // - `profiles/&lt;profile_id>`
  ///       // - a legacy `profile_id` that can be any string
  ///       string app_profile_id = 2;
  ///     }
  ///
  /// Example message:
  ///
  ///     {
  ///       table_name: projects/proj_foo/instances/instance_bar/table/table_baz,
  ///       app_profile_id: profiles/prof_qux
  ///     }
  ///
  /// The routing header consists of one or multiple key-value pairs. Every key
  /// and value must be percent-encoded, and joined together in the format of
  /// `key1=value1&amp;key2=value2`.
  /// In the examples below I am skipping the percent-encoding for readablity.
  ///
  /// Example 1
  ///
  /// Extracting a field from the request to put into the routing header
  /// unchanged, with the key equal to the field name.
  ///
  /// annotation:
  ///
  ///     option (google.api.routing) = {
  ///       // Take the `app_profile_id`.
  ///       routing_parameters {
  ///         field: "app_profile_id"
  ///       }
  ///     };
  ///
  /// result:
  ///
  ///     x-goog-request-params: app_profile_id=profiles/prof_qux
  ///
  /// Example 2
  ///
  /// Extracting a field from the request to put into the routing header
  /// unchanged, with the key different from the field name.
  ///
  /// annotation:
  ///
  ///     option (google.api.routing) = {
  ///       // Take the `app_profile_id`, but name it `routing_id` in the header.
  ///       routing_parameters {
  ///         field: "app_profile_id"
  ///         path_template: "{routing_id=**}"
  ///       }
  ///     };
  ///
  /// result:
  ///
  ///     x-goog-request-params: routing_id=profiles/prof_qux
  ///
  /// Example 3
  ///
  /// Extracting a field from the request to put into the routing
  /// header, while matching a path template syntax on the field's value.
  ///
  /// NB: it is more useful to send nothing than to send garbage for the purpose
  /// of dynamic routing, since garbage pollutes cache. Thus the matching.
  ///
  /// Sub-example 3a
  ///
  /// The field matches the template.
  ///
  /// annotation:
  ///
  ///     option (google.api.routing) = {
  ///       // Take the `table_name`, if it's well-formed (with project-based
  ///       // syntax).
  ///       routing_parameters {
  ///         field: "table_name"
  ///         path_template: "{table_name=projects/*/instances/*/**}"
  ///       }
  ///     };
  ///
  /// result:
  ///
  ///     x-goog-request-params:
  ///     table_name=projects/proj_foo/instances/instance_bar/table/table_baz
  ///
  /// Sub-example 3b
  ///
  /// The field does not match the template.
  ///
  /// annotation:
  ///
  ///     option (google.api.routing) = {
  ///       // Take the `table_name`, if it's well-formed (with region-based
  ///       // syntax).
  ///       routing_parameters {
  ///         field: "table_name"
  ///         path_template: "{table_name=regions/*/zones/*/**}"
  ///       }
  ///     };
  ///
  /// result:
  ///
  ///     &lt;no routing header will be sent>
  ///
  /// Sub-example 3c
  ///
  /// Multiple alternative conflictingly named path templates are
  /// specified. The one that matches is used to construct the header.
  ///
  /// annotation:
  ///
  ///     option (google.api.routing) = {
  ///       // Take the `table_name`, if it's well-formed, whether
  ///       // using the region- or projects-based syntax.
  ///
  ///       routing_parameters {
  ///         field: "table_name"
  ///         path_template: "{table_name=regions/*/zones/*/**}"
  ///       }
  ///       routing_parameters {
  ///         field: "table_name"
  ///         path_template: "{table_name=projects/*/instances/*/**}"
  ///       }
  ///     };
  ///
  /// result:
  ///
  ///     x-goog-request-params:
  ///     table_name=projects/proj_foo/instances/instance_bar/table/table_baz
  ///
  /// Example 4
  ///
  /// Extracting a single routing header key-value pair by matching a
  /// template syntax on (a part of) a single request field.
  ///
  /// annotation:
  ///
  ///     option (google.api.routing) = {
  ///       // Take just the project id from the `table_name` field.
  ///       routing_parameters {
  ///         field: "table_name"
  ///         path_template: "{routing_id=projects/*}/**"
  ///       }
  ///     };
  ///
  /// result:
  ///
  ///     x-goog-request-params: routing_id=projects/proj_foo
  ///
  /// Example 5
  ///
  /// Extracting a single routing header key-value pair by matching
  /// several conflictingly named path templates on (parts of) a single request
  /// field. The last template to match "wins" the conflict.
  ///
  /// annotation:
  ///
  ///     option (google.api.routing) = {
  ///       // If the `table_name` does not have instances information,
  ///       // take just the project id for routing.
  ///       // Otherwise take project + instance.
  ///
  ///       routing_parameters {
  ///         field: "table_name"
  ///         path_template: "{routing_id=projects/*}/**"
  ///       }
  ///       routing_parameters {
  ///         field: "table_name"
  ///         path_template: "{routing_id=projects/*/instances/*}/**"
  ///       }
  ///     };
  ///
  /// result:
  ///
  ///     x-goog-request-params:
  ///     routing_id=projects/proj_foo/instances/instance_bar
  ///
  /// Example 6
  ///
  /// Extracting multiple routing header key-value pairs by matching
  /// several non-conflicting path templates on (parts of) a single request field.
  ///
  /// Sub-example 6a
  ///
  /// Make the templates strict, so that if the `table_name` does not
  /// have an instance information, nothing is sent.
  ///
  /// annotation:
  ///
  ///     option (google.api.routing) = {
  ///       // The routing code needs two keys instead of one composite
  ///       // but works only for the tables with the "project-instance" name
  ///       // syntax.
  ///
  ///       routing_parameters {
  ///         field: "table_name"
  ///         path_template: "{project_id=projects/*}/instances/*/**"
  ///       }
  ///       routing_parameters {
  ///         field: "table_name"
  ///         path_template: "projects/*/{instance_id=instances/*}/**"
  ///       }
  ///     };
  ///
  /// result:
  ///
  ///     x-goog-request-params:
  ///     project_id=projects/proj_foo&amp;instance_id=instances/instance_bar
  ///
  /// Sub-example 6b
  ///
  /// Make the templates loose, so that if the `table_name` does not
  /// have an instance information, just the project id part is sent.
  ///
  /// annotation:
  ///
  ///     option (google.api.routing) = {
  ///       // The routing code wants two keys instead of one composite
  ///       // but will work with just the `project_id` for tables without
  ///       // an instance in the `table_name`.
  ///
  ///       routing_parameters {
  ///         field: "table_name"
  ///         path_template: "{project_id=projects/*}/**"
  ///       }
  ///       routing_parameters {
  ///         field: "table_name"
  ///         path_template: "projects/*/{instance_id=instances/*}/**"
  ///       }
  ///     };
  ///
  /// result (is the same as 6a for our example message because it has the instance
  /// information):
  ///
  ///     x-goog-request-params:
  ///     project_id=projects/proj_foo&amp;instance_id=instances/instance_bar
  ///
  /// Example 7
  ///
  /// Extracting multiple routing header key-value pairs by matching
  /// several path templates on multiple request fields.
  ///
  /// NB: note that here there is no way to specify sending nothing if one of the
  /// fields does not match its template. E.g. if the `table_name` is in the wrong
  /// format, the `project_id` will not be sent, but the `routing_id` will be.
  /// The backend routing code has to be aware of that and be prepared to not
  /// receive a full complement of keys if it expects multiple.
  ///
  /// annotation:
  ///
  ///     option (google.api.routing) = {
  ///       // The routing needs both `project_id` and `routing_id`
  ///       // (from the `app_profile_id` field) for routing.
  ///
  ///       routing_parameters {
  ///         field: "table_name"
  ///         path_template: "{project_id=projects/*}/**"
  ///       }
  ///       routing_parameters {
  ///         field: "app_profile_id"
  ///         path_template: "{routing_id=**}"
  ///       }
  ///     };
  ///
  /// result:
  ///
  ///     x-goog-request-params:
  ///     project_id=projects/proj_foo&amp;routing_id=profiles/prof_qux
  ///
  /// Example 8
  ///
  /// Extracting a single routing header key-value pair by matching
  /// several conflictingly named path templates on several request fields. The
  /// last template to match "wins" the conflict.
  ///
  /// annotation:
  ///
  ///     option (google.api.routing) = {
  ///       // The `routing_id` can be a project id or a region id depending on
  ///       // the table name format, but only if the `app_profile_id` is not set.
  ///       // If `app_profile_id` is set it should be used instead.
  ///
  ///       routing_parameters {
  ///         field: "table_name"
  ///         path_template: "{routing_id=projects/*}/**"
  ///       }
  ///       routing_parameters {
  ///          field: "table_name"
  ///          path_template: "{routing_id=regions/*}/**"
  ///       }
  ///       routing_parameters {
  ///         field: "app_profile_id"
  ///         path_template: "{routing_id=**}"
  ///       }
  ///     };
  ///
  /// result:
  ///
  ///     x-goog-request-params: routing_id=profiles/prof_qux
  ///
  /// Example 9
  ///
  /// Bringing it all together.
  ///
  /// annotation:
  ///
  ///     option (google.api.routing) = {
  ///       // For routing both `table_location` and a `routing_id` are needed.
  ///       //
  ///       // table_location can be either an instance id or a region+zone id.
  ///       //
  ///       // For `routing_id`, take the value of `app_profile_id`
  ///       // - If it's in the format `profiles/&lt;profile_id>`, send
  ///       // just the `&lt;profile_id>` part.
  ///       // - If it's any other literal, send it as is.
  ///       // If the `app_profile_id` is empty, and the `table_name` starts with
  ///       // the project_id, send that instead.
  ///
  ///       routing_parameters {
  ///         field: "table_name"
  ///         path_template: "projects/*/{table_location=instances/*}/tables/*"
  ///       }
  ///       routing_parameters {
  ///         field: "table_name"
  ///         path_template: "{table_location=regions/*/zones/*}/tables/*"
  ///       }
  ///       routing_parameters {
  ///         field: "table_name"
  ///         path_template: "{routing_id=projects/*}/**"
  ///       }
  ///       routing_parameters {
  ///         field: "app_profile_id"
  ///         path_template: "{routing_id=**}"
  ///       }
  ///       routing_parameters {
  ///         field: "app_profile_id"
  ///         path_template: "profiles/{routing_id=*}"
  ///       }
  ///     };
  ///
  /// result:
  ///
  ///     x-goog-request-params:
  ///     table_location=instances/instance_bar&amp;routing_id=prof_qux
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RoutingRule : pb::IMessage<RoutingRule>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoutingRule> _parser = new pb::MessageParser<RoutingRule>(() => new RoutingRule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RoutingRule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.RoutingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoutingRule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoutingRule(RoutingRule other) : this() {
      routingParameters_ = other.routingParameters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoutingRule Clone() {
      return new RoutingRule(this);
    }

    /// <summary>Field number for the "routing_parameters" field.</summary>
    public const int RoutingParametersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Api.RoutingParameter> _repeated_routingParameters_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Api.RoutingParameter.Parser);
    private readonly pbc::RepeatedField<global::Google.Api.RoutingParameter> routingParameters_ = new pbc::RepeatedField<global::Google.Api.RoutingParameter>();
    /// <summary>
    /// A collection of Routing Parameter specifications.
    /// **NOTE:** If multiple Routing Parameters describe the same key
    /// (via the `path_template` field or via the `field` field when
    /// `path_template` is not provided), "last one wins" rule
    /// determines which Parameter gets used.
    /// See the examples for more details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Api.RoutingParameter> RoutingParameters {
      get { return routingParameters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RoutingRule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RoutingRule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!routingParameters_.Equals(other.routingParameters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= routingParameters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      routingParameters_.WriteTo(output, _repeated_routingParameters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      routingParameters_.WriteTo(ref output, _repeated_routingParameters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += routingParameters_.CalculateSize(_repeated_routingParameters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RoutingRule other) {
      if (other == null) {
        return;
      }
      routingParameters_.Add(other.routingParameters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            routingParameters_.AddEntriesFrom(input, _repeated_routingParameters_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            routingParameters_.AddEntriesFrom(ref input, _repeated_routingParameters_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A projection from an input message to the GRPC or REST header.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RoutingParameter : pb::IMessage<RoutingParameter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoutingParameter> _parser = new pb::MessageParser<RoutingParameter>(() => new RoutingParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RoutingParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.RoutingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoutingParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoutingParameter(RoutingParameter other) : this() {
      field_ = other.field_;
      pathTemplate_ = other.pathTemplate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoutingParameter Clone() {
      return new RoutingParameter(this);
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 1;
    private string field_ = "";
    /// <summary>
    /// A request field to extract the header key-value pair from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Field {
      get { return field_; }
      set {
        field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path_template" field.</summary>
    public const int PathTemplateFieldNumber = 2;
    private string pathTemplate_ = "";
    /// <summary>
    /// A pattern matching the key-value field. Optional.
    /// If not specified, the whole field specified in the `field` field will be
    /// taken as value, and its name used as key. If specified, it MUST contain
    /// exactly one named segment (along with any number of unnamed segments) The
    /// pattern will be matched over the field specified in the `field` field, then
    /// if the match is successful:
    /// - the name of the single named segment will be used as a header name,
    /// - the match value of the segment will be used as a header value;
    /// if the match is NOT successful, nothing will be sent.
    ///
    /// Example:
    ///
    ///               -- This is a field in the request message
    ///              |   that the header value will be extracted from.
    ///              |
    ///              |                     -- This is the key name in the
    ///              |                    |   routing header.
    ///              V                    |
    ///     field: "table_name"           v
    ///     path_template: "projects/*/{table_location=instances/*}/tables/*"
    ///                                                ^            ^
    ///                                                |            |
    ///       In the {} brackets is the pattern that --             |
    ///       specifies what to extract from the                    |
    ///       field as a value to be sent.                          |
    ///                                                             |
    ///      The string in the field must match the whole pattern --
    ///      before brackets, inside brackets, after brackets.
    ///
    /// When looking at this specific example, we can see that:
    /// - A key-value pair with the key `table_location`
    ///   and the value matching `instances/*` should be added
    ///   to the x-goog-request-params routing header.
    /// - The value is extracted from the request message's `table_name` field
    ///   if it matches the full pattern specified:
    ///   `projects/*/instances/*/tables/*`.
    ///
    /// **NB:** If the `path_template` field is not provided, the key name is
    /// equal to the field name, and the whole field should be sent as a value.
    /// This makes the pattern for the field and the value functionally equivalent
    /// to `**`, and the configuration
    ///
    ///     {
    ///       field: "table_name"
    ///     }
    ///
    /// is a functionally equivalent shorthand to:
    ///
    ///     {
    ///       field: "table_name"
    ///       path_template: "{table_name=**}"
    ///     }
    ///
    /// See Example 1 for more details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PathTemplate {
      get { return pathTemplate_; }
      set {
        pathTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RoutingParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RoutingParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Field != other.Field) return false;
      if (PathTemplate != other.PathTemplate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Field.Length != 0) hash ^= Field.GetHashCode();
      if (PathTemplate.Length != 0) hash ^= PathTemplate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Field.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Field);
      }
      if (PathTemplate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PathTemplate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Field.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Field);
      }
      if (PathTemplate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PathTemplate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Field.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
      }
      if (PathTemplate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PathTemplate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RoutingParameter other) {
      if (other == null) {
        return;
      }
      if (other.Field.Length != 0) {
        Field = other.Field;
      }
      if (other.PathTemplate.Length != 0) {
        PathTemplate = other.PathTemplate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Field = input.ReadString();
            break;
          }
          case 18: {
            PathTemplate = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Field = input.ReadString();
            break;
          }
          case 18: {
            PathTemplate = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
