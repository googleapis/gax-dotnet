/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Use of this source code is governed by a BSD-style
 * license that can be found in the LICENSE file or at
 * https://developers.google.com/open-source/licenses/bsd
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/usage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Api {

  /// <summary>Holder for reflection information generated from google/api/usage.proto</summary>
  public static partial class UsageReflection {

    #region Descriptor
    /// <summary>File descriptor for google/api/usage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UsageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZnb29nbGUvYXBpL3VzYWdlLnByb3RvEgpnb29nbGUuYXBpGhxnb29nbGUv",
            "YXBpL2Fubm90YXRpb25zLnByb3RvIkMKBVVzYWdlEhQKDHJlcXVpcmVtZW50",
            "cxgBIAMoCRIkCgVydWxlcxgGIAMoCzIVLmdvb2dsZS5hcGkuVXNhZ2VSdWxl",
            "Ij8KCVVzYWdlUnVsZRIQCghzZWxlY3RvchgBIAEoCRIgChhhbGxvd191bnJl",
            "Z2lzdGVyZWRfY2FsbHMYAiABKAhCJQoOY29tLmdvb2dsZS5hcGlCClVzYWdl",
            "UHJvdG9QAaICBEdBUEliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Usage), global::Google.Api.Usage.Parser, new[]{ "Requirements", "Rules" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.UsageRule), global::Google.Api.UsageRule.Parser, new[]{ "Selector", "AllowUnregisteredCalls" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Configuration controlling usage of a service.
  /// </summary>
  public sealed partial class Usage : pb::IMessage<Usage> {
    private static readonly pb::MessageParser<Usage> _parser = new pb::MessageParser<Usage>(() => new Usage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Usage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.UsageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Usage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Usage(Usage other) : this() {
      requirements_ = other.requirements_.Clone();
      rules_ = other.rules_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Usage Clone() {
      return new Usage(this);
    }

    /// <summary>Field number for the "requirements" field.</summary>
    public const int RequirementsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_requirements_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> requirements_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  Requirements that must be satisfied before a consumer project can use the
    ///  service. Each requirement is of the form &lt;service.name>/&lt;requirement-id>;
    ///  for example 'serviceusage.googleapis.com/billing-enabled'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Requirements {
      get { return requirements_; }
    }

    /// <summary>Field number for the "rules" field.</summary>
    public const int RulesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Google.Api.UsageRule> _repeated_rules_codec
        = pb::FieldCodec.ForMessage(50, global::Google.Api.UsageRule.Parser);
    private readonly pbc::RepeatedField<global::Google.Api.UsageRule> rules_ = new pbc::RepeatedField<global::Google.Api.UsageRule>();
    /// <summary>
    ///  A list of usage rules that apply to individual API methods.
    ///
    ///  **NOTE:** All service configuration rules follow "last one wins" order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Api.UsageRule> Rules {
      get { return rules_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Usage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Usage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!requirements_.Equals(other.requirements_)) return false;
      if(!rules_.Equals(other.rules_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= requirements_.GetHashCode();
      hash ^= rules_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      requirements_.WriteTo(output, _repeated_requirements_codec);
      rules_.WriteTo(output, _repeated_rules_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += requirements_.CalculateSize(_repeated_requirements_codec);
      size += rules_.CalculateSize(_repeated_rules_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Usage other) {
      if (other == null) {
        return;
      }
      requirements_.Add(other.requirements_);
      rules_.Add(other.rules_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            requirements_.AddEntriesFrom(input, _repeated_requirements_codec);
            break;
          }
          case 50: {
            rules_.AddEntriesFrom(input, _repeated_rules_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Usage configuration rules for the service.
  ///
  ///  NOTE: Under development.
  ///
  ///  Use this rule to configure unregistered calls for the service. Unregistered
  ///  calls are calls that do not contain consumer project identity.
  ///  (Example: calls that do not contain an API key).
  ///  By default, API methods do not allow unregistered calls, and each method call
  ///  must be identified by a consumer project identity. Use this rule to
  ///  allow/disallow unregistered calls.
  ///
  ///  Example of an API that wants to allow unregistered calls for entire service.
  ///
  ///      usage:
  ///        rules:
  ///        - selector: "*"
  ///          allow_unregistered_calls: true
  ///
  ///  Example of a method that wants to allow unregistered calls.
  ///
  ///      usage:
  ///        rules:
  ///        - selector: "google.example.library.v1.LibraryService.CreateBook"
  ///          allow_unregistered_calls: true
  /// </summary>
  public sealed partial class UsageRule : pb::IMessage<UsageRule> {
    private static readonly pb::MessageParser<UsageRule> _parser = new pb::MessageParser<UsageRule>(() => new UsageRule());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UsageRule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.UsageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsageRule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsageRule(UsageRule other) : this() {
      selector_ = other.selector_;
      allowUnregisteredCalls_ = other.allowUnregisteredCalls_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsageRule Clone() {
      return new UsageRule(this);
    }

    /// <summary>Field number for the "selector" field.</summary>
    public const int SelectorFieldNumber = 1;
    private string selector_ = "";
    /// <summary>
    ///  Selects the methods to which this rule applies. Use '*' to indicate all
    ///  methods in all APIs.
    ///
    ///  Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Selector {
      get { return selector_; }
      set {
        selector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allow_unregistered_calls" field.</summary>
    public const int AllowUnregisteredCallsFieldNumber = 2;
    private bool allowUnregisteredCalls_;
    /// <summary>
    ///  True, if the method allows unregistered calls; false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowUnregisteredCalls {
      get { return allowUnregisteredCalls_; }
      set {
        allowUnregisteredCalls_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UsageRule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UsageRule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Selector != other.Selector) return false;
      if (AllowUnregisteredCalls != other.AllowUnregisteredCalls) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Selector.Length != 0) hash ^= Selector.GetHashCode();
      if (AllowUnregisteredCalls != false) hash ^= AllowUnregisteredCalls.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Selector.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Selector);
      }
      if (AllowUnregisteredCalls != false) {
        output.WriteRawTag(16);
        output.WriteBool(AllowUnregisteredCalls);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Selector.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Selector);
      }
      if (AllowUnregisteredCalls != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UsageRule other) {
      if (other == null) {
        return;
      }
      if (other.Selector.Length != 0) {
        Selector = other.Selector;
      }
      if (other.AllowUnregisteredCalls != false) {
        AllowUnregisteredCalls = other.AllowUnregisteredCalls;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Selector = input.ReadString();
            break;
          }
          case 16: {
            AllowUnregisteredCalls = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
