/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Use of this source code is governed by a BSD-style
 * license that can be found in the LICENSE file or at
 * https://developers.google.com/open-source/licenses/bsd
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/billing.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Api {

  /// <summary>Holder for reflection information generated from google/api/billing.proto</summary>
  public static partial class BillingReflection {

    #region Descriptor
    /// <summary>File descriptor for google/api/billing.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BillingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chhnb29nbGUvYXBpL2JpbGxpbmcucHJvdG8SCmdvb2dsZS5hcGkaHGdvb2ds",
            "ZS9hcGkvYW5ub3RhdGlvbnMucHJvdG8aF2dvb2dsZS9hcGkvbWV0cmljLnBy",
            "b3RvIkgKB0JpbGxpbmcSDwoHbWV0cmljcxgBIAMoCRIsCgVydWxlcxgFIAMo",
            "CzIdLmdvb2dsZS5hcGkuQmlsbGluZ1N0YXR1c1J1bGUiPwoRQmlsbGluZ1N0",
            "YXR1c1J1bGUSEAoIc2VsZWN0b3IYASABKAkSGAoQYWxsb3dlZF9zdGF0dXNl",
            "cxgCIAMoCUIgCg5jb20uZ29vZ2xlLmFwaUIMQmlsbGluZ1Byb3RvUAFiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Api.MetricReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Billing), global::Google.Api.Billing.Parser, new[]{ "Metrics", "Rules" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.BillingStatusRule), global::Google.Api.BillingStatusRule.Parser, new[]{ "Selector", "AllowedStatuses" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Billing related configuration of the service.
  ///
  ///  The following example shows how to configure metrics for billing:
  ///
  ///      metrics:
  ///      - name: library.googleapis.com/read_calls
  ///        metric_kind: DELTA
  ///        value_type: INT64
  ///      - name: library.googleapis.com/write_calls
  ///        metric_kind: DELTA
  ///        value_type: INT64
  ///      billing:
  ///        metrics:
  ///        - library.googleapis.com/read_calls
  ///        - library.googleapis.com/write_calls
  ///
  ///  The next example shows how to enable billing status check and customize the
  ///  check behavior. It makes sure billing status check is included in the `Check`
  ///  method of [Service Control API](https://cloud.google.com/service-control/).
  ///  In the example, "google.storage.Get" method can be served when the billing
  ///  status is either `current` or `delinquent`, while "google.storage.Write"
  ///  method can only be served when the billing status is `current`:
  ///
  ///      billing:
  ///        rules:
  ///        - selector: google.storage.Get
  ///          allowed_statuses:
  ///          - current
  ///          - delinquent
  ///        - selector: google.storage.Write
  ///          allowed_statuses: current
  ///
  ///  Mostly services should only allow `current` status when serving requests.
  ///  In addition, services can choose to allow both `current` and `delinquent`
  ///  statuses when serving read-only requests to resources. If there's no
  ///  matching selector for operation, no billing status check will be performed.
  /// </summary>
  public sealed partial class Billing : pb::IMessage<Billing> {
    private static readonly pb::MessageParser<Billing> _parser = new pb::MessageParser<Billing>(() => new Billing());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Billing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.BillingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Billing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Billing(Billing other) : this() {
      metrics_ = other.metrics_.Clone();
      rules_ = other.rules_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Billing Clone() {
      return new Billing(this);
    }

    /// <summary>Field number for the "metrics" field.</summary>
    public const int MetricsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_metrics_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> metrics_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  Names of the metrics to report to billing. Each name must
    ///  be defined in [Service.metrics][google.api.Service.metrics] section.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Metrics {
      get { return metrics_; }
    }

    /// <summary>Field number for the "rules" field.</summary>
    public const int RulesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Api.BillingStatusRule> _repeated_rules_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Api.BillingStatusRule.Parser);
    private readonly pbc::RepeatedField<global::Google.Api.BillingStatusRule> rules_ = new pbc::RepeatedField<global::Google.Api.BillingStatusRule>();
    /// <summary>
    ///  A list of billing status rules for configuring billing status check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Api.BillingStatusRule> Rules {
      get { return rules_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Billing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Billing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!metrics_.Equals(other.metrics_)) return false;
      if(!rules_.Equals(other.rules_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= metrics_.GetHashCode();
      hash ^= rules_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      metrics_.WriteTo(output, _repeated_metrics_codec);
      rules_.WriteTo(output, _repeated_rules_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += metrics_.CalculateSize(_repeated_metrics_codec);
      size += rules_.CalculateSize(_repeated_rules_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Billing other) {
      if (other == null) {
        return;
      }
      metrics_.Add(other.metrics_);
      rules_.Add(other.rules_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            metrics_.AddEntriesFrom(input, _repeated_metrics_codec);
            break;
          }
          case 42: {
            rules_.AddEntriesFrom(input, _repeated_rules_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Defines the billing status requirements for operations.
  ///
  ///  When used with
  ///  [Service Control API](https://cloud.google.com/service-control/), the
  ///  following statuses are supported:
  ///
  ///  - **current**: the associated billing account is up to date and capable of
  ///                 paying for resource usages.
  ///  - **delinquent**: the associated billing account has a correctable problem,
  ///                    such as late payment.
  ///
  ///  Mostly services should only allow `current` status when serving requests.
  ///  In addition, services can choose to allow both `current` and `delinquent`
  ///  statuses when serving read-only requests to resources. If the list of
  ///  allowed_statuses is empty, it means no billing requirement.
  /// </summary>
  public sealed partial class BillingStatusRule : pb::IMessage<BillingStatusRule> {
    private static readonly pb::MessageParser<BillingStatusRule> _parser = new pb::MessageParser<BillingStatusRule>(() => new BillingStatusRule());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BillingStatusRule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.BillingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BillingStatusRule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BillingStatusRule(BillingStatusRule other) : this() {
      selector_ = other.selector_;
      allowedStatuses_ = other.allowedStatuses_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BillingStatusRule Clone() {
      return new BillingStatusRule(this);
    }

    /// <summary>Field number for the "selector" field.</summary>
    public const int SelectorFieldNumber = 1;
    private string selector_ = "";
    /// <summary>
    ///  Selects the operation names to which this rule applies.
    ///  Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Selector {
      get { return selector_; }
      set {
        selector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allowed_statuses" field.</summary>
    public const int AllowedStatusesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_allowedStatuses_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> allowedStatuses_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  Allowed billing statuses. The billing status check passes if the actual
    ///  billing status matches any of the provided values here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AllowedStatuses {
      get { return allowedStatuses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BillingStatusRule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BillingStatusRule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Selector != other.Selector) return false;
      if(!allowedStatuses_.Equals(other.allowedStatuses_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Selector.Length != 0) hash ^= Selector.GetHashCode();
      hash ^= allowedStatuses_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Selector.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Selector);
      }
      allowedStatuses_.WriteTo(output, _repeated_allowedStatuses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Selector.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Selector);
      }
      size += allowedStatuses_.CalculateSize(_repeated_allowedStatuses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BillingStatusRule other) {
      if (other == null) {
        return;
      }
      if (other.Selector.Length != 0) {
        Selector = other.Selector;
      }
      allowedStatuses_.Add(other.allowedStatuses_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Selector = input.ReadString();
            break;
          }
          case 18: {
            allowedStatuses_.AddEntriesFrom(input, _repeated_allowedStatuses_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
