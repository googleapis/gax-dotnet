{
  "namedRules": {
    "single-field": {
      "get": "/collections/{name}"
    },
    "single-field-with-wildcard-pattern": {
      "get": "/abc/{name=collections/*}"
    },
    "multi-binding": {
      "get": "/abc/{name=1*}",
      "additionalBindings": [
        {
          "get": "/def/{name=2*}"
        }
      ]
    }
  },

  "tests": [
    {
      "name": "SimpleSuccess",
      "details": "A simple GET request with no body, and no matching to perform",
      "inlineRule": {
        "get": "/simple"
      },
      "requestMessageName": "EmptyRequest",
      "request": {
      },
      "success": {
        "method": "GET",
        "uri": "/simple"
      }
    },

    {
      "name": "InvalidRulePattern_UnknownField",
      "details": "A rule with an invalid pattern - a field that isn't in the request message",
      "inlineRule": {
        "get": "/collections/{x}"
      },
      "requestMessageName": "SimpleFields",
      "invalidRule": "Field x doesn't exist in SimpleFields"
    },

    {
      "name": "InvalidRulePattern_TripleStars",
      "details": "A rule with an invalid pattern - triple stars",
      "inlineRule": {
        "get": "/collections/{x=***}"
      },
      "requestMessageName": "SimpleFields",
      "invalidRule": "*** is invalid in a pattern"
    },

    {
      "name": "SimpleNonMatchingRequest",
      "details": "A rule expecting a match for the name field",
      "ruleName": "single-field",
      "requestMessageName": "SimpleFields",
      "request": {
        "integer": 2
      },
      "nonmatchingRequest": "Name field has no value"
    },

    {
      "name": "SimpleNonMatchingRequest_SlashInSingleStarPatternField",
      "details": "A rule expecting a match for the name field",
      "inlineRule": {
        "get": "/collections/{name=*}"
      },
      "requestMessageName": "SimpleFields",
      "request": {
        "name": "abc/def"
      },
      "nonmatchingRequest": "Name field contains a slash, for pattern of {name=*}"
    },

    {
      "name": "SimpleNonMatchingRequest_SlashInImplicitSingleStarPatternField",
      "details": "A rule which matches the name field, which contains a slash",
      "inlineRule": {
        "get": "/collections/{name}"
      },
      "requestMessageName": "SimpleFields",
      "request": {
        "name": "abc/def"
      },
      "nonmatchingRequest": "Name field contains a slash, for pattern of {name=*}"
    },

    {
      "name": "SimpleMatchingRequest_SlashInExplicitDoubleStarPatternField",
      "details": "A rule which matches the name field, which contains a slash",
      "inlineRule": {
        "get": "/collections/{name=**}"
      },
      "requestMessageName": "SimpleFields",
      "request": {
        "name": "abc/def"
      },
      "success": {
        "method": "GET",
        "uri": "/collections/abc/def"
      }
    },

    {
      "name": "SimpleMatchingRequest",
      "details": "A rule which matches the name field",
      "ruleName": "single-field",
      "requestMessageName": "SimpleFields",
      "request": {
        "name": "xyz",
        "integer": 5
      },
      "success": {
        "method": "GET",
        "uri": "/collections/xyz?integer=5"
      }
    },

    {
      "name": "SimpleWildcardSuccess",
      "details": "A rule which matches the name field against a pattern of collections/*",
      "ruleName": "single-field-with-wildcard-pattern",
      "requestMessageName": "SimpleFields",
      "request": {
        "name": "collections/xyz"
      },
      "success": {
        "method": "GET",
        "uri": "/abc/collections/xyz"
      }
    },

    {
      "name": "SimpleWildcardFailure",
      "details": "A rule which fails to match the name field against a pattern of collections/*",
      "ruleName": "single-field-with-wildcard-pattern",
      "requestMessageName": "SimpleFields",
      "request": {
        "name": "other/xyz"
      },
      "nonmatchingRequest": "Value doesn't match pattern"
    },

    {
      "name": "MultiBindingTopLevelRuleMatch",
      "details": "Match the top-level rule within a multi-binding rule",
      "ruleName": "multi-binding",
      "requestMessageName": "SimpleFields",
      "request": {
        "name": "1xyz"
      },
      "success": {
        "method": "GET",
        "uri": "/abc/1xyz"
      }
    },
    {
      "name": "MultiBindingAdditionalRuleMatch",
      "details": "Match an additional rule within a multi-binding rule",
      "ruleName": "multi-binding",
      "requestMessageName": "SimpleFields",
      "request": {
        "name": "2xyz"
      },
      "success": {
        "method": "GET",
        "uri": "/def/2xyz"
      }
    },
    {
      "name": "MultiBindingFailure",
      "details": "A rule which fails to match against any of multiple patterns",
      "ruleName": "multi-binding",
      "requestMessageName": "SimpleFields",
      "request": {
        "name": "no-match"
      },
      "nonmatchingRequest": "Value doesn't match pattern"
    },

    {
      "name": "PostWithEmptyBody",
      "details": "A post request with no body specified should put all fields in the URL or query parameters.",
      "inlineRule": {
        "post": "/abc/{name}"
      },
      "requestMessageName": "SimpleFields",
      "request": {
        "name": "name",
        "integer": 1
      },
      "success": {
        "method": "POST",
        "uri": "/abc/name?integer=1"
      }
    },

    {
      "name": "ComplexQuery_Required_Absent",
      "details": "Required fields are present even if unspecified",
      "inlineRule": {
        "get": "/abc/{in_path}"
      },
      "requestMessageName": "QueryTestMessage",
      "request": {
        "inPath": "def"
      },
      "success": {
        "method": "GET",
        "uri": "/abc/def?requiredInteger=0"
      }
    },
    {
      "name": "ComplexQuery_Required_NonDefault",
      "details": "Required fields are present even if unspecified",
      "inlineRule": {
        "get": "/abc/{in_path}"
      },
      "requestMessageName": "QueryTestMessage",
      "request": {
        "inPath": "def",
        "required_integer": 5
      },
      "success": {
        "method": "GET",
        "uri": "/abc/def?requiredInteger=5"
      }
    },
    {
      "name": "ComplexQuery_Proto3Optional_SpecifiedDefault",
      "details": "Proto3 optional fields are present if specified, even with a default value",
      "inlineRule": {
        "get": "/abc/{in_path}"
      },
      "requestMessageName": "QueryTestMessage",
      "request": {
        "inPath": "def",
        "proto3_optional_integer": 0
      },
      "success": {
        "method": "GET",
        "uri": "/abc/def?proto3OptionalInteger=0&requiredInteger=0"
      }
    },
    {
      "name": "ComplexQuery_Proto3Optional_NonDefault",
      "details": "Proto3 optional fields are present with non-default values",
      "inlineRule": {
        "get": "/abc/{in_path}"
      },
      "requestMessageName": "QueryTestMessage",
      "request": {
        "inPath": "def",
        "proto3OptionalInteger": 5
      },
      "success": {
        "method": "GET",
        "uri": "/abc/def?proto3OptionalInteger=5&requiredInteger=0"
      }
    },
    {
      "name": "ComplexQuery_RepeatedField",
      "details": "Repeated fields are included in the query as repeated parameters, including default values.",
      "inlineRule": {
        "get": "/abc/{in_path}"
      },
      "requestMessageName": "QueryTestMessage",
      "request": {
        "repeatedString": [
          "a",
          "",
          "b"
        ],
        "inPath": "def"
      },
      "success": {
        "method": "GET",
        "uri": "/abc/def?repeatedString=a&repeatedString=&repeatedString=b&requiredInteger=0"
      }
    },
    {
      "name": "ComplexQuery_Nested",
      "details": "Message fields are presented as paths to leaf fields",
      "inlineRule": {
        "get": "/abc/{in_path}"
      },
      "requestMessageName": "QueryTestMessage",
      "request": {
        "nested": {
          "x": 10,
          "z": 30
        },
        "inPath": "def"
      },
      "success": {
        "method": "GET",
        "uri": "/abc/def?nested.x=10&nested.z=30&requiredInteger=0"
      }
    },
    {
      "name": "ComplexQuery_Enum",
      "details": "Enum values are represented with their original names",
      "inlineRule": {
        "get": "/abc/{in_path}"
      },
      "requestMessageName": "QueryTestMessage",
      "request": {
        "enumField": "FIRST_VALUE",
        "inPath": "def"
      },
      "success": {
        "method": "GET",
        "uri": "/abc/def?enumField=FIRST_VALUE&requiredInteger=0"
      }
    },
    {
      "name": "NamedBodyExcludedFromQuery",
      "details": "When the body is a specific field, that field should not be included in the query",
      "inlineRule": {
        "post": "/abc/{in_path}",
        "body": "nested"
      },
      "requestMessageName": "QueryTestMessage",
      "request": {
        "nested": {
          "x": 10,
          "z": 30
        },
        "inPath": "def"
      },
      "success": {
        "method": "POST",
        "uri": "/abc/def?requiredInteger=0",
        "body": {
          "x": 10,
          "z": 30
        }
      }
    },
    {
      "name": "AllFieldsBodyExcludesQuery",
      "details": "When the body is *, there should be no query parameters",
      "inlineRule": {
        "post": "/abc/{in_path}",
        "body": "*"
      },
      "requestMessageName": "QueryTestMessage",
      "request": {
        "nested": {
          "x": 10,
          "z": 30
        },
        "inPath": "def"
      },
      "success": {
        "method": "POST",
        "uri": "/abc/def",
        "body": {
          "nested": {
            "x": 10,
            "z": 30
          },
          "inPath": "def"
        }
      }
    },
    {
      "name": "NestedPathFieldExcludedFromQuery",
      "details": "When the path contains a nested field reference, it is excluded form query parameters",
      "requestMessageName": "QueryTestMessage",
      "inlineRule": {
        "get": "/abc/{nested.x}/{nested.y}"
      },

      "request": {
        "nested": {
          "x": 10,
          "y": 20,
          "z": 30
        }
      },
      "success": {
        "method": "GET",
        "uri": "/abc/10/20?nested.z=30&requiredInteger=0"
      }
    },
    {
      "name": "RecursiveField_SpecifiedBodyField",
      "details": "When a recursive field is specified as the body parameter, the rule is valid",
      "requestMessageName": "RequestWithRecursiveMessage",
      "inlineRule": {
        "post": "/abc",
        "body": "z"
      },
      "request": {
        "z": {
          "x": {
            "y": 1
          },
          "y": 2
        },
        "simple": {
          "name": "xyz"
        }
      },
      "success": {
        "method": "POST",
        "uri": "/abc?simple.name=xyz",
        "body": {
          "x": {
            "y": 1
          },
          "y": 2
        }
      }
    },
    {
      "name": "RecursiveField_WildcardBodyField",
      "details": "When * is specified as the body parameter, recursive messages are okay",
      "inlineRule": {
        "post": "/abc",
        "body": "*"
      },
      "requestMessageName": "RequestWithRecursiveMessage",
      "request": {
        "z": {
          "x": {
            "y": 1
          },
          "y": 2
        },
        "simple": {
          "name": "xyz"
        }
      },
      "success": {
        "method": "POST",
        "uri": "/abc",
        "body": {
          "z": {
            "x": {
              "y": 1
            },
            "y": 2
          },
          "simple": {
            "name": "xyz"
          }
        }
      }
    },

    {
      "name": "RecursiveField_NoBodyField",
      "details": "When there is no body parameter, recursive messages are invalid",
      "inlineRule": {
        "post": "/abc"
      },
      "requestMessageName": "RequestWithRecursiveMessage",
      "invalid_rule": "Query parameters would recurse"
    },
    {
      "name": "RecursiveField_NonRecursiveFieldForBody",
      "details": "When there's a recursive field other than the body parameter, the rule is invalid",
      "inlineRule": {
        "post": "/abc",
        "body": "simple"
      },
      "requestMessageName": "RequestWithRecursiveMessage",
      "invalid_rule": "Query parameters would recurse"
    },

    {
      "name": "MissingBody",
      "details": "When the field specified by the body is absent, there's no HTTP request body",
      "inlineRule": {
        "post": "/abc/{name}",
        "body": "body"
      },
      "requestMessageName": "SeparateBodyRequest",
      "request": {
        "name": "xyz"
      },
      "success": {
        "method": "POST",
        "uri": "/abc/xyz"
      }
    },
    {
      "name": "EmptyBody",
      "details": "When the field specified by the body is present but empty, the HTTP request body is just {}",
      "inlineRule": {
        "post": "/abc/{name}",
        "body": "body"
      },
      "requestMessageName": "SeparateBodyRequest",
      "request": {
        "name": "xyz",
        "body": {}
      },
      "success": {
        "method": "POST",
        "uri": "/abc/xyz",
        "body": {}
      }
    },
    {
      "name": "ContentfulBody",
      "details": "When the field specified by the body has content, that content is in the HTTP body",
      "inlineRule": {
        "post": "/abc/{name}",
        "body": "body"
      },
      "requestMessageName": "SeparateBodyRequest",
      "request": {
        "name": "xyz",
        "body": {
          "x": 1
        }
      },
      "success": {
        "method": "POST",
        "uri": "/abc/xyz",
        "body": {
          "x": 1
        }
      }
    },

    {
      "name": "UriEncoding_ExcludedCharacters",
      "details": "Characters that don't need escaping in a URI",
      "inlineRule": {
        "get": "/abc/{name}"
      },
      "requestMessageName": "SimpleFields",
      "request": {
        "name": "-_.~0123456789abcxyzABCXYZ"
      },
      "success": {
        "method": "GET",
        "uri": "/abc/-_.~0123456789abcxyzABCXYZ"
      }
    },
    {
      "name": "UriEncoding_EncodedPunctuation",
      "details": "Punctuation that needs escaping in a URI",
      "inlineRule": {
        "get": "/abc/{name}"
      },
      "requestMessageName": "SimpleFields",
      "request": {
        "name": "#!\"$%^&*()"
      },
      "success": {
        "method": "GET",
        "uri": "/abc/-_.~0123456789abcxyzABCXYZ"
      }
    },
    {
      "name": "UriEncoding_EncodedLetters",
      "details": "Non-ASCII letters need escaping in a URI",
      "inlineRule": {
        "get": "/abc/{name}"
      },
      "requestMessageName": "SimpleFields",
      "request": {
        "name": "café"
      },
      "success": {
        "method": "GET",
        "uri": "/abc/caf%C3%A9"
      }
    },
    {
      "name": "UriEncoding_SlashInDoubleStarPattern",
      "details": "A forward-slash in a pattern such as {field=**} is not escaped",
      "inlineRule": {
        "get": "/abc/{name=**}"
      },
      "requestMessageName": "SimpleFields",
      "request": {
        "name": "x/y"
      },
      "success": {
        "method": "GET",
        "uri": "/abc/x/y"
      }
    },
    {
      "name": "UriEncoding_SlashInMixedStarPattern",
      "details": "Forward slashes in a pattern of {field=*/**} is not escaped",
      "inlineRule": {
        "get": "/abc/{name=*/**}"
      },
      "requestMessageName": "SimpleFields",
      "request": {
        "name": "x/y/z"
      },
      "success": {
        "method": "GET",
        "uri": "/abc/x/y/z"
      }
    },

    {
      "name": "ComplexMatchingMultipleFieldsAndWildcards",
      "details": "Complex matching rule, mirroring an example in Firestore",
      "inlineRule": {
        "get": "/v1/{first=projects/*/databases/*/documents/*/**}/{second}"
      },
      "requestMessageName": "MultiNameRequest",
      "request": {
        "first": "projects/abc/databases/xyz/documents/123/456/789",
        "second": "ghi"
      },
      "success": {
        "method": "GET",
        "uri": "/v1/projects/abc/databases/xyz/documents/123/456/789/ghi"
      }
    },

    {
      "name": "BooleanQueryParameter_False",
      "details": "Request with a Boolean query parameter, which should be false",
      "inlineRule": {
        "get": "/v1/bool"
      },
      "requestMessageName": "RequiredBooleanField",
      "request": {
      },
      "success": {
        "method": "GET",
        "uri": "/v1/bool?boolean=false"
      }
    },
    {
      "name": "BooleanQueryParameter_True",
      "details": "Request with a Boolean query parameter, which should be true",
      "inlineRule": {
        "get": "/v1/bool"
      },
      "requestMessageName": "RequiredBooleanField",
      "request": {
        "boolean": true
      },
      "success": {
        "method": "GET",
        "uri": "/v1/bool?boolean=true"
      }
    },
    {
      "name": "TimestampQueryParameter",
      "details": "Request with a Timestamp query parameter, which should not include quotes",
      "inlineRule": {
        "get": "/v1/timestamp"
      },
      "requestMessageName": "SimpleFields",
      "request": {
        "timestamp": "2022-09-14T15:52:00Z"
      },
      "success": {
        "method": "GET",
        "uri": "/v1/timestamp?timestamp=2022-09-14T15%3A52%3A00Z"
      }
    },

    {
      "name": "DoubleNestingInQueryParameters",
      "details": "Request with a doubly-nested query parameter",
      "inlineRule": {
        "get": "/v1/nested"
      },
      "requestMessageName": "DoubleNestingTestMessage",
      "request": {
        "x": {
          "y": {
            "z": 3
          }
        }
      },
      "success": {
        "method": "GET",
        "uri": "/v1/nested?x.y.z=3"
      }
    },
    {
      "name": "DoubleNestingInUriSegment",
      "details": "Request with a doubly-nested field name in a URI",
      "inlineRule": {
        "get": "/v1/{x.y.z}"
      },
      "requestMessageName": "DoubleNestingTestMessage",
      "request": {
        "x": {
          "y": {
            "z": 3
          }
        }
      },
      "success": {
        "method": "GET",
        "uri": "/v1/3"
      }
    },

    {
      "name": "BooleanFieldInTemplate_TrueValue",
      "details": "A Boolean field should match in a template and produce 'true'",
      "inlineRule": {
        "get": "/v1/{boolean}"
      },
      "requestMessageName": "SimpleFields",
      "request": {
        "boolean": true
      },
      "success": {
        "method": "GET",
        "uri": "/v1/true"
      }
    },
    {
      "name": "BooleanFieldInTemplate_FalseValue",
      "details": "A Boolean field should match in a template and produce 'false'",
      "inlineRule": {
        "get": "/v1/{boolean}"
      },
      "requestMessageName": "SimpleFields",
      "request": {
      },
      "success": {
        "method": "GET",
        "uri": "/v1/false"
      }
    }
  ]
}
